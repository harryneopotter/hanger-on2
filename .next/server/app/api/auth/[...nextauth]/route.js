/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/auth/[...nextauth]/route";
exports.ids = ["app/api/auth/[...nextauth]/route"];
exports.modules = {

/***/ "(rsc)/./app/api/auth/[...nextauth]/route.ts":
/*!*********************************************!*\
  !*** ./app/api/auth/[...nextauth]/route.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ handler),\n/* harmony export */   POST: () => (/* binding */ handler),\n/* harmony export */   dynamic: () => (/* binding */ dynamic)\n/* harmony export */ });\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth */ \"(rsc)/./node_modules/next-auth/index.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/auth */ \"(rsc)/./lib/auth.ts\");\n\n\nconst dynamic = \"force-dynamic\"; // Ensure this route is treated as dynamic in export mode\nconst handler = next_auth__WEBPACK_IMPORTED_MODULE_0___default()(_lib_auth__WEBPACK_IMPORTED_MODULE_1__.authOptions);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2F1dGgvWy4uLm5leHRhdXRoXS9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBaUM7QUFDUTtBQUVsQyxNQUFNRSxVQUFVLGdCQUFnQixDQUFDLHlEQUF5RDtBQUVqRyxNQUFNQyxVQUFVSCxnREFBUUEsQ0FBQ0Msa0RBQVdBO0FBRU8iLCJzb3VyY2VzIjpbIkU6XFxBSSBXb3JrXFxXb3JrXFxQcm9mXFxoYW5nZXItb25cXGFwcFxcYXBpXFxhdXRoXFxbLi4ubmV4dGF1dGhdXFxyb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTmV4dEF1dGggZnJvbSAnbmV4dC1hdXRoJztcclxuaW1wb3J0IHsgYXV0aE9wdGlvbnMgfSBmcm9tICdAL2xpYi9hdXRoJztcclxuXHJcbmV4cG9ydCBjb25zdCBkeW5hbWljID0gXCJmb3JjZS1keW5hbWljXCI7IC8vIEVuc3VyZSB0aGlzIHJvdXRlIGlzIHRyZWF0ZWQgYXMgZHluYW1pYyBpbiBleHBvcnQgbW9kZVxyXG5cclxuY29uc3QgaGFuZGxlciA9IE5leHRBdXRoKGF1dGhPcHRpb25zKTtcclxuXHJcbmV4cG9ydCB7IGhhbmRsZXIgYXMgR0VULCBoYW5kbGVyIGFzIFBPU1QgfTtcclxuIl0sIm5hbWVzIjpbIk5leHRBdXRoIiwiYXV0aE9wdGlvbnMiLCJkeW5hbWljIiwiaGFuZGxlciIsIkdFVCIsIlBPU1QiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./app/api/auth/[...nextauth]/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/auth.ts":
/*!*********************!*\
  !*** ./lib/auth.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authOptions: () => (/* binding */ authOptions)\n/* harmony export */ });\n/* harmony import */ var next_auth_providers_google__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth/providers/google */ \"(rsc)/./node_modules/next-auth/providers/google.js\");\n/* harmony import */ var _auth_prisma_adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @auth/prisma-adapter */ \"(rsc)/./node_modules/@auth/prisma-adapter/index.js\");\n/* harmony import */ var _generated_prisma__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./generated/prisma */ \"(rsc)/./lib/generated/prisma/index.js\");\n/* harmony import */ var _generated_prisma__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_generated_prisma__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nconst prisma = new _generated_prisma__WEBPACK_IMPORTED_MODULE_2__.PrismaClient();\nconst authOptions = {\n    adapter: (0,_auth_prisma_adapter__WEBPACK_IMPORTED_MODULE_1__.PrismaAdapter)(prisma),\n    providers: [\n        (0,next_auth_providers_google__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n            clientId: process.env.GOOGLE_CLIENT_ID,\n            clientSecret: process.env.GOOGLE_CLIENT_SECRET\n        })\n    ],\n    session: {\n        strategy: 'database'\n    },\n    callbacks: {\n        async session ({ session, user }) {\n            if (session.user) {\n                session.user.id = user.id;\n            }\n            return session;\n        }\n    },\n    pages: {\n        signIn: '/login'\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvYXV0aC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUN3RDtBQUNIO0FBQ0g7QUFFbEQsTUFBTUcsU0FBUyxJQUFJRCwyREFBWUE7QUFFeEIsTUFBTUUsY0FBK0I7SUFDMUNDLFNBQVNKLG1FQUFhQSxDQUFDRTtJQUN2QkcsV0FBVztRQUNUTixzRUFBY0EsQ0FBQztZQUNiTyxVQUFVQyxRQUFRQyxHQUFHLENBQUNDLGdCQUFnQjtZQUN0Q0MsY0FBY0gsUUFBUUMsR0FBRyxDQUFDRyxvQkFBb0I7UUFDaEQ7S0FDRDtJQUNEQyxTQUFTO1FBQ1BDLFVBQVU7SUFDWjtJQUNBQyxXQUFXO1FBQ1QsTUFBTUYsU0FBUSxFQUFFQSxPQUFPLEVBQUVHLElBQUksRUFBRTtZQUM3QixJQUFJSCxRQUFRRyxJQUFJLEVBQUU7Z0JBQ2hCSCxRQUFRRyxJQUFJLENBQUNDLEVBQUUsR0FBR0QsS0FBS0MsRUFBRTtZQUMzQjtZQUNBLE9BQU9KO1FBQ1Q7SUFDRjtJQUNBSyxPQUFPO1FBQ0xDLFFBQVE7SUFDVjtBQUNGLEVBQUUiLCJzb3VyY2VzIjpbIkU6XFxBSSBXb3JrXFxXb3JrXFxQcm9mXFxoYW5nZXItb25cXGxpYlxcYXV0aC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0QXV0aE9wdGlvbnMgfSBmcm9tICduZXh0LWF1dGgnO1xyXG5pbXBvcnQgR29vZ2xlUHJvdmlkZXIgZnJvbSAnbmV4dC1hdXRoL3Byb3ZpZGVycy9nb29nbGUnO1xyXG5pbXBvcnQgeyBQcmlzbWFBZGFwdGVyIH0gZnJvbSAnQGF1dGgvcHJpc21hLWFkYXB0ZXInO1xyXG5pbXBvcnQgeyBQcmlzbWFDbGllbnQgfSBmcm9tICcuL2dlbmVyYXRlZC9wcmlzbWEnO1xyXG5cclxuY29uc3QgcHJpc21hID0gbmV3IFByaXNtYUNsaWVudCgpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGF1dGhPcHRpb25zOiBOZXh0QXV0aE9wdGlvbnMgPSB7XHJcbiAgYWRhcHRlcjogUHJpc21hQWRhcHRlcihwcmlzbWEpIGFzIGFueSxcclxuICBwcm92aWRlcnM6IFtcclxuICAgIEdvb2dsZVByb3ZpZGVyKHtcclxuICAgICAgY2xpZW50SWQ6IHByb2Nlc3MuZW52LkdPT0dMRV9DTElFTlRfSUQhLFxyXG4gICAgICBjbGllbnRTZWNyZXQ6IHByb2Nlc3MuZW52LkdPT0dMRV9DTElFTlRfU0VDUkVUISxcclxuICAgIH0pLFxyXG4gIF0sXHJcbiAgc2Vzc2lvbjoge1xyXG4gICAgc3RyYXRlZ3k6ICdkYXRhYmFzZScsXHJcbiAgfSxcclxuICBjYWxsYmFja3M6IHtcclxuICAgIGFzeW5jIHNlc3Npb24oeyBzZXNzaW9uLCB1c2VyIH0pIHtcclxuICAgICAgaWYgKHNlc3Npb24udXNlcikge1xyXG4gICAgICAgIHNlc3Npb24udXNlci5pZCA9IHVzZXIuaWQ7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHNlc3Npb247XHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgcGFnZXM6IHtcclxuICAgIHNpZ25JbjogJy9sb2dpbicsXHJcbiAgfSxcclxufTtcclxuIl0sIm5hbWVzIjpbIkdvb2dsZVByb3ZpZGVyIiwiUHJpc21hQWRhcHRlciIsIlByaXNtYUNsaWVudCIsInByaXNtYSIsImF1dGhPcHRpb25zIiwiYWRhcHRlciIsInByb3ZpZGVycyIsImNsaWVudElkIiwicHJvY2VzcyIsImVudiIsIkdPT0dMRV9DTElFTlRfSUQiLCJjbGllbnRTZWNyZXQiLCJHT09HTEVfQ0xJRU5UX1NFQ1JFVCIsInNlc3Npb24iLCJzdHJhdGVneSIsImNhbGxiYWNrcyIsInVzZXIiLCJpZCIsInBhZ2VzIiwic2lnbkluIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/auth.ts\n");

/***/ }),

/***/ "(rsc)/./lib/generated/prisma/index.js":
/*!***************************************!*\
  !*** ./lib/generated/prisma/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/* !!! This is code generated by Prisma. Do not edit directly. !!!\n/* eslint-disable */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst { PrismaClientKnownRequestError, PrismaClientUnknownRequestError, PrismaClientRustPanicError, PrismaClientInitializationError, PrismaClientValidationError, getPrismaClient, sqltag, empty, join, raw, skip, Decimal, Debug, objectEnumValues, makeStrictEnum, Extensions, warnOnce, defineDmmfProperty, Public, getRuntime, createParam } = __webpack_require__(/*! ./runtime/library.js */ \"(rsc)/./lib/generated/prisma/runtime/library.js\");\nconst Prisma = {};\nexports.Prisma = Prisma;\nexports.$Enums = {};\n/**\n * Prisma Client JS version: 6.13.0\n * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd\n */ Prisma.prismaVersion = {\n    client: \"6.13.0\",\n    engine: \"361e86d0ea4987e9f53a565309b3eed797a6bcbd\"\n};\nPrisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;\nPrisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;\nPrisma.PrismaClientRustPanicError = PrismaClientRustPanicError;\nPrisma.PrismaClientInitializationError = PrismaClientInitializationError;\nPrisma.PrismaClientValidationError = PrismaClientValidationError;\nPrisma.Decimal = Decimal;\n/**\n * Re-export of sql-template-tag\n */ Prisma.sql = sqltag;\nPrisma.empty = empty;\nPrisma.join = join;\nPrisma.raw = raw;\nPrisma.validator = Public.validator;\n/**\n* Extensions\n*/ Prisma.getExtensionContext = Extensions.getExtensionContext;\nPrisma.defineExtension = Extensions.defineExtension;\n/**\n * Shorthand utilities for JSON filtering\n */ Prisma.DbNull = objectEnumValues.instances.DbNull;\nPrisma.JsonNull = objectEnumValues.instances.JsonNull;\nPrisma.AnyNull = objectEnumValues.instances.AnyNull;\nPrisma.NullTypes = {\n    DbNull: objectEnumValues.classes.DbNull,\n    JsonNull: objectEnumValues.classes.JsonNull,\n    AnyNull: objectEnumValues.classes.AnyNull\n};\nconst path = __webpack_require__(/*! path */ \"path\");\n/**\n * Enums\n */ exports.Prisma.TransactionIsolationLevel = makeStrictEnum({\n    ReadUncommitted: 'ReadUncommitted',\n    ReadCommitted: 'ReadCommitted',\n    RepeatableRead: 'RepeatableRead',\n    Serializable: 'Serializable'\n});\nexports.Prisma.AccountScalarFieldEnum = {\n    id: 'id',\n    userId: 'userId',\n    type: 'type',\n    provider: 'provider',\n    providerAccountId: 'providerAccountId',\n    refresh_token: 'refresh_token',\n    access_token: 'access_token',\n    expires_at: 'expires_at',\n    token_type: 'token_type',\n    scope: 'scope',\n    id_token: 'id_token',\n    session_state: 'session_state'\n};\nexports.Prisma.SessionScalarFieldEnum = {\n    id: 'id',\n    sessionToken: 'sessionToken',\n    userId: 'userId',\n    expires: 'expires'\n};\nexports.Prisma.UserScalarFieldEnum = {\n    id: 'id',\n    name: 'name',\n    email: 'email',\n    emailVerified: 'emailVerified',\n    image: 'image',\n    createdAt: 'createdAt',\n    updatedAt: 'updatedAt'\n};\nexports.Prisma.VerificationTokenScalarFieldEnum = {\n    identifier: 'identifier',\n    token: 'token',\n    expires: 'expires'\n};\nexports.Prisma.GarmentScalarFieldEnum = {\n    id: 'id',\n    name: 'name',\n    category: 'category',\n    material: 'material',\n    color: 'color',\n    size: 'size',\n    brand: 'brand',\n    purchaseDate: 'purchaseDate',\n    cost: 'cost',\n    careInstructions: 'careInstructions',\n    status: 'status',\n    notes: 'notes',\n    userId: 'userId',\n    createdAt: 'createdAt',\n    updatedAt: 'updatedAt'\n};\nexports.Prisma.GarmentImageScalarFieldEnum = {\n    id: 'id',\n    url: 'url',\n    fileName: 'fileName',\n    fileSize: 'fileSize',\n    mimeType: 'mimeType',\n    garmentId: 'garmentId',\n    createdAt: 'createdAt'\n};\nexports.Prisma.TagScalarFieldEnum = {\n    id: 'id',\n    name: 'name',\n    color: 'color',\n    userId: 'userId',\n    createdAt: 'createdAt'\n};\nexports.Prisma.GarmentTagScalarFieldEnum = {\n    garmentId: 'garmentId',\n    tagId: 'tagId'\n};\nexports.Prisma.SortOrder = {\n    asc: 'asc',\n    desc: 'desc'\n};\nexports.Prisma.QueryMode = {\n    default: 'default',\n    insensitive: 'insensitive'\n};\nexports.Prisma.NullsOrder = {\n    first: 'first',\n    last: 'last'\n};\nexports.GarmentStatus = exports.$Enums.GarmentStatus = {\n    CLEAN: 'CLEAN',\n    DIRTY: 'DIRTY',\n    WORN_2X: 'WORN_2X',\n    NEEDS_WASHING: 'NEEDS_WASHING'\n};\nexports.Prisma.ModelName = {\n    Account: 'Account',\n    Session: 'Session',\n    User: 'User',\n    VerificationToken: 'VerificationToken',\n    Garment: 'Garment',\n    GarmentImage: 'GarmentImage',\n    Tag: 'Tag',\n    GarmentTag: 'GarmentTag'\n};\n/**\n * Create the Client\n */ const config = {\n    \"generator\": {\n        \"name\": \"client\",\n        \"provider\": {\n            \"fromEnvVar\": null,\n            \"value\": \"prisma-client-js\"\n        },\n        \"output\": {\n            \"value\": \"E:\\\\AI Work\\\\Work\\\\Prof\\\\hanger-on\\\\lib\\\\generated\\\\prisma\",\n            \"fromEnvVar\": null\n        },\n        \"config\": {\n            \"engineType\": \"library\"\n        },\n        \"binaryTargets\": [\n            {\n                \"fromEnvVar\": null,\n                \"value\": \"windows\",\n                \"native\": true\n            }\n        ],\n        \"previewFeatures\": [],\n        \"sourceFilePath\": \"E:\\\\AI Work\\\\Work\\\\Prof\\\\hanger-on\\\\prisma\\\\schema.prisma\",\n        \"isCustomOutput\": true\n    },\n    \"relativeEnvPaths\": {\n        \"rootEnvPath\": \"../../../.env\",\n        \"schemaEnvPath\": \"../../../.env\"\n    },\n    \"relativePath\": \"../../../prisma\",\n    \"clientVersion\": \"6.13.0\",\n    \"engineVersion\": \"361e86d0ea4987e9f53a565309b3eed797a6bcbd\",\n    \"datasourceNames\": [\n        \"db\"\n    ],\n    \"activeProvider\": \"postgresql\",\n    \"postinstall\": false,\n    \"inlineDatasources\": {\n        \"db\": {\n            \"url\": {\n                \"fromEnvVar\": \"DATABASE_URL\",\n                \"value\": null\n            }\n        }\n    },\n    \"inlineSchema\": \"// This is your Prisma schema file,\\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\\n\\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\\n\\ngenerator client {\\n  provider = \\\"prisma-client-js\\\"\\n  output   = \\\"../lib/generated/prisma\\\"\\n}\\n\\ndatasource db {\\n  provider = \\\"postgresql\\\"\\n  url      = env(\\\"DATABASE_URL\\\")\\n}\\n\\n// NextAuth.js Models\\nmodel Account {\\n  id                String  @id @default(cuid())\\n  userId            String  @map(\\\"user_id\\\")\\n  type              String\\n  provider          String\\n  providerAccountId String  @map(\\\"provider_account_id\\\")\\n  refresh_token     String? @db.Text\\n  access_token      String? @db.Text\\n  expires_at        Int?\\n  token_type        String?\\n  scope             String?\\n  id_token          String? @db.Text\\n  session_state     String?\\n\\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\\n\\n  @@unique([provider, providerAccountId])\\n  @@map(\\\"accounts\\\")\\n}\\n\\nmodel Session {\\n  id           String   @id @default(cuid())\\n  sessionToken String   @unique @map(\\\"session_token\\\")\\n  userId       String   @map(\\\"user_id\\\")\\n  expires      DateTime\\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\\n\\n  @@map(\\\"sessions\\\")\\n}\\n\\nmodel User {\\n  id            String    @id @default(cuid())\\n  name          String?\\n  email         String    @unique\\n  emailVerified DateTime? @map(\\\"email_verified\\\")\\n  image         String?\\n  createdAt     DateTime  @default(now()) @map(\\\"created_at\\\")\\n  updatedAt     DateTime  @updatedAt @map(\\\"updated_at\\\")\\n  accounts      Account[]\\n  sessions      Session[]\\n  garments      Garment[]\\n  tags          Tag[]\\n\\n  @@map(\\\"users\\\")\\n}\\n\\nmodel VerificationToken {\\n  identifier String\\n  token      String   @unique\\n  expires    DateTime\\n\\n  @@unique([identifier, token])\\n  @@map(\\\"verification_tokens\\\")\\n}\\n\\n// Wardrobe Management Models\\nmodel Garment {\\n  id               String         @id @default(cuid())\\n  name             String\\n  category         String\\n  material         String?\\n  color            String?\\n  size             String?\\n  brand            String?\\n  purchaseDate     DateTime?      @map(\\\"purchase_date\\\")\\n  cost             Float?\\n  careInstructions String?        @map(\\\"care_instructions\\\")\\n  status           GarmentStatus  @default(CLEAN)\\n  notes            String?\\n  images           GarmentImage[]\\n  tags             GarmentTag[]\\n  userId           String         @map(\\\"user_id\\\")\\n  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)\\n  createdAt        DateTime       @default(now()) @map(\\\"created_at\\\")\\n  updatedAt        DateTime       @updatedAt @map(\\\"updated_at\\\")\\n\\n  @@map(\\\"garments\\\")\\n}\\n\\nmodel GarmentImage {\\n  id        String   @id @default(cuid())\\n  url       String\\n  fileName  String   @map(\\\"file_name\\\")\\n  fileSize  Int      @map(\\\"file_size\\\")\\n  mimeType  String   @map(\\\"mime_type\\\")\\n  garmentId String   @map(\\\"garment_id\\\")\\n  garment   Garment  @relation(fields: [garmentId], references: [id], onDelete: Cascade)\\n  createdAt DateTime @default(now()) @map(\\\"created_at\\\")\\n\\n  @@map(\\\"garment_images\\\")\\n}\\n\\nmodel Tag {\\n  id        String       @id @default(cuid())\\n  name      String\\n  color     String? // Hex color for tag display\\n  userId    String       @map(\\\"user_id\\\")\\n  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)\\n  garments  GarmentTag[]\\n  createdAt DateTime     @default(now()) @map(\\\"created_at\\\")\\n\\n  @@unique([name, userId]) // User can't have duplicate tag names\\n  @@map(\\\"tags\\\")\\n}\\n\\nmodel GarmentTag {\\n  garmentId String  @map(\\\"garment_id\\\")\\n  tagId     String  @map(\\\"tag_id\\\")\\n  garment   Garment @relation(fields: [garmentId], references: [id], onDelete: Cascade)\\n  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)\\n\\n  @@id([garmentId, tagId])\\n  @@map(\\\"garment_tags\\\")\\n}\\n\\nenum GarmentStatus {\\n  CLEAN\\n  DIRTY\\n  WORN_2X\\n  NEEDS_WASHING\\n}\\n\",\n    \"inlineSchemaHash\": \"af6d7fa4d8ccc1cf144c6db654be39d79df7cad48a6d49da5ba561442b05b4d2\",\n    \"copyEngine\": true\n};\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconfig.dirname = __dirname;\nif (!fs.existsSync(path.join(__dirname, 'schema.prisma'))) {\n    const alternativePaths = [\n        \"lib/generated/prisma\",\n        \"generated/prisma\"\n    ];\n    const alternativePath = alternativePaths.find((altPath)=>{\n        return fs.existsSync(path.join(process.cwd(), altPath, 'schema.prisma'));\n    }) ?? alternativePaths[0];\n    config.dirname = path.join(process.cwd(), alternativePath);\n    config.isBundled = true;\n}\nconfig.runtimeDataModel = JSON.parse(\"{\\\"models\\\":{\\\"Account\\\":{\\\"dbName\\\":\\\"accounts\\\",\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"cuid\\\",\\\"args\\\":[1]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"userId\\\",\\\"dbName\\\":\\\"user_id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"type\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"provider\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"providerAccountId\\\",\\\"dbName\\\":\\\"provider_account_id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"refresh_token\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"Text\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"access_token\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"Text\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"expires_at\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"token_type\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"scope\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"id_token\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":[\\\"Text\\\",[]],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"session_state\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"user\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"User\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"AccountToUser\\\",\\\"relationFromFields\\\":[\\\"userId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[[\\\"provider\\\",\\\"providerAccountId\\\"]],\\\"uniqueIndexes\\\":[{\\\"name\\\":null,\\\"fields\\\":[\\\"provider\\\",\\\"providerAccountId\\\"]}],\\\"isGenerated\\\":false},\\\"Session\\\":{\\\"dbName\\\":\\\"sessions\\\",\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"cuid\\\",\\\"args\\\":[1]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"sessionToken\\\",\\\"dbName\\\":\\\"session_token\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"userId\\\",\\\"dbName\\\":\\\"user_id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"expires\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"user\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"User\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"SessionToUser\\\",\\\"relationFromFields\\\":[\\\"userId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"User\\\":{\\\"dbName\\\":\\\"users\\\",\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"cuid\\\",\\\"args\\\":[1]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"name\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"email\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"emailVerified\\\",\\\"dbName\\\":\\\"email_verified\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"image\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"dbName\\\":\\\"created_at\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"dbName\\\":\\\"updated_at\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true},{\\\"name\\\":\\\"accounts\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Account\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"AccountToUser\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"sessions\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Session\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"SessionToUser\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"garments\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Garment\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"GarmentToUser\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"tags\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Tag\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"TagToUser\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"VerificationToken\\\":{\\\"dbName\\\":\\\"verification_tokens\\\",\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"identifier\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"token\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":true,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"expires\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[[\\\"identifier\\\",\\\"token\\\"]],\\\"uniqueIndexes\\\":[{\\\"name\\\":null,\\\"fields\\\":[\\\"identifier\\\",\\\"token\\\"]}],\\\"isGenerated\\\":false},\\\"Garment\\\":{\\\"dbName\\\":\\\"garments\\\",\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"cuid\\\",\\\"args\\\":[1]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"name\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"category\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"material\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"color\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"size\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"brand\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"purchaseDate\\\",\\\"dbName\\\":\\\"purchase_date\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"cost\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Float\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"careInstructions\\\",\\\"dbName\\\":\\\"care_instructions\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"status\\\",\\\"kind\\\":\\\"enum\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"GarmentStatus\\\",\\\"nativeType\\\":null,\\\"default\\\":\\\"CLEAN\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"notes\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"images\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"GarmentImage\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"GarmentToGarmentImage\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"tags\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"GarmentTag\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"GarmentToGarmentTag\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"userId\\\",\\\"dbName\\\":\\\"user_id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"user\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"User\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"GarmentToUser\\\",\\\"relationFromFields\\\":[\\\"userId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"dbName\\\":\\\"created_at\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"updatedAt\\\",\\\"dbName\\\":\\\"updated_at\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":true}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"GarmentImage\\\":{\\\"dbName\\\":\\\"garment_images\\\",\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"cuid\\\",\\\"args\\\":[1]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"url\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"fileName\\\",\\\"dbName\\\":\\\"file_name\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"fileSize\\\",\\\"dbName\\\":\\\"file_size\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Int\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"mimeType\\\",\\\"dbName\\\":\\\"mime_type\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"garmentId\\\",\\\"dbName\\\":\\\"garment_id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"garment\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Garment\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"GarmentToGarmentImage\\\",\\\"relationFromFields\\\":[\\\"garmentId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"dbName\\\":\\\"created_at\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false},\\\"Tag\\\":{\\\"dbName\\\":\\\"tags\\\",\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":true,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"cuid\\\",\\\"args\\\":[1]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"name\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"color\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":false,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"userId\\\",\\\"dbName\\\":\\\"user_id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"user\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"User\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"TagToUser\\\",\\\"relationFromFields\\\":[\\\"userId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"garments\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":true,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"GarmentTag\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"GarmentTagToTag\\\",\\\"relationFromFields\\\":[],\\\"relationToFields\\\":[],\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"createdAt\\\",\\\"dbName\\\":\\\"created_at\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":true,\\\"type\\\":\\\"DateTime\\\",\\\"nativeType\\\":null,\\\"default\\\":{\\\"name\\\":\\\"now\\\",\\\"args\\\":[]},\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":null,\\\"uniqueFields\\\":[[\\\"name\\\",\\\"userId\\\"]],\\\"uniqueIndexes\\\":[{\\\"name\\\":null,\\\"fields\\\":[\\\"name\\\",\\\"userId\\\"]}],\\\"isGenerated\\\":false},\\\"GarmentTag\\\":{\\\"dbName\\\":\\\"garment_tags\\\",\\\"schema\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"garmentId\\\",\\\"dbName\\\":\\\"garment_id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"tagId\\\",\\\"dbName\\\":\\\"tag_id\\\",\\\"kind\\\":\\\"scalar\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":true,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"String\\\",\\\"nativeType\\\":null,\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"garment\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Garment\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"GarmentToGarmentTag\\\",\\\"relationFromFields\\\":[\\\"garmentId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false},{\\\"name\\\":\\\"tag\\\",\\\"kind\\\":\\\"object\\\",\\\"isList\\\":false,\\\"isRequired\\\":true,\\\"isUnique\\\":false,\\\"isId\\\":false,\\\"isReadOnly\\\":false,\\\"hasDefaultValue\\\":false,\\\"type\\\":\\\"Tag\\\",\\\"nativeType\\\":null,\\\"relationName\\\":\\\"GarmentTagToTag\\\",\\\"relationFromFields\\\":[\\\"tagId\\\"],\\\"relationToFields\\\":[\\\"id\\\"],\\\"relationOnDelete\\\":\\\"Cascade\\\",\\\"isGenerated\\\":false,\\\"isUpdatedAt\\\":false}],\\\"primaryKey\\\":{\\\"name\\\":null,\\\"fields\\\":[\\\"garmentId\\\",\\\"tagId\\\"]},\\\"uniqueFields\\\":[],\\\"uniqueIndexes\\\":[],\\\"isGenerated\\\":false}},\\\"enums\\\":{\\\"GarmentStatus\\\":{\\\"values\\\":[{\\\"name\\\":\\\"CLEAN\\\",\\\"dbName\\\":null},{\\\"name\\\":\\\"DIRTY\\\",\\\"dbName\\\":null},{\\\"name\\\":\\\"WORN_2X\\\",\\\"dbName\\\":null},{\\\"name\\\":\\\"NEEDS_WASHING\\\",\\\"dbName\\\":null}],\\\"dbName\\\":null}},\\\"types\\\":{}}\");\ndefineDmmfProperty(exports.Prisma, config.runtimeDataModel);\nconfig.engineWasm = undefined;\nconfig.compilerWasm = undefined;\nconst { warnEnvConflicts } = __webpack_require__(/*! ./runtime/library.js */ \"(rsc)/./lib/generated/prisma/runtime/library.js\");\nwarnEnvConflicts({\n    rootEnvPath: config.relativeEnvPaths.rootEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.rootEnvPath),\n    schemaEnvPath: config.relativeEnvPaths.schemaEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.schemaEnvPath)\n});\nconst PrismaClient = getPrismaClient(config);\nexports.PrismaClient = PrismaClient;\nObject.assign(exports, Prisma);\n// file annotations for bundling tools to include these files\npath.join(__dirname, \"query_engine-windows.dll.node\");\npath.join(process.cwd(), \"lib/generated/prisma/query_engine-windows.dll.node\");\n// file annotations for bundling tools to include these files\npath.join(__dirname, \"schema.prisma\");\npath.join(process.cwd(), \"lib/generated/prisma/schema.prisma\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/generated/prisma/index.js\n");

/***/ }),

/***/ "(rsc)/./lib/generated/prisma/runtime/library.js":
/*!*************************************************!*\
  !*** ./lib/generated/prisma/runtime/library.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* !!! This is code generated by Prisma. Do not edit directly. !!!\n/* eslint-disable */ \nvar xu = Object.create;\nvar Vt = Object.defineProperty;\nvar vu = Object.getOwnPropertyDescriptor;\nvar Pu = Object.getOwnPropertyNames;\nvar Tu = Object.getPrototypeOf, Su = Object.prototype.hasOwnProperty;\nvar Oo = (e, r)=>()=>(e && (r = e(e = 0)), r);\nvar ne = (e, r)=>()=>(r || e((r = {\n            exports: {}\n        }).exports, r), r.exports), tr = (e, r)=>{\n    for(var t in r)Vt(e, t, {\n        get: r[t],\n        enumerable: !0\n    });\n}, _o = (e, r, t, n)=>{\n    if (r && typeof r == \"object\" || typeof r == \"function\") for (let i of Pu(r))!Su.call(e, i) && i !== t && Vt(e, i, {\n        get: ()=>r[i],\n        enumerable: !(n = vu(r, i)) || n.enumerable\n    });\n    return e;\n};\nvar C = (e, r, t)=>(t = e != null ? xu(Tu(e)) : {}, _o(r || !e || !e.__esModule ? Vt(t, \"default\", {\n        value: e,\n        enumerable: !0\n    }) : t, e)), Ru = (e)=>_o(Vt({}, \"__esModule\", {\n        value: !0\n    }), e);\nvar yi = ne((Fg, ss)=>{\n    \"use strict\";\n    ss.exports = (e, r = process.argv)=>{\n        let t = e.startsWith(\"-\") ? \"\" : e.length === 1 ? \"-\" : \"--\", n = r.indexOf(t + e), i = r.indexOf(\"--\");\n        return n !== -1 && (i === -1 || n < i);\n    };\n});\nvar us = ne((Mg, ls)=>{\n    \"use strict\";\n    var jc = __webpack_require__(/*! node:os */ \"node:os\"), as = __webpack_require__(/*! node:tty */ \"node:tty\"), de = yi(), { env: G } = process, Qe;\n    de(\"no-color\") || de(\"no-colors\") || de(\"color=false\") || de(\"color=never\") ? Qe = 0 : (de(\"color\") || de(\"colors\") || de(\"color=true\") || de(\"color=always\")) && (Qe = 1);\n    \"FORCE_COLOR\" in G && (G.FORCE_COLOR === \"true\" ? Qe = 1 : G.FORCE_COLOR === \"false\" ? Qe = 0 : Qe = G.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(G.FORCE_COLOR, 10), 3));\n    function bi(e) {\n        return e === 0 ? !1 : {\n            level: e,\n            hasBasic: !0,\n            has256: e >= 2,\n            has16m: e >= 3\n        };\n    }\n    function Ei(e, r) {\n        if (Qe === 0) return 0;\n        if (de(\"color=16m\") || de(\"color=full\") || de(\"color=truecolor\")) return 3;\n        if (de(\"color=256\")) return 2;\n        if (e && !r && Qe === void 0) return 0;\n        let t = Qe || 0;\n        if (G.TERM === \"dumb\") return t;\n        if (process.platform === \"win32\") {\n            let n = jc.release().split(\".\");\n            return Number(n[0]) >= 10 && Number(n[2]) >= 10586 ? Number(n[2]) >= 14931 ? 3 : 2 : 1;\n        }\n        if (\"CI\" in G) return [\n            \"TRAVIS\",\n            \"CIRCLECI\",\n            \"APPVEYOR\",\n            \"GITLAB_CI\",\n            \"GITHUB_ACTIONS\",\n            \"BUILDKITE\"\n        ].some((n)=>n in G) || G.CI_NAME === \"codeship\" ? 1 : t;\n        if (\"TEAMCITY_VERSION\" in G) return /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(G.TEAMCITY_VERSION) ? 1 : 0;\n        if (G.COLORTERM === \"truecolor\") return 3;\n        if (\"TERM_PROGRAM\" in G) {\n            let n = parseInt((G.TERM_PROGRAM_VERSION || \"\").split(\".\")[0], 10);\n            switch(G.TERM_PROGRAM){\n                case \"iTerm.app\":\n                    return n >= 3 ? 3 : 2;\n                case \"Apple_Terminal\":\n                    return 2;\n            }\n        }\n        return /-256(color)?$/i.test(G.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(G.TERM) || \"COLORTERM\" in G ? 1 : t;\n    }\n    function Vc(e) {\n        let r = Ei(e, e && e.isTTY);\n        return bi(r);\n    }\n    ls.exports = {\n        supportsColor: Vc,\n        stdout: bi(Ei(!0, as.isatty(1))),\n        stderr: bi(Ei(!0, as.isatty(2)))\n    };\n});\nvar ds = ne(($g, ps)=>{\n    \"use strict\";\n    var Bc = us(), br = yi();\n    function cs(e) {\n        if (/^\\d{3,4}$/.test(e)) {\n            let t = /(\\d{1,2})(\\d{2})/.exec(e) || [];\n            return {\n                major: 0,\n                minor: parseInt(t[1], 10),\n                patch: parseInt(t[2], 10)\n            };\n        }\n        let r = (e || \"\").split(\".\").map((t)=>parseInt(t, 10));\n        return {\n            major: r[0],\n            minor: r[1],\n            patch: r[2]\n        };\n    }\n    function wi(e) {\n        let { CI: r, FORCE_HYPERLINK: t, NETLIFY: n, TEAMCITY_VERSION: i, TERM_PROGRAM: o, TERM_PROGRAM_VERSION: s, VTE_VERSION: a, TERM: l } = process.env;\n        if (t) return !(t.length > 0 && parseInt(t, 10) === 0);\n        if (br(\"no-hyperlink\") || br(\"no-hyperlinks\") || br(\"hyperlink=false\") || br(\"hyperlink=never\")) return !1;\n        if (br(\"hyperlink=true\") || br(\"hyperlink=always\") || n) return !0;\n        if (!Bc.supportsColor(e) || e && !e.isTTY) return !1;\n        if (\"WT_SESSION\" in process.env) return !0;\n        if (process.platform === \"win32\" || r || i) return !1;\n        if (o) {\n            let u = cs(s || \"\");\n            switch(o){\n                case \"iTerm.app\":\n                    return u.major === 3 ? u.minor >= 1 : u.major > 3;\n                case \"WezTerm\":\n                    return u.major >= 20200620;\n                case \"vscode\":\n                    return u.major > 1 || u.major === 1 && u.minor >= 72;\n                case \"ghostty\":\n                    return !0;\n            }\n        }\n        if (a) {\n            if (a === \"0.50.0\") return !1;\n            let u = cs(a);\n            return u.major > 0 || u.minor >= 50;\n        }\n        switch(l){\n            case \"alacritty\":\n                return !0;\n        }\n        return !1;\n    }\n    ps.exports = {\n        supportsHyperlink: wi,\n        stdout: wi(process.stdout),\n        stderr: wi(process.stderr)\n    };\n});\nvar ms = ne((zg, Uc)=>{\n    Uc.exports = {\n        name: \"@prisma/internals\",\n        version: \"6.13.0\",\n        description: \"This package is intended for Prisma's internal use\",\n        main: \"dist/index.js\",\n        types: \"dist/index.d.ts\",\n        repository: {\n            type: \"git\",\n            url: \"https://github.com/prisma/prisma.git\",\n            directory: \"packages/internals\"\n        },\n        homepage: \"https://www.prisma.io\",\n        author: \"Tim Suchanek <suchanek@prisma.io>\",\n        bugs: \"https://github.com/prisma/prisma/issues\",\n        license: \"Apache-2.0\",\n        scripts: {\n            dev: \"DEV=true tsx helpers/build.ts\",\n            build: \"tsx helpers/build.ts\",\n            test: \"dotenv -e ../../.db.env -- jest --silent\",\n            prepublishOnly: \"pnpm run build\"\n        },\n        files: [\n            \"README.md\",\n            \"dist\",\n            \"!**/libquery_engine*\",\n            \"!dist/get-generators/engines/*\",\n            \"scripts\"\n        ],\n        devDependencies: {\n            \"@babel/helper-validator-identifier\": \"7.25.9\",\n            \"@opentelemetry/api\": \"1.9.0\",\n            \"@swc/core\": \"1.11.5\",\n            \"@swc/jest\": \"0.2.37\",\n            \"@types/babel__helper-validator-identifier\": \"7.15.2\",\n            \"@types/jest\": \"29.5.14\",\n            \"@types/node\": \"18.19.76\",\n            \"@types/resolve\": \"1.20.6\",\n            archiver: \"6.0.2\",\n            \"checkpoint-client\": \"1.1.33\",\n            \"cli-truncate\": \"4.0.0\",\n            dotenv: \"16.5.0\",\n            esbuild: \"0.25.5\",\n            \"escape-string-regexp\": \"5.0.0\",\n            execa: \"5.1.1\",\n            \"fast-glob\": \"3.3.3\",\n            \"find-up\": \"7.0.0\",\n            \"fp-ts\": \"2.16.9\",\n            \"fs-extra\": \"11.3.0\",\n            \"fs-jetpack\": \"5.1.0\",\n            \"global-dirs\": \"4.0.0\",\n            globby: \"11.1.0\",\n            \"identifier-regex\": \"1.0.0\",\n            \"indent-string\": \"4.0.0\",\n            \"is-windows\": \"1.0.2\",\n            \"is-wsl\": \"3.1.0\",\n            jest: \"29.7.0\",\n            \"jest-junit\": \"16.0.0\",\n            kleur: \"4.1.5\",\n            \"mock-stdin\": \"1.0.0\",\n            \"new-github-issue-url\": \"0.2.1\",\n            \"node-fetch\": \"3.3.2\",\n            \"npm-packlist\": \"5.1.3\",\n            open: \"7.4.2\",\n            \"p-map\": \"4.0.0\",\n            \"read-package-up\": \"11.0.0\",\n            resolve: \"1.22.10\",\n            \"string-width\": \"7.2.0\",\n            \"strip-ansi\": \"6.0.1\",\n            \"strip-indent\": \"4.0.0\",\n            \"temp-dir\": \"2.0.0\",\n            tempy: \"1.0.1\",\n            \"terminal-link\": \"4.0.0\",\n            tmp: \"0.2.3\",\n            \"ts-node\": \"10.9.2\",\n            \"ts-pattern\": \"5.6.2\",\n            \"ts-toolbelt\": \"9.6.0\",\n            typescript: \"5.4.5\",\n            yarn: \"1.22.22\"\n        },\n        dependencies: {\n            \"@prisma/config\": \"workspace:*\",\n            \"@prisma/debug\": \"workspace:*\",\n            \"@prisma/dmmf\": \"workspace:*\",\n            \"@prisma/driver-adapter-utils\": \"workspace:*\",\n            \"@prisma/engines\": \"workspace:*\",\n            \"@prisma/fetch-engine\": \"workspace:*\",\n            \"@prisma/generator\": \"workspace:*\",\n            \"@prisma/generator-helper\": \"workspace:*\",\n            \"@prisma/get-platform\": \"workspace:*\",\n            \"@prisma/prisma-schema-wasm\": \"6.13.0-35.361e86d0ea4987e9f53a565309b3eed797a6bcbd\",\n            \"@prisma/schema-engine-wasm\": \"6.13.0-35.361e86d0ea4987e9f53a565309b3eed797a6bcbd\",\n            \"@prisma/schema-files-loader\": \"workspace:*\",\n            arg: \"5.0.2\",\n            prompts: \"2.4.2\"\n        },\n        peerDependencies: {\n            typescript: \">=5.1.0\"\n        },\n        peerDependenciesMeta: {\n            typescript: {\n                optional: !0\n            }\n        },\n        sideEffects: !1\n    };\n});\nvar Si = ne((bh, Kc)=>{\n    Kc.exports = {\n        name: \"@prisma/engines-version\",\n        version: \"6.13.0-35.361e86d0ea4987e9f53a565309b3eed797a6bcbd\",\n        main: \"index.js\",\n        types: \"index.d.ts\",\n        license: \"Apache-2.0\",\n        author: \"Tim Suchanek <suchanek@prisma.io>\",\n        prisma: {\n            enginesVersion: \"361e86d0ea4987e9f53a565309b3eed797a6bcbd\"\n        },\n        repository: {\n            type: \"git\",\n            url: \"https://github.com/prisma/engines-wrapper.git\",\n            directory: \"packages/engines-version\"\n        },\n        devDependencies: {\n            \"@types/node\": \"18.19.76\",\n            typescript: \"4.9.5\"\n        },\n        files: [\n            \"index.js\",\n            \"index.d.ts\"\n        ],\n        scripts: {\n            build: \"tsc -d\"\n        }\n    };\n});\nvar on = ne((nn)=>{\n    \"use strict\";\n    Object.defineProperty(nn, \"__esModule\", {\n        value: !0\n    });\n    nn.enginesVersion = void 0;\n    nn.enginesVersion = Si().prisma.enginesVersion;\n});\nvar bs = ne((Oh, ys)=>{\n    \"use strict\";\n    ys.exports = (e)=>{\n        let r = e.match(/^[ \\t]*(?=\\S)/gm);\n        return r ? r.reduce((t, n)=>Math.min(t, n.length), 1 / 0) : 0;\n    };\n});\nvar Di = ne((Lh, xs)=>{\n    \"use strict\";\n    xs.exports = (e, r = 1, t)=>{\n        if (t = {\n            indent: \" \",\n            includeEmptyLines: !1,\n            ...t\n        }, typeof e != \"string\") throw new TypeError(`Expected \\`input\\` to be a \\`string\\`, got \\`${typeof e}\\``);\n        if (typeof r != \"number\") throw new TypeError(`Expected \\`count\\` to be a \\`number\\`, got \\`${typeof r}\\``);\n        if (typeof t.indent != \"string\") throw new TypeError(`Expected \\`options.indent\\` to be a \\`string\\`, got \\`${typeof t.indent}\\``);\n        if (r === 0) return e;\n        let n = t.includeEmptyLines ? /^/gm : /^(?!\\s*$)/gm;\n        return e.replace(n, t.indent.repeat(r));\n    };\n});\nvar Ss = ne(($h, Ts)=>{\n    \"use strict\";\n    Ts.exports = ({ onlyFirst: e = !1 } = {})=>{\n        let r = [\n            \"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\",\n            \"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))\"\n        ].join(\"|\");\n        return new RegExp(r, e ? void 0 : \"g\");\n    };\n});\nvar Li = ne((qh, Rs)=>{\n    \"use strict\";\n    var op = Ss();\n    Rs.exports = (e)=>typeof e == \"string\" ? e.replace(op(), \"\") : e;\n});\nvar As = ne((Uh, sp)=>{\n    sp.exports = {\n        name: \"dotenv\",\n        version: \"16.5.0\",\n        description: \"Loads environment variables from .env file\",\n        main: \"lib/main.js\",\n        types: \"lib/main.d.ts\",\n        exports: {\n            \".\": {\n                types: \"./lib/main.d.ts\",\n                require: \"./lib/main.js\",\n                default: \"./lib/main.js\"\n            },\n            \"./config\": \"./config.js\",\n            \"./config.js\": \"./config.js\",\n            \"./lib/env-options\": \"./lib/env-options.js\",\n            \"./lib/env-options.js\": \"./lib/env-options.js\",\n            \"./lib/cli-options\": \"./lib/cli-options.js\",\n            \"./lib/cli-options.js\": \"./lib/cli-options.js\",\n            \"./package.json\": \"./package.json\"\n        },\n        scripts: {\n            \"dts-check\": \"tsc --project tests/types/tsconfig.json\",\n            lint: \"standard\",\n            pretest: \"npm run lint && npm run dts-check\",\n            test: \"tap run --allow-empty-coverage --disable-coverage --timeout=60000\",\n            \"test:coverage\": \"tap run --show-full-coverage --timeout=60000 --coverage-report=lcov\",\n            prerelease: \"npm test\",\n            release: \"standard-version\"\n        },\n        repository: {\n            type: \"git\",\n            url: \"git://github.com/motdotla/dotenv.git\"\n        },\n        homepage: \"https://github.com/motdotla/dotenv#readme\",\n        funding: \"https://dotenvx.com\",\n        keywords: [\n            \"dotenv\",\n            \"env\",\n            \".env\",\n            \"environment\",\n            \"variables\",\n            \"config\",\n            \"settings\"\n        ],\n        readmeFilename: \"README.md\",\n        license: \"BSD-2-Clause\",\n        devDependencies: {\n            \"@types/node\": \"^18.11.3\",\n            decache: \"^4.6.2\",\n            sinon: \"^14.0.1\",\n            standard: \"^17.0.0\",\n            \"standard-version\": \"^9.5.0\",\n            tap: \"^19.2.0\",\n            typescript: \"^4.8.4\"\n        },\n        engines: {\n            node: \">=12\"\n        },\n        browser: {\n            fs: !1\n        }\n    };\n});\nvar Os = ne((Gh, Le)=>{\n    \"use strict\";\n    var Mi = __webpack_require__(/*! node:fs */ \"node:fs\"), $i = __webpack_require__(/*! node:path */ \"node:path\"), ap = __webpack_require__(/*! node:os */ \"node:os\"), lp = __webpack_require__(/*! node:crypto */ \"node:crypto\"), up = As(), Is = up.version, cp = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg;\n    function pp(e) {\n        let r = {}, t = e.toString();\n        t = t.replace(/\\r\\n?/mg, `\n`);\n        let n;\n        for(; (n = cp.exec(t)) != null;){\n            let i = n[1], o = n[2] || \"\";\n            o = o.trim();\n            let s = o[0];\n            o = o.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, \"$2\"), s === '\"' && (o = o.replace(/\\\\n/g, `\n`), o = o.replace(/\\\\r/g, \"\\r\")), r[i] = o;\n        }\n        return r;\n    }\n    function dp(e) {\n        let r = Ds(e), t = B.configDotenv({\n            path: r\n        });\n        if (!t.parsed) {\n            let s = new Error(`MISSING_DATA: Cannot parse ${r} for an unknown reason`);\n            throw s.code = \"MISSING_DATA\", s;\n        }\n        let n = ks(e).split(\",\"), i = n.length, o;\n        for(let s = 0; s < i; s++)try {\n            let a = n[s].trim(), l = fp(t, a);\n            o = B.decrypt(l.ciphertext, l.key);\n            break;\n        } catch (a) {\n            if (s + 1 >= i) throw a;\n        }\n        return B.parse(o);\n    }\n    function mp(e) {\n        console.log(`[dotenv@${Is}][WARN] ${e}`);\n    }\n    function ot(e) {\n        console.log(`[dotenv@${Is}][DEBUG] ${e}`);\n    }\n    function ks(e) {\n        return e && e.DOTENV_KEY && e.DOTENV_KEY.length > 0 ? e.DOTENV_KEY : process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0 ? process.env.DOTENV_KEY : \"\";\n    }\n    function fp(e, r) {\n        let t;\n        try {\n            t = new URL(r);\n        } catch (a) {\n            if (a.code === \"ERR_INVALID_URL\") {\n                let l = new Error(\"INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development\");\n                throw l.code = \"INVALID_DOTENV_KEY\", l;\n            }\n            throw a;\n        }\n        let n = t.password;\n        if (!n) {\n            let a = new Error(\"INVALID_DOTENV_KEY: Missing key part\");\n            throw a.code = \"INVALID_DOTENV_KEY\", a;\n        }\n        let i = t.searchParams.get(\"environment\");\n        if (!i) {\n            let a = new Error(\"INVALID_DOTENV_KEY: Missing environment part\");\n            throw a.code = \"INVALID_DOTENV_KEY\", a;\n        }\n        let o = `DOTENV_VAULT_${i.toUpperCase()}`, s = e.parsed[o];\n        if (!s) {\n            let a = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${o} in your .env.vault file.`);\n            throw a.code = \"NOT_FOUND_DOTENV_ENVIRONMENT\", a;\n        }\n        return {\n            ciphertext: s,\n            key: n\n        };\n    }\n    function Ds(e) {\n        let r = null;\n        if (e && e.path && e.path.length > 0) if (Array.isArray(e.path)) for (let t of e.path)Mi.existsSync(t) && (r = t.endsWith(\".vault\") ? t : `${t}.vault`);\n        else r = e.path.endsWith(\".vault\") ? e.path : `${e.path}.vault`;\n        else r = $i.resolve(process.cwd(), \".env.vault\");\n        return Mi.existsSync(r) ? r : null;\n    }\n    function Cs(e) {\n        return e[0] === \"~\" ? $i.join(ap.homedir(), e.slice(1)) : e;\n    }\n    function gp(e) {\n        !!(e && e.debug) && ot(\"Loading env from encrypted .env.vault\");\n        let t = B._parseVault(e), n = process.env;\n        return e && e.processEnv != null && (n = e.processEnv), B.populate(n, t, e), {\n            parsed: t\n        };\n    }\n    function hp(e) {\n        let r = $i.resolve(process.cwd(), \".env\"), t = \"utf8\", n = !!(e && e.debug);\n        e && e.encoding ? t = e.encoding : n && ot(\"No encoding is specified. UTF-8 is used by default\");\n        let i = [\n            r\n        ];\n        if (e && e.path) if (!Array.isArray(e.path)) i = [\n            Cs(e.path)\n        ];\n        else {\n            i = [];\n            for (let l of e.path)i.push(Cs(l));\n        }\n        let o, s = {};\n        for (let l of i)try {\n            let u = B.parse(Mi.readFileSync(l, {\n                encoding: t\n            }));\n            B.populate(s, u, e);\n        } catch (u) {\n            n && ot(`Failed to load ${l} ${u.message}`), o = u;\n        }\n        let a = process.env;\n        return e && e.processEnv != null && (a = e.processEnv), B.populate(a, s, e), o ? {\n            parsed: s,\n            error: o\n        } : {\n            parsed: s\n        };\n    }\n    function yp(e) {\n        if (ks(e).length === 0) return B.configDotenv(e);\n        let r = Ds(e);\n        return r ? B._configVault(e) : (mp(`You set DOTENV_KEY but you are missing a .env.vault file at ${r}. Did you forget to build it?`), B.configDotenv(e));\n    }\n    function bp(e, r) {\n        let t = Buffer.from(r.slice(-64), \"hex\"), n = Buffer.from(e, \"base64\"), i = n.subarray(0, 12), o = n.subarray(-16);\n        n = n.subarray(12, -16);\n        try {\n            let s = lp.createDecipheriv(\"aes-256-gcm\", t, i);\n            return s.setAuthTag(o), `${s.update(n)}${s.final()}`;\n        } catch (s) {\n            let a = s instanceof RangeError, l = s.message === \"Invalid key length\", u = s.message === \"Unsupported state or unable to authenticate data\";\n            if (a || l) {\n                let c = new Error(\"INVALID_DOTENV_KEY: It must be 64 characters long (or more)\");\n                throw c.code = \"INVALID_DOTENV_KEY\", c;\n            } else if (u) {\n                let c = new Error(\"DECRYPTION_FAILED: Please check your DOTENV_KEY\");\n                throw c.code = \"DECRYPTION_FAILED\", c;\n            } else throw s;\n        }\n    }\n    function Ep(e, r, t = {}) {\n        let n = !!(t && t.debug), i = !!(t && t.override);\n        if (typeof r != \"object\") {\n            let o = new Error(\"OBJECT_REQUIRED: Please check the processEnv argument being passed to populate\");\n            throw o.code = \"OBJECT_REQUIRED\", o;\n        }\n        for (let o of Object.keys(r))Object.prototype.hasOwnProperty.call(e, o) ? (i === !0 && (e[o] = r[o]), n && ot(i === !0 ? `\"${o}\" is already defined and WAS overwritten` : `\"${o}\" is already defined and was NOT overwritten`)) : e[o] = r[o];\n    }\n    var B = {\n        configDotenv: hp,\n        _configVault: gp,\n        _parseVault: dp,\n        config: yp,\n        decrypt: bp,\n        parse: pp,\n        populate: Ep\n    };\n    Le.exports.configDotenv = B.configDotenv;\n    Le.exports._configVault = B._configVault;\n    Le.exports._parseVault = B._parseVault;\n    Le.exports.config = B.config;\n    Le.exports.decrypt = B.decrypt;\n    Le.exports.parse = B.parse;\n    Le.exports.populate = B.populate;\n    Le.exports = B;\n});\nvar Fs = ne((Yh, cn)=>{\n    \"use strict\";\n    cn.exports = (e = {})=>{\n        let r;\n        if (e.repoUrl) r = e.repoUrl;\n        else if (e.user && e.repo) r = `https://github.com/${e.user}/${e.repo}`;\n        else throw new Error(\"You need to specify either the `repoUrl` option or both the `user` and `repo` options\");\n        let t = new URL(`${r}/issues/new`), n = [\n            \"body\",\n            \"title\",\n            \"labels\",\n            \"template\",\n            \"milestone\",\n            \"assignee\",\n            \"projects\"\n        ];\n        for (let i of n){\n            let o = e[i];\n            if (o !== void 0) {\n                if (i === \"labels\" || i === \"projects\") {\n                    if (!Array.isArray(o)) throw new TypeError(`The \\`${i}\\` option should be an array`);\n                    o = o.join(\",\");\n                }\n                t.searchParams.set(i, o);\n            }\n        }\n        return t.toString();\n    };\n    cn.exports.default = cn.exports;\n});\nvar Ki = ne((Ab, oa)=>{\n    \"use strict\";\n    oa.exports = function() {\n        function e(r, t, n, i, o) {\n            return r < t || n < t ? r > n ? n + 1 : r + 1 : i === o ? t : t + 1;\n        }\n        return function(r, t) {\n            if (r === t) return 0;\n            if (r.length > t.length) {\n                var n = r;\n                r = t, t = n;\n            }\n            for(var i = r.length, o = t.length; i > 0 && r.charCodeAt(i - 1) === t.charCodeAt(o - 1);)i--, o--;\n            for(var s = 0; s < i && r.charCodeAt(s) === t.charCodeAt(s);)s++;\n            if (i -= s, o -= s, i === 0 || o < 3) return o;\n            var a = 0, l, u, c, p, d, f, h, g, S, P, R, b, D = [];\n            for(l = 0; l < i; l++)D.push(l + 1), D.push(r.charCodeAt(s + l));\n            for(var me = D.length - 1; a < o - 3;)for(S = t.charCodeAt(s + (u = a)), P = t.charCodeAt(s + (c = a + 1)), R = t.charCodeAt(s + (p = a + 2)), b = t.charCodeAt(s + (d = a + 3)), f = a += 4, l = 0; l < me; l += 2)h = D[l], g = D[l + 1], u = e(h, u, c, S, g), c = e(u, c, p, P, g), p = e(c, p, d, R, g), f = e(p, d, f, b, g), D[l] = f, d = p, p = c, c = u, u = h;\n            for(; a < o;)for(S = t.charCodeAt(s + (u = a)), f = ++a, l = 0; l < me; l += 2)h = D[l], D[l] = f = e(h, u, f, S, D[l + 1]), u = h;\n            return f;\n        };\n    }();\n});\nvar ca = Oo(()=>{\n    \"use strict\";\n});\nvar pa = Oo(()=>{\n    \"use strict\";\n});\nvar Gf = {};\ntr(Gf, {\n    DMMF: ()=>ct,\n    Debug: ()=>N,\n    Decimal: ()=>ve,\n    Extensions: ()=>ii,\n    MetricsClient: ()=>Fr,\n    PrismaClientInitializationError: ()=>T,\n    PrismaClientKnownRequestError: ()=>z,\n    PrismaClientRustPanicError: ()=>le,\n    PrismaClientUnknownRequestError: ()=>j,\n    PrismaClientValidationError: ()=>Z,\n    Public: ()=>oi,\n    Sql: ()=>oe,\n    createParam: ()=>Aa,\n    defineDmmfProperty: ()=>_a,\n    deserializeJsonResponse: ()=>Tr,\n    deserializeRawResult: ()=>ei,\n    dmmfToRuntimeDataModel: ()=>Xs,\n    empty: ()=>Fa,\n    getPrismaClient: ()=>bu,\n    getRuntime: ()=>Gn,\n    join: ()=>La,\n    makeStrictEnum: ()=>Eu,\n    makeTypedQueryFactory: ()=>Na,\n    objectEnumValues: ()=>kn,\n    raw: ()=>io,\n    serializeJsonQuery: ()=>Mn,\n    skip: ()=>Fn,\n    sqltag: ()=>oo,\n    warnEnvConflicts: ()=>wu,\n    warnOnce: ()=>at\n});\nmodule.exports = Ru(Gf);\nvar ii = {};\ntr(ii, {\n    defineExtension: ()=>No,\n    getExtensionContext: ()=>Lo\n});\nfunction No(e) {\n    return typeof e == \"function\" ? e : (r)=>r.$extends(e);\n}\nfunction Lo(e) {\n    return e;\n}\nvar oi = {};\ntr(oi, {\n    validator: ()=>Fo\n});\nfunction Fo(...e) {\n    return (r)=>r;\n}\nvar Bt = {};\ntr(Bt, {\n    $: ()=>Vo,\n    bgBlack: ()=>Fu,\n    bgBlue: ()=>ju,\n    bgCyan: ()=>Bu,\n    bgGreen: ()=>$u,\n    bgMagenta: ()=>Vu,\n    bgRed: ()=>Mu,\n    bgWhite: ()=>Uu,\n    bgYellow: ()=>qu,\n    black: ()=>Ou,\n    blue: ()=>nr,\n    bold: ()=>W,\n    cyan: ()=>De,\n    dim: ()=>Ie,\n    gray: ()=>Kr,\n    green: ()=>qe,\n    grey: ()=>Lu,\n    hidden: ()=>ku,\n    inverse: ()=>Iu,\n    italic: ()=>Cu,\n    magenta: ()=>_u,\n    red: ()=>ce,\n    reset: ()=>Au,\n    strikethrough: ()=>Du,\n    underline: ()=>Y,\n    white: ()=>Nu,\n    yellow: ()=>ke\n});\nvar si, Mo, $o, qo, jo = !0;\ntypeof process < \"u\" && ({ FORCE_COLOR: si, NODE_DISABLE_COLORS: Mo, NO_COLOR: $o, TERM: qo } = process.env || {}, jo = process.stdout && process.stdout.isTTY);\nvar Vo = {\n    enabled: !Mo && $o == null && qo !== \"dumb\" && (si != null && si !== \"0\" || jo)\n};\nfunction F(e, r) {\n    let t = new RegExp(`\\\\x1b\\\\[${r}m`, \"g\"), n = `\\x1B[${e}m`, i = `\\x1B[${r}m`;\n    return function(o) {\n        return !Vo.enabled || o == null ? o : n + (~(\"\" + o).indexOf(i) ? o.replace(t, i + n) : o) + i;\n    };\n}\nvar Au = F(0, 0), W = F(1, 22), Ie = F(2, 22), Cu = F(3, 23), Y = F(4, 24), Iu = F(7, 27), ku = F(8, 28), Du = F(9, 29), Ou = F(30, 39), ce = F(31, 39), qe = F(32, 39), ke = F(33, 39), nr = F(34, 39), _u = F(35, 39), De = F(36, 39), Nu = F(37, 39), Kr = F(90, 39), Lu = F(90, 39), Fu = F(40, 49), Mu = F(41, 49), $u = F(42, 49), qu = F(43, 49), ju = F(44, 49), Vu = F(45, 49), Bu = F(46, 49), Uu = F(47, 49);\nvar Gu = 100, Bo = [\n    \"green\",\n    \"yellow\",\n    \"blue\",\n    \"magenta\",\n    \"cyan\",\n    \"red\"\n], Yr = [], Uo = Date.now(), Qu = 0, ai = typeof process < \"u\" ? process.env : {};\nglobalThis.DEBUG ??= ai.DEBUG ?? \"\";\nglobalThis.DEBUG_COLORS ??= ai.DEBUG_COLORS ? ai.DEBUG_COLORS === \"true\" : !0;\nvar zr = {\n    enable (e) {\n        typeof e == \"string\" && (globalThis.DEBUG = e);\n    },\n    disable () {\n        let e = globalThis.DEBUG;\n        return globalThis.DEBUG = \"\", e;\n    },\n    enabled (e) {\n        let r = globalThis.DEBUG.split(\",\").map((i)=>i.replace(/[.+?^${}()|[\\]\\\\]/g, \"\\\\$&\")), t = r.some((i)=>i === \"\" || i[0] === \"-\" ? !1 : e.match(RegExp(i.split(\"*\").join(\".*\") + \"$\"))), n = r.some((i)=>i === \"\" || i[0] !== \"-\" ? !1 : e.match(RegExp(i.slice(1).split(\"*\").join(\".*\") + \"$\")));\n        return t && !n;\n    },\n    log: (...e)=>{\n        let [r, t, ...n] = e;\n        (console.warn ?? console.log)(`${r} ${t}`, ...n);\n    },\n    formatters: {}\n};\nfunction Wu(e) {\n    let r = {\n        color: Bo[Qu++ % Bo.length],\n        enabled: zr.enabled(e),\n        namespace: e,\n        log: zr.log,\n        extend: ()=>{}\n    }, t = (...n)=>{\n        let { enabled: i, namespace: o, color: s, log: a } = r;\n        if (n.length !== 0 && Yr.push([\n            o,\n            ...n\n        ]), Yr.length > Gu && Yr.shift(), zr.enabled(o) || i) {\n            let l = n.map((c)=>typeof c == \"string\" ? c : Ju(c)), u = `+${Date.now() - Uo}ms`;\n            Uo = Date.now(), globalThis.DEBUG_COLORS ? a(Bt[s](W(o)), ...l, Bt[s](u)) : a(o, ...l, u);\n        }\n    };\n    return new Proxy(t, {\n        get: (n, i)=>r[i],\n        set: (n, i, o)=>r[i] = o\n    });\n}\nvar N = new Proxy(Wu, {\n    get: (e, r)=>zr[r],\n    set: (e, r, t)=>zr[r] = t\n});\nfunction Ju(e, r = 2) {\n    let t = new Set;\n    return JSON.stringify(e, (n, i)=>{\n        if (typeof i == \"object\" && i !== null) {\n            if (t.has(i)) return \"[Circular *]\";\n            t.add(i);\n        } else if (typeof i == \"bigint\") return i.toString();\n        return i;\n    }, r);\n}\nfunction Go(e = 7500) {\n    let r = Yr.map(([t, ...n])=>`${t} ${n.map((i)=>typeof i == \"string\" ? i : JSON.stringify(i)).join(\" \")}`).join(`\n`);\n    return r.length < e ? r : r.slice(-e);\n}\nfunction Qo() {\n    Yr.length = 0;\n}\nvar gr = N;\nvar Wo = C(__webpack_require__(/*! node:fs */ \"node:fs\"));\nfunction li() {\n    let e = process.env.PRISMA_QUERY_ENGINE_LIBRARY;\n    if (!(e && Wo.default.existsSync(e)) && process.arch === \"ia32\") throw new Error('The default query engine type (Node-API, \"library\") is currently not supported for 32bit Node. Please set `engineType = \"binary\"` in the \"generator\" block of your \"schema.prisma\" file (or use the environment variables \"PRISMA_CLIENT_ENGINE_TYPE=binary\" and/or \"PRISMA_CLI_QUERY_ENGINE_TYPE=binary\".)');\n}\nvar ui = [\n    \"darwin\",\n    \"darwin-arm64\",\n    \"debian-openssl-1.0.x\",\n    \"debian-openssl-1.1.x\",\n    \"debian-openssl-3.0.x\",\n    \"rhel-openssl-1.0.x\",\n    \"rhel-openssl-1.1.x\",\n    \"rhel-openssl-3.0.x\",\n    \"linux-arm64-openssl-1.1.x\",\n    \"linux-arm64-openssl-1.0.x\",\n    \"linux-arm64-openssl-3.0.x\",\n    \"linux-arm-openssl-1.1.x\",\n    \"linux-arm-openssl-1.0.x\",\n    \"linux-arm-openssl-3.0.x\",\n    \"linux-musl\",\n    \"linux-musl-openssl-3.0.x\",\n    \"linux-musl-arm64-openssl-1.1.x\",\n    \"linux-musl-arm64-openssl-3.0.x\",\n    \"linux-nixos\",\n    \"linux-static-x64\",\n    \"linux-static-arm64\",\n    \"windows\",\n    \"freebsd11\",\n    \"freebsd12\",\n    \"freebsd13\",\n    \"freebsd14\",\n    \"freebsd15\",\n    \"openbsd\",\n    \"netbsd\",\n    \"arm\"\n];\nvar Ut = \"libquery_engine\";\nfunction Gt(e, r) {\n    let t = r === \"url\";\n    return e.includes(\"windows\") ? t ? \"query_engine.dll.node\" : `query_engine-${e}.dll.node` : e.includes(\"darwin\") ? t ? `${Ut}.dylib.node` : `${Ut}-${e}.dylib.node` : t ? `${Ut}.so.node` : `${Ut}-${e}.so.node`;\n}\nvar Yo = C(__webpack_require__(/*! node:child_process */ \"node:child_process\")), fi = C(__webpack_require__(/*! node:fs/promises */ \"node:fs/promises\")), Kt = C(__webpack_require__(/*! node:os */ \"node:os\"));\nvar Oe = Symbol.for(\"@ts-pattern/matcher\"), Hu = Symbol.for(\"@ts-pattern/isVariadic\"), Wt = \"@ts-pattern/anonymous-select-key\", ci = (e)=>!!(e && typeof e == \"object\"), Qt = (e)=>e && !!e[Oe], Ee = (e, r, t)=>{\n    if (Qt(e)) {\n        let n = e[Oe](), { matched: i, selections: o } = n.match(r);\n        return i && o && Object.keys(o).forEach((s)=>t(s, o[s])), i;\n    }\n    if (ci(e)) {\n        if (!ci(r)) return !1;\n        if (Array.isArray(e)) {\n            if (!Array.isArray(r)) return !1;\n            let n = [], i = [], o = [];\n            for (let s of e.keys()){\n                let a = e[s];\n                Qt(a) && a[Hu] ? o.push(a) : o.length ? i.push(a) : n.push(a);\n            }\n            if (o.length) {\n                if (o.length > 1) throw new Error(\"Pattern error: Using `...P.array(...)` several times in a single pattern is not allowed.\");\n                if (r.length < n.length + i.length) return !1;\n                let s = r.slice(0, n.length), a = i.length === 0 ? [] : r.slice(-i.length), l = r.slice(n.length, i.length === 0 ? 1 / 0 : -i.length);\n                return n.every((u, c)=>Ee(u, s[c], t)) && i.every((u, c)=>Ee(u, a[c], t)) && (o.length === 0 || Ee(o[0], l, t));\n            }\n            return e.length === r.length && e.every((s, a)=>Ee(s, r[a], t));\n        }\n        return Reflect.ownKeys(e).every((n)=>{\n            let i = e[n];\n            return (n in r || Qt(o = i) && o[Oe]().matcherType === \"optional\") && Ee(i, r[n], t);\n            var o;\n        });\n    }\n    return Object.is(r, e);\n}, Ge = (e)=>{\n    var r, t, n;\n    return ci(e) ? Qt(e) ? (r = (t = (n = e[Oe]()).getSelectionKeys) == null ? void 0 : t.call(n)) != null ? r : [] : Array.isArray(e) ? Zr(e, Ge) : Zr(Object.values(e), Ge) : [];\n}, Zr = (e, r)=>e.reduce((t, n)=>t.concat(r(n)), []);\nfunction pe(e) {\n    return Object.assign(e, {\n        optional: ()=>Ku(e),\n        and: (r)=>q(e, r),\n        or: (r)=>Yu(e, r),\n        select: (r)=>r === void 0 ? Jo(e) : Jo(r, e)\n    });\n}\nfunction Ku(e) {\n    return pe({\n        [Oe]: ()=>({\n                match: (r)=>{\n                    let t = {}, n = (i, o)=>{\n                        t[i] = o;\n                    };\n                    return r === void 0 ? (Ge(e).forEach((i)=>n(i, void 0)), {\n                        matched: !0,\n                        selections: t\n                    }) : {\n                        matched: Ee(e, r, n),\n                        selections: t\n                    };\n                },\n                getSelectionKeys: ()=>Ge(e),\n                matcherType: \"optional\"\n            })\n    });\n}\nfunction q(...e) {\n    return pe({\n        [Oe]: ()=>({\n                match: (r)=>{\n                    let t = {}, n = (i, o)=>{\n                        t[i] = o;\n                    };\n                    return {\n                        matched: e.every((i)=>Ee(i, r, n)),\n                        selections: t\n                    };\n                },\n                getSelectionKeys: ()=>Zr(e, Ge),\n                matcherType: \"and\"\n            })\n    });\n}\nfunction Yu(...e) {\n    return pe({\n        [Oe]: ()=>({\n                match: (r)=>{\n                    let t = {}, n = (i, o)=>{\n                        t[i] = o;\n                    };\n                    return Zr(e, Ge).forEach((i)=>n(i, void 0)), {\n                        matched: e.some((i)=>Ee(i, r, n)),\n                        selections: t\n                    };\n                },\n                getSelectionKeys: ()=>Zr(e, Ge),\n                matcherType: \"or\"\n            })\n    });\n}\nfunction I(e) {\n    return {\n        [Oe]: ()=>({\n                match: (r)=>({\n                        matched: !!e(r)\n                    })\n            })\n    };\n}\nfunction Jo(...e) {\n    let r = typeof e[0] == \"string\" ? e[0] : void 0, t = e.length === 2 ? e[1] : typeof e[0] == \"string\" ? void 0 : e[0];\n    return pe({\n        [Oe]: ()=>({\n                match: (n)=>{\n                    let i = {\n                        [r ?? Wt]: n\n                    };\n                    return {\n                        matched: t === void 0 || Ee(t, n, (o, s)=>{\n                            i[o] = s;\n                        }),\n                        selections: i\n                    };\n                },\n                getSelectionKeys: ()=>[\n                        r ?? Wt\n                    ].concat(t === void 0 ? [] : Ge(t))\n            })\n    });\n}\nfunction ye(e) {\n    return typeof e == \"number\";\n}\nfunction je(e) {\n    return typeof e == \"string\";\n}\nfunction Ve(e) {\n    return typeof e == \"bigint\";\n}\nvar ng = pe(I(function(e) {\n    return !0;\n}));\nvar Be = (e)=>Object.assign(pe(e), {\n        startsWith: (r)=>{\n            return Be(q(e, (t = r, I((n)=>je(n) && n.startsWith(t)))));\n            var t;\n        },\n        endsWith: (r)=>{\n            return Be(q(e, (t = r, I((n)=>je(n) && n.endsWith(t)))));\n            var t;\n        },\n        minLength: (r)=>Be(q(e, ((t)=>I((n)=>je(n) && n.length >= t))(r))),\n        length: (r)=>Be(q(e, ((t)=>I((n)=>je(n) && n.length === t))(r))),\n        maxLength: (r)=>Be(q(e, ((t)=>I((n)=>je(n) && n.length <= t))(r))),\n        includes: (r)=>{\n            return Be(q(e, (t = r, I((n)=>je(n) && n.includes(t)))));\n            var t;\n        },\n        regex: (r)=>{\n            return Be(q(e, (t = r, I((n)=>je(n) && !!n.match(t)))));\n            var t;\n        }\n    }), ig = Be(I(je)), be = (e)=>Object.assign(pe(e), {\n        between: (r, t)=>be(q(e, ((n, i)=>I((o)=>ye(o) && n <= o && i >= o))(r, t))),\n        lt: (r)=>be(q(e, ((t)=>I((n)=>ye(n) && n < t))(r))),\n        gt: (r)=>be(q(e, ((t)=>I((n)=>ye(n) && n > t))(r))),\n        lte: (r)=>be(q(e, ((t)=>I((n)=>ye(n) && n <= t))(r))),\n        gte: (r)=>be(q(e, ((t)=>I((n)=>ye(n) && n >= t))(r))),\n        int: ()=>be(q(e, I((r)=>ye(r) && Number.isInteger(r)))),\n        finite: ()=>be(q(e, I((r)=>ye(r) && Number.isFinite(r)))),\n        positive: ()=>be(q(e, I((r)=>ye(r) && r > 0))),\n        negative: ()=>be(q(e, I((r)=>ye(r) && r < 0)))\n    }), og = be(I(ye)), Ue = (e)=>Object.assign(pe(e), {\n        between: (r, t)=>Ue(q(e, ((n, i)=>I((o)=>Ve(o) && n <= o && i >= o))(r, t))),\n        lt: (r)=>Ue(q(e, ((t)=>I((n)=>Ve(n) && n < t))(r))),\n        gt: (r)=>Ue(q(e, ((t)=>I((n)=>Ve(n) && n > t))(r))),\n        lte: (r)=>Ue(q(e, ((t)=>I((n)=>Ve(n) && n <= t))(r))),\n        gte: (r)=>Ue(q(e, ((t)=>I((n)=>Ve(n) && n >= t))(r))),\n        positive: ()=>Ue(q(e, I((r)=>Ve(r) && r > 0))),\n        negative: ()=>Ue(q(e, I((r)=>Ve(r) && r < 0)))\n    }), sg = Ue(I(Ve)), ag = pe(I(function(e) {\n    return typeof e == \"boolean\";\n})), lg = pe(I(function(e) {\n    return typeof e == \"symbol\";\n})), ug = pe(I(function(e) {\n    return e == null;\n})), cg = pe(I(function(e) {\n    return e != null;\n}));\nvar pi = class extends Error {\n    constructor(r){\n        let t;\n        try {\n            t = JSON.stringify(r);\n        } catch  {\n            t = r;\n        }\n        super(`Pattern matching error: no pattern matches value ${t}`), this.input = void 0, this.input = r;\n    }\n}, di = {\n    matched: !1,\n    value: void 0\n};\nfunction hr(e) {\n    return new mi(e, di);\n}\nvar mi = class e {\n    constructor(r, t){\n        this.input = void 0, this.state = void 0, this.input = r, this.state = t;\n    }\n    with(...r) {\n        if (this.state.matched) return this;\n        let t = r[r.length - 1], n = [\n            r[0]\n        ], i;\n        r.length === 3 && typeof r[1] == \"function\" ? i = r[1] : r.length > 2 && n.push(...r.slice(1, r.length - 1));\n        let o = !1, s = {}, a = (u, c)=>{\n            o = !0, s[u] = c;\n        }, l = !n.some((u)=>Ee(u, this.input, a)) || i && !i(this.input) ? di : {\n            matched: !0,\n            value: t(o ? Wt in s ? s[Wt] : s : this.input, this.input)\n        };\n        return new e(this.input, l);\n    }\n    when(r, t) {\n        if (this.state.matched) return this;\n        let n = !!r(this.input);\n        return new e(this.input, n ? {\n            matched: !0,\n            value: t(this.input, this.input)\n        } : di);\n    }\n    otherwise(r) {\n        return this.state.matched ? this.state.value : r(this.input);\n    }\n    exhaustive() {\n        if (this.state.matched) return this.state.value;\n        throw new pi(this.input);\n    }\n    run() {\n        return this.exhaustive();\n    }\n    returnType() {\n        return this;\n    }\n};\nvar zo = __webpack_require__(/*! node:util */ \"node:util\");\nvar zu = {\n    warn: ke(\"prisma:warn\")\n}, Zu = {\n    warn: ()=>!process.env.PRISMA_DISABLE_WARNINGS\n};\nfunction Jt(e, ...r) {\n    Zu.warn() && console.warn(`${zu.warn} ${e}`, ...r);\n}\nvar Xu = (0, zo.promisify)(Yo.default.exec), ee = gr(\"prisma:get-platform\"), ec = [\n    \"1.0.x\",\n    \"1.1.x\",\n    \"3.0.x\"\n];\nasync function Zo() {\n    let e = Kt.default.platform(), r = process.arch;\n    if (e === \"freebsd\") {\n        let s = await Yt(\"freebsd-version\");\n        if (s && s.trim().length > 0) {\n            let l = /^(\\d+)\\.?/.exec(s);\n            if (l) return {\n                platform: \"freebsd\",\n                targetDistro: `freebsd${l[1]}`,\n                arch: r\n            };\n        }\n    }\n    if (e !== \"linux\") return {\n        platform: e,\n        arch: r\n    };\n    let t = await tc(), n = await cc(), i = ic({\n        arch: r,\n        archFromUname: n,\n        familyDistro: t.familyDistro\n    }), { libssl: o } = await oc(i);\n    return {\n        platform: \"linux\",\n        libssl: o,\n        arch: r,\n        archFromUname: n,\n        ...t\n    };\n}\nfunction rc(e) {\n    let r = /^ID=\"?([^\"\\n]*)\"?$/im, t = /^ID_LIKE=\"?([^\"\\n]*)\"?$/im, n = r.exec(e), i = n && n[1] && n[1].toLowerCase() || \"\", o = t.exec(e), s = o && o[1] && o[1].toLowerCase() || \"\", a = hr({\n        id: i,\n        idLike: s\n    }).with({\n        id: \"alpine\"\n    }, ({ id: l })=>({\n            targetDistro: \"musl\",\n            familyDistro: l,\n            originalDistro: l\n        })).with({\n        id: \"raspbian\"\n    }, ({ id: l })=>({\n            targetDistro: \"arm\",\n            familyDistro: \"debian\",\n            originalDistro: l\n        })).with({\n        id: \"nixos\"\n    }, ({ id: l })=>({\n            targetDistro: \"nixos\",\n            originalDistro: l,\n            familyDistro: \"nixos\"\n        })).with({\n        id: \"debian\"\n    }, {\n        id: \"ubuntu\"\n    }, ({ id: l })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"debian\",\n            originalDistro: l\n        })).with({\n        id: \"rhel\"\n    }, {\n        id: \"centos\"\n    }, {\n        id: \"fedora\"\n    }, ({ id: l })=>({\n            targetDistro: \"rhel\",\n            familyDistro: \"rhel\",\n            originalDistro: l\n        })).when(({ idLike: l })=>l.includes(\"debian\") || l.includes(\"ubuntu\"), ({ id: l })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"debian\",\n            originalDistro: l\n        })).when(({ idLike: l })=>i === \"arch\" || l.includes(\"arch\"), ({ id: l })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"arch\",\n            originalDistro: l\n        })).when(({ idLike: l })=>l.includes(\"centos\") || l.includes(\"fedora\") || l.includes(\"rhel\") || l.includes(\"suse\"), ({ id: l })=>({\n            targetDistro: \"rhel\",\n            familyDistro: \"rhel\",\n            originalDistro: l\n        })).otherwise(({ id: l })=>({\n            targetDistro: void 0,\n            familyDistro: void 0,\n            originalDistro: l\n        }));\n    return ee(`Found distro info:\n${JSON.stringify(a, null, 2)}`), a;\n}\nasync function tc() {\n    let e = \"/etc/os-release\";\n    try {\n        let r = await fi.default.readFile(e, {\n            encoding: \"utf-8\"\n        });\n        return rc(r);\n    } catch  {\n        return {\n            targetDistro: void 0,\n            familyDistro: void 0,\n            originalDistro: void 0\n        };\n    }\n}\nfunction nc(e) {\n    let r = /^OpenSSL\\s(\\d+\\.\\d+)\\.\\d+/.exec(e);\n    if (r) {\n        let t = `${r[1]}.x`;\n        return Xo(t);\n    }\n}\nfunction Ho(e) {\n    let r = /libssl\\.so\\.(\\d)(\\.\\d)?/.exec(e);\n    if (r) {\n        let t = `${r[1]}${r[2] ?? \".0\"}.x`;\n        return Xo(t);\n    }\n}\nfunction Xo(e) {\n    let r = (()=>{\n        if (rs(e)) return e;\n        let t = e.split(\".\");\n        return t[1] = \"0\", t.join(\".\");\n    })();\n    if (ec.includes(r)) return r;\n}\nfunction ic(e) {\n    return hr(e).with({\n        familyDistro: \"musl\"\n    }, ()=>(ee('Trying platform-specific paths for \"alpine\"'), [\n            \"/lib\",\n            \"/usr/lib\"\n        ])).with({\n        familyDistro: \"debian\"\n    }, ({ archFromUname: r })=>(ee('Trying platform-specific paths for \"debian\" (and \"ubuntu\")'), [\n            `/usr/lib/${r}-linux-gnu`,\n            `/lib/${r}-linux-gnu`\n        ])).with({\n        familyDistro: \"rhel\"\n    }, ()=>(ee('Trying platform-specific paths for \"rhel\"'), [\n            \"/lib64\",\n            \"/usr/lib64\"\n        ])).otherwise(({ familyDistro: r, arch: t, archFromUname: n })=>(ee(`Don't know any platform-specific paths for \"${r}\" on ${t} (${n})`), []));\n}\nasync function oc(e) {\n    let r = 'grep -v \"libssl.so.0\"', t = await Ko(e);\n    if (t) {\n        ee(`Found libssl.so file using platform-specific paths: ${t}`);\n        let o = Ho(t);\n        if (ee(`The parsed libssl version is: ${o}`), o) return {\n            libssl: o,\n            strategy: \"libssl-specific-path\"\n        };\n    }\n    ee('Falling back to \"ldconfig\" and other generic paths');\n    let n = await Yt(`ldconfig -p | sed \"s/.*=>s*//\" | sed \"s|.*/||\" | grep libssl | sort | ${r}`);\n    if (n || (n = await Ko([\n        \"/lib64\",\n        \"/usr/lib64\",\n        \"/lib\",\n        \"/usr/lib\"\n    ])), n) {\n        ee(`Found libssl.so file using \"ldconfig\" or other generic paths: ${n}`);\n        let o = Ho(n);\n        if (ee(`The parsed libssl version is: ${o}`), o) return {\n            libssl: o,\n            strategy: \"ldconfig\"\n        };\n    }\n    let i = await Yt(\"openssl version -v\");\n    if (i) {\n        ee(`Found openssl binary with version: ${i}`);\n        let o = nc(i);\n        if (ee(`The parsed openssl version is: ${o}`), o) return {\n            libssl: o,\n            strategy: \"openssl-binary\"\n        };\n    }\n    return ee(\"Couldn't find any version of libssl or OpenSSL in the system\"), {};\n}\nasync function Ko(e) {\n    for (let r of e){\n        let t = await sc(r);\n        if (t) return t;\n    }\n}\nasync function sc(e) {\n    try {\n        return (await fi.default.readdir(e)).find((t)=>t.startsWith(\"libssl.so.\") && !t.startsWith(\"libssl.so.0\"));\n    } catch (r) {\n        if (r.code === \"ENOENT\") return;\n        throw r;\n    }\n}\nasync function ir() {\n    let { binaryTarget: e } = await es();\n    return e;\n}\nfunction ac(e) {\n    return e.binaryTarget !== void 0;\n}\nasync function gi() {\n    let { memoized: e, ...r } = await es();\n    return r;\n}\nvar Ht = {};\nasync function es() {\n    if (ac(Ht)) return Promise.resolve({\n        ...Ht,\n        memoized: !0\n    });\n    let e = await Zo(), r = lc(e);\n    return Ht = {\n        ...e,\n        binaryTarget: r\n    }, {\n        ...Ht,\n        memoized: !1\n    };\n}\nfunction lc(e) {\n    let { platform: r, arch: t, archFromUname: n, libssl: i, targetDistro: o, familyDistro: s, originalDistro: a } = e;\n    r === \"linux\" && ![\n        \"x64\",\n        \"arm64\"\n    ].includes(t) && Jt(`Prisma only officially supports Linux on amd64 (x86_64) and arm64 (aarch64) system architectures (detected \"${t}\" instead). If you are using your own custom Prisma engines, you can ignore this warning, as long as you've compiled the engines for your system architecture \"${n}\".`);\n    let l = \"1.1.x\";\n    if (r === \"linux\" && i === void 0) {\n        let c = hr({\n            familyDistro: s\n        }).with({\n            familyDistro: \"debian\"\n        }, ()=>\"Please manually install OpenSSL via `apt-get update -y && apt-get install -y openssl` and try installing Prisma again. If you're running Prisma on Docker, add this command to your Dockerfile, or switch to an image that already has OpenSSL installed.\").otherwise(()=>\"Please manually install OpenSSL and try installing Prisma again.\");\n        Jt(`Prisma failed to detect the libssl/openssl version to use, and may not work as expected. Defaulting to \"openssl-${l}\".\n${c}`);\n    }\n    let u = \"debian\";\n    if (r === \"linux\" && o === void 0 && ee(`Distro is \"${a}\". Falling back to Prisma engines built for \"${u}\".`), r === \"darwin\" && t === \"arm64\") return \"darwin-arm64\";\n    if (r === \"darwin\") return \"darwin\";\n    if (r === \"win32\") return \"windows\";\n    if (r === \"freebsd\") return o;\n    if (r === \"openbsd\") return \"openbsd\";\n    if (r === \"netbsd\") return \"netbsd\";\n    if (r === \"linux\" && o === \"nixos\") return \"linux-nixos\";\n    if (r === \"linux\" && t === \"arm64\") return `${o === \"musl\" ? \"linux-musl-arm64\" : \"linux-arm64\"}-openssl-${i || l}`;\n    if (r === \"linux\" && t === \"arm\") return `linux-arm-openssl-${i || l}`;\n    if (r === \"linux\" && o === \"musl\") {\n        let c = \"linux-musl\";\n        return !i || rs(i) ? c : `${c}-openssl-${i}`;\n    }\n    return r === \"linux\" && o && i ? `${o}-openssl-${i}` : (r !== \"linux\" && Jt(`Prisma detected unknown OS \"${r}\" and may not work as expected. Defaulting to \"linux\".`), i ? `${u}-openssl-${i}` : o ? `${o}-openssl-${l}` : `${u}-openssl-${l}`);\n}\nasync function uc(e) {\n    try {\n        return await e();\n    } catch  {\n        return;\n    }\n}\nfunction Yt(e) {\n    return uc(async ()=>{\n        let r = await Xu(e);\n        return ee(`Command \"${e}\" successfully returned \"${r.stdout}\"`), r.stdout;\n    });\n}\nasync function cc() {\n    return typeof Kt.default.machine == \"function\" ? Kt.default.machine() : (await Yt(\"uname -m\"))?.trim();\n}\nfunction rs(e) {\n    return e.startsWith(\"1.\");\n}\nvar Xt = {};\ntr(Xt, {\n    beep: ()=>Fc,\n    clearScreen: ()=>Oc,\n    clearTerminal: ()=>_c,\n    cursorBackward: ()=>yc,\n    cursorDown: ()=>gc,\n    cursorForward: ()=>hc,\n    cursorGetPosition: ()=>wc,\n    cursorHide: ()=>Pc,\n    cursorLeft: ()=>is,\n    cursorMove: ()=>fc,\n    cursorNextLine: ()=>xc,\n    cursorPrevLine: ()=>vc,\n    cursorRestorePosition: ()=>Ec,\n    cursorSavePosition: ()=>bc,\n    cursorShow: ()=>Tc,\n    cursorTo: ()=>mc,\n    cursorUp: ()=>ns,\n    enterAlternativeScreen: ()=>Nc,\n    eraseDown: ()=>Cc,\n    eraseEndLine: ()=>Rc,\n    eraseLine: ()=>os,\n    eraseLines: ()=>Sc,\n    eraseScreen: ()=>hi,\n    eraseStartLine: ()=>Ac,\n    eraseUp: ()=>Ic,\n    exitAlternativeScreen: ()=>Lc,\n    iTerm: ()=>qc,\n    image: ()=>$c,\n    link: ()=>Mc,\n    scrollDown: ()=>Dc,\n    scrollUp: ()=>kc\n});\nvar Zt = C(__webpack_require__(/*! node:process */ \"node:process\"), 1);\nvar zt = globalThis.window?.document !== void 0, bg = globalThis.process?.versions?.node !== void 0, Eg = globalThis.process?.versions?.bun !== void 0, wg = globalThis.Deno?.version?.deno !== void 0, xg = globalThis.process?.versions?.electron !== void 0, vg = globalThis.navigator?.userAgent?.includes(\"jsdom\") === !0, Pg = typeof WorkerGlobalScope < \"u\" && globalThis instanceof WorkerGlobalScope, Tg = typeof DedicatedWorkerGlobalScope < \"u\" && globalThis instanceof DedicatedWorkerGlobalScope, Sg = typeof SharedWorkerGlobalScope < \"u\" && globalThis instanceof SharedWorkerGlobalScope, Rg = typeof ServiceWorkerGlobalScope < \"u\" && globalThis instanceof ServiceWorkerGlobalScope, Xr = globalThis.navigator?.userAgentData?.platform, Ag = Xr === \"macOS\" || globalThis.navigator?.platform === \"MacIntel\" || globalThis.navigator?.userAgent?.includes(\" Mac \") === !0 || globalThis.process?.platform === \"darwin\", Cg = Xr === \"Windows\" || globalThis.navigator?.platform === \"Win32\" || globalThis.process?.platform === \"win32\", Ig = Xr === \"Linux\" || globalThis.navigator?.platform?.startsWith(\"Linux\") === !0 || globalThis.navigator?.userAgent?.includes(\" Linux \") === !0 || globalThis.process?.platform === \"linux\", kg = Xr === \"iOS\" || globalThis.navigator?.platform === \"MacIntel\" && globalThis.navigator?.maxTouchPoints > 1 || /iPad|iPhone|iPod/.test(globalThis.navigator?.platform), Dg = Xr === \"Android\" || globalThis.navigator?.platform === \"Android\" || globalThis.navigator?.userAgent?.includes(\" Android \") === !0 || globalThis.process?.platform === \"android\";\nvar k = \"\\x1B[\", rt = \"\\x1B]\", yr = \"\\x07\", et = \";\", ts = !zt && Zt.default.env.TERM_PROGRAM === \"Apple_Terminal\", pc = !zt && Zt.default.platform === \"win32\", dc = zt ? ()=>{\n    throw new Error(\"`process.cwd()` only works in Node.js, not the browser.\");\n} : Zt.default.cwd, mc = (e, r)=>{\n    if (typeof e != \"number\") throw new TypeError(\"The `x` argument is required\");\n    return typeof r != \"number\" ? k + (e + 1) + \"G\" : k + (r + 1) + et + (e + 1) + \"H\";\n}, fc = (e, r)=>{\n    if (typeof e != \"number\") throw new TypeError(\"The `x` argument is required\");\n    let t = \"\";\n    return e < 0 ? t += k + -e + \"D\" : e > 0 && (t += k + e + \"C\"), r < 0 ? t += k + -r + \"A\" : r > 0 && (t += k + r + \"B\"), t;\n}, ns = (e = 1)=>k + e + \"A\", gc = (e = 1)=>k + e + \"B\", hc = (e = 1)=>k + e + \"C\", yc = (e = 1)=>k + e + \"D\", is = k + \"G\", bc = ts ? \"\\x1B7\" : k + \"s\", Ec = ts ? \"\\x1B8\" : k + \"u\", wc = k + \"6n\", xc = k + \"E\", vc = k + \"F\", Pc = k + \"?25l\", Tc = k + \"?25h\", Sc = (e)=>{\n    let r = \"\";\n    for(let t = 0; t < e; t++)r += os + (t < e - 1 ? ns() : \"\");\n    return e && (r += is), r;\n}, Rc = k + \"K\", Ac = k + \"1K\", os = k + \"2K\", Cc = k + \"J\", Ic = k + \"1J\", hi = k + \"2J\", kc = k + \"S\", Dc = k + \"T\", Oc = \"\\x1Bc\", _c = pc ? `${hi}${k}0f` : `${hi}${k}3J${k}H`, Nc = k + \"?1049h\", Lc = k + \"?1049l\", Fc = yr, Mc = (e, r)=>[\n        rt,\n        \"8\",\n        et,\n        et,\n        r,\n        yr,\n        e,\n        rt,\n        \"8\",\n        et,\n        et,\n        yr\n    ].join(\"\"), $c = (e, r = {})=>{\n    let t = `${rt}1337;File=inline=1`;\n    return r.width && (t += `;width=${r.width}`), r.height && (t += `;height=${r.height}`), r.preserveAspectRatio === !1 && (t += \";preserveAspectRatio=0\"), t + \":\" + Buffer.from(e).toString(\"base64\") + yr;\n}, qc = {\n    setCwd: (e = dc())=>`${rt}50;CurrentDir=${e}${yr}`,\n    annotation (e, r = {}) {\n        let t = `${rt}1337;`, n = r.x !== void 0, i = r.y !== void 0;\n        if ((n || i) && !(n && i && r.length !== void 0)) throw new Error(\"`x`, `y` and `length` must be defined when `x` or `y` is defined\");\n        return e = e.replaceAll(\"|\", \"\"), t += r.isHidden ? \"AddHiddenAnnotation=\" : \"AddAnnotation=\", r.length > 0 ? t += (n ? [\n            e,\n            r.length,\n            r.x,\n            r.y\n        ] : [\n            r.length,\n            e\n        ]).join(\"|\") : t += e, t + yr;\n    }\n};\nvar en = C(ds(), 1);\nfunction or(e, r, { target: t = \"stdout\", ...n } = {}) {\n    return en.default[t] ? Xt.link(e, r) : n.fallback === !1 ? e : typeof n.fallback == \"function\" ? n.fallback(e, r) : `${e} (\\u200B${r}\\u200B)`;\n}\nor.isSupported = en.default.stdout;\nor.stderr = (e, r, t = {})=>or(e, r, {\n        target: \"stderr\",\n        ...t\n    });\nor.stderr.isSupported = en.default.stderr;\nfunction xi(e) {\n    return or(e, e, {\n        fallback: Y\n    });\n}\nvar Gc = ms(), vi = Gc.version;\nfunction Er(e) {\n    let r = Qc();\n    return r || (e?.config.engineType === \"library\" ? \"library\" : e?.config.engineType === \"binary\" ? \"binary\" : e?.config.engineType === \"client\" ? \"client\" : Wc(e));\n}\nfunction Qc() {\n    let e = process.env.PRISMA_CLIENT_ENGINE_TYPE;\n    return e === \"library\" ? \"library\" : e === \"binary\" ? \"binary\" : e === \"client\" ? \"client\" : void 0;\n}\nfunction Wc(e) {\n    return e?.previewFeatures.includes(\"queryCompiler\") ? \"client\" : \"library\";\n}\nfunction Pi(e) {\n    return e.name === \"DriverAdapterError\" && typeof e.cause == \"object\";\n}\nfunction rn(e) {\n    return {\n        ok: !0,\n        value: e,\n        map (r) {\n            return rn(r(e));\n        },\n        flatMap (r) {\n            return r(e);\n        }\n    };\n}\nfunction sr(e) {\n    return {\n        ok: !1,\n        error: e,\n        map () {\n            return sr(e);\n        },\n        flatMap () {\n            return sr(e);\n        }\n    };\n}\nvar fs = N(\"driver-adapter-utils\"), Ti = class {\n    consumeError(r) {\n        return this.registeredErrors[r];\n    }\n    registerNewError(r) {\n        let t = 0;\n        for(; this.registeredErrors[t] !== void 0;)t++;\n        return this.registeredErrors[t] = {\n            error: r\n        }, t;\n    }\n    constructor(){\n        this.registeredErrors = [];\n    }\n};\nvar tn = (e, r = new Ti)=>{\n    let t = {\n        adapterName: e.adapterName,\n        errorRegistry: r,\n        queryRaw: _e(r, e.queryRaw.bind(e)),\n        executeRaw: _e(r, e.executeRaw.bind(e)),\n        executeScript: _e(r, e.executeScript.bind(e)),\n        dispose: _e(r, e.dispose.bind(e)),\n        provider: e.provider,\n        startTransaction: async (...n)=>(await _e(r, e.startTransaction.bind(e))(...n)).map((o)=>Jc(r, o))\n    };\n    return e.getConnectionInfo && (t.getConnectionInfo = Hc(r, e.getConnectionInfo.bind(e))), t;\n}, Jc = (e, r)=>({\n        adapterName: r.adapterName,\n        provider: r.provider,\n        options: r.options,\n        queryRaw: _e(e, r.queryRaw.bind(r)),\n        executeRaw: _e(e, r.executeRaw.bind(r)),\n        commit: _e(e, r.commit.bind(r)),\n        rollback: _e(e, r.rollback.bind(r))\n    });\nfunction _e(e, r) {\n    return async (...t)=>{\n        try {\n            return rn(await r(...t));\n        } catch (n) {\n            if (fs(\"[error@wrapAsync]\", n), Pi(n)) return sr(n.cause);\n            let i = e.registerNewError(n);\n            return sr({\n                kind: \"GenericJs\",\n                id: i\n            });\n        }\n    };\n}\nfunction Hc(e, r) {\n    return (...t)=>{\n        try {\n            return rn(r(...t));\n        } catch (n) {\n            if (fs(\"[error@wrapSync]\", n), Pi(n)) return sr(n.cause);\n            let i = e.registerNewError(n);\n            return sr({\n                kind: \"GenericJs\",\n                id: i\n            });\n        }\n    };\n}\nvar Yc = C(on());\nvar M = C(__webpack_require__(/*! node:path */ \"node:path\")), zc = C(on()), Ph = N(\"prisma:engines\");\nfunction gs() {\n    return M.default.join(__dirname, \"../\");\n}\nvar Th = \"libquery-engine\";\nM.default.join(__dirname, \"../query-engine-darwin\");\nM.default.join(__dirname, \"../query-engine-darwin-arm64\");\nM.default.join(__dirname, \"../query-engine-debian-openssl-1.0.x\");\nM.default.join(__dirname, \"../query-engine-debian-openssl-1.1.x\");\nM.default.join(__dirname, \"../query-engine-debian-openssl-3.0.x\");\nM.default.join(__dirname, \"../query-engine-linux-static-x64\");\nM.default.join(__dirname, \"../query-engine-linux-static-arm64\");\nM.default.join(__dirname, \"../query-engine-rhel-openssl-1.0.x\");\nM.default.join(__dirname, \"../query-engine-rhel-openssl-1.1.x\");\nM.default.join(__dirname, \"../query-engine-rhel-openssl-3.0.x\");\nM.default.join(__dirname, \"../libquery_engine-darwin.dylib.node\");\nM.default.join(__dirname, \"../libquery_engine-darwin-arm64.dylib.node\");\nM.default.join(__dirname, \"../libquery_engine-debian-openssl-1.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-debian-openssl-1.1.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-debian-openssl-3.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-1.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-1.1.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-3.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-musl.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-musl-openssl-3.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-rhel-openssl-1.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-rhel-openssl-1.1.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-rhel-openssl-3.0.x.so.node\");\nM.default.join(__dirname, \"../query_engine-windows.dll.node\");\nvar Ri = C(__webpack_require__(/*! node:fs */ \"node:fs\")), hs = gr(\"chmodPlusX\");\nfunction Ai(e) {\n    if (process.platform === \"win32\") return;\n    let r = Ri.default.statSync(e), t = r.mode | 64 | 8 | 1;\n    if (r.mode === t) {\n        hs(`Execution permissions of ${e} are fine`);\n        return;\n    }\n    let n = t.toString(8).slice(-3);\n    hs(`Have to call chmodPlusX on ${e}`), Ri.default.chmodSync(e, n);\n}\nfunction Ci(e) {\n    let r = e.e, t = (a)=>`Prisma cannot find the required \\`${a}\\` system library in your system`, n = r.message.includes(\"cannot open shared object file\"), i = `Please refer to the documentation about Prisma's system requirements: ${xi(\"https://pris.ly/d/system-requirements\")}`, o = `Unable to require(\\`${Ie(e.id)}\\`).`, s = hr({\n        message: r.message,\n        code: r.code\n    }).with({\n        code: \"ENOENT\"\n    }, ()=>\"File does not exist.\").when(({ message: a })=>n && a.includes(\"libz\"), ()=>`${t(\"libz\")}. Please install it and try again.`).when(({ message: a })=>n && a.includes(\"libgcc_s\"), ()=>`${t(\"libgcc_s\")}. Please install it and try again.`).when(({ message: a })=>n && a.includes(\"libssl\"), ()=>{\n        let a = e.platformInfo.libssl ? `openssl-${e.platformInfo.libssl}` : \"openssl\";\n        return `${t(\"libssl\")}. Please install ${a} and try again.`;\n    }).when(({ message: a })=>a.includes(\"GLIBC\"), ()=>`Prisma has detected an incompatible version of the \\`glibc\\` C standard library installed in your system. This probably means your system may be too old to run Prisma. ${i}`).when(({ message: a })=>e.platformInfo.platform === \"linux\" && a.includes(\"symbol not found\"), ()=>`The Prisma engines are not compatible with your system ${e.platformInfo.originalDistro} on (${e.platformInfo.archFromUname}) which uses the \\`${e.platformInfo.binaryTarget}\\` binaryTarget by default. ${i}`).otherwise(()=>`The Prisma engines do not seem to be compatible with your system. ${i}`);\n    return `${o}\n${s}\n\nDetails: ${r.message}`;\n}\nvar Es = C(bs(), 1);\nfunction Ii(e) {\n    let r = (0, Es.default)(e);\n    if (r === 0) return e;\n    let t = new RegExp(`^[ \\\\t]{${r}}`, \"gm\");\n    return e.replace(t, \"\");\n}\nvar ws = \"prisma+postgres\", sn = `${ws}:`;\nfunction an(e) {\n    return e?.toString().startsWith(`${sn}//`) ?? !1;\n}\nfunction ki(e) {\n    if (!an(e)) return !1;\n    let { host: r } = new URL(e);\n    return r.includes(\"localhost\") || r.includes(\"127.0.0.1\") || r.includes(\"[::1]\");\n}\nvar vs = C(Di());\nfunction _i(e) {\n    return String(new Oi(e));\n}\nvar Oi = class {\n    constructor(r){\n        this.config = r;\n    }\n    toString() {\n        let { config: r } = this, t = r.provider.fromEnvVar ? `env(\"${r.provider.fromEnvVar}\")` : r.provider.value, n = JSON.parse(JSON.stringify({\n            provider: t,\n            binaryTargets: Zc(r.binaryTargets)\n        }));\n        return `generator ${r.name} {\n${(0, vs.default)(Xc(n), 2)}\n}`;\n    }\n};\nfunction Zc(e) {\n    let r;\n    if (e.length > 0) {\n        let t = e.find((n)=>n.fromEnvVar !== null);\n        t ? r = `env(\"${t.fromEnvVar}\")` : r = e.map((n)=>n.native ? \"native\" : n.value);\n    } else r = void 0;\n    return r;\n}\nfunction Xc(e) {\n    let r = Object.keys(e).reduce((t, n)=>Math.max(t, n.length), 0);\n    return Object.entries(e).map(([t, n])=>`${t.padEnd(r)} = ${ep(n)}`).join(`\n`);\n}\nfunction ep(e) {\n    return JSON.parse(JSON.stringify(e, (r, t)=>Array.isArray(t) ? `[${t.map((n)=>JSON.stringify(n)).join(\", \")}]` : JSON.stringify(t)));\n}\nvar nt = {};\ntr(nt, {\n    error: ()=>np,\n    info: ()=>tp,\n    log: ()=>rp,\n    query: ()=>ip,\n    should: ()=>Ps,\n    tags: ()=>tt,\n    warn: ()=>Ni\n});\nvar tt = {\n    error: ce(\"prisma:error\"),\n    warn: ke(\"prisma:warn\"),\n    info: De(\"prisma:info\"),\n    query: nr(\"prisma:query\")\n}, Ps = {\n    warn: ()=>!process.env.PRISMA_DISABLE_WARNINGS\n};\nfunction rp(...e) {\n    console.log(...e);\n}\nfunction Ni(e, ...r) {\n    Ps.warn() && console.warn(`${tt.warn} ${e}`, ...r);\n}\nfunction tp(e, ...r) {\n    console.info(`${tt.info} ${e}`, ...r);\n}\nfunction np(e, ...r) {\n    console.error(`${tt.error} ${e}`, ...r);\n}\nfunction ip(e, ...r) {\n    console.log(`${tt.query} ${e}`, ...r);\n}\nfunction ln(e, r) {\n    if (!e) throw new Error(`${r}. This should never happen. If you see this error, please, open an issue at https://pris.ly/prisma-prisma-bug-report`);\n}\nfunction Ne(e, r) {\n    throw new Error(r);\n}\nvar it = C(__webpack_require__(/*! node:path */ \"node:path\"));\nfunction Fi(e) {\n    return it.default.sep === it.default.posix.sep ? e : e.split(it.default.sep).join(it.default.posix.sep);\n}\nvar ji = C(Os()), un = C(__webpack_require__(/*! node:fs */ \"node:fs\"));\nvar wr = C(__webpack_require__(/*! node:path */ \"node:path\"));\nfunction _s(e) {\n    let r = e.ignoreProcessEnv ? {} : process.env, t = (n)=>n.match(/(.?\\${(?:[a-zA-Z0-9_]+)?})/g)?.reduce(function(o, s) {\n            let a = /(.?)\\${([a-zA-Z0-9_]+)?}/g.exec(s);\n            if (!a) return o;\n            let l = a[1], u, c;\n            if (l === \"\\\\\") c = a[0], u = c.replace(\"\\\\$\", \"$\");\n            else {\n                let p = a[2];\n                c = a[0].substring(l.length), u = Object.hasOwnProperty.call(r, p) ? r[p] : e.parsed[p] || \"\", u = t(u);\n            }\n            return o.replace(c, u);\n        }, n) ?? n;\n    for(let n in e.parsed){\n        let i = Object.hasOwnProperty.call(r, n) ? r[n] : e.parsed[n];\n        e.parsed[n] = t(i);\n    }\n    for(let n in e.parsed)r[n] = e.parsed[n];\n    return e;\n}\nvar qi = gr(\"prisma:tryLoadEnv\");\nfunction st({ rootEnvPath: e, schemaEnvPath: r }, t = {\n    conflictCheck: \"none\"\n}) {\n    let n = Ns(e);\n    t.conflictCheck !== \"none\" && wp(n, r, t.conflictCheck);\n    let i = null;\n    return Ls(n?.path, r) || (i = Ns(r)), !n && !i && qi(\"No Environment variables loaded\"), i?.dotenvResult.error ? console.error(ce(W(\"Schema Env Error: \")) + i.dotenvResult.error) : {\n        message: [\n            n?.message,\n            i?.message\n        ].filter(Boolean).join(`\n`),\n        parsed: {\n            ...n?.dotenvResult?.parsed,\n            ...i?.dotenvResult?.parsed\n        }\n    };\n}\nfunction wp(e, r, t) {\n    let n = e?.dotenvResult.parsed, i = !Ls(e?.path, r);\n    if (n && r && i && un.default.existsSync(r)) {\n        let o = ji.default.parse(un.default.readFileSync(r)), s = [];\n        for(let a in o)n[a] === o[a] && s.push(a);\n        if (s.length > 0) {\n            let a = wr.default.relative(process.cwd(), e.path), l = wr.default.relative(process.cwd(), r);\n            if (t === \"error\") {\n                let u = `There is a conflict between env var${s.length > 1 ? \"s\" : \"\"} in ${Y(a)} and ${Y(l)}\nConflicting env vars:\n${s.map((c)=>`  ${W(c)}`).join(`\n`)}\n\nWe suggest to move the contents of ${Y(l)} to ${Y(a)} to consolidate your env vars.\n`;\n                throw new Error(u);\n            } else if (t === \"warn\") {\n                let u = `Conflict for env var${s.length > 1 ? \"s\" : \"\"} ${s.map((c)=>W(c)).join(\", \")} in ${Y(a)} and ${Y(l)}\nEnv vars from ${Y(l)} overwrite the ones from ${Y(a)}\n      `;\n                console.warn(`${ke(\"warn(prisma)\")} ${u}`);\n            }\n        }\n    }\n}\nfunction Ns(e) {\n    if (xp(e)) {\n        qi(`Environment variables loaded from ${e}`);\n        let r = ji.default.config({\n            path: e,\n            debug: process.env.DOTENV_CONFIG_DEBUG ? !0 : void 0\n        });\n        return {\n            dotenvResult: _s(r),\n            message: Ie(`Environment variables loaded from ${wr.default.relative(process.cwd(), e)}`),\n            path: e\n        };\n    } else qi(`Environment variables not found at ${e}`);\n    return null;\n}\nfunction Ls(e, r) {\n    return e && r && wr.default.resolve(e) === wr.default.resolve(r);\n}\nfunction xp(e) {\n    return !!(e && un.default.existsSync(e));\n}\nfunction Vi(e, r) {\n    return Object.prototype.hasOwnProperty.call(e, r);\n}\nfunction xr(e, r) {\n    let t = {};\n    for (let n of Object.keys(e))t[n] = r(e[n], n);\n    return t;\n}\nfunction Bi(e, r) {\n    if (e.length === 0) return;\n    let t = e[0];\n    for(let n = 1; n < e.length; n++)r(t, e[n]) < 0 && (t = e[n]);\n    return t;\n}\nfunction x(e, r) {\n    Object.defineProperty(e, \"name\", {\n        value: r,\n        configurable: !0\n    });\n}\nvar Ms = new Set, at = (e, r, ...t)=>{\n    Ms.has(e) || (Ms.add(e), Ni(r, ...t));\n};\nvar T = class e extends Error {\n    constructor(r, t, n){\n        super(r), this.name = \"PrismaClientInitializationError\", this.clientVersion = t, this.errorCode = n, Error.captureStackTrace(e);\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientInitializationError\";\n    }\n};\nx(T, \"PrismaClientInitializationError\");\nvar z = class extends Error {\n    constructor(r, { code: t, clientVersion: n, meta: i, batchRequestIdx: o }){\n        super(r), this.name = \"PrismaClientKnownRequestError\", this.code = t, this.clientVersion = n, this.meta = i, Object.defineProperty(this, \"batchRequestIdx\", {\n            value: o,\n            enumerable: !1,\n            writable: !0\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientKnownRequestError\";\n    }\n};\nx(z, \"PrismaClientKnownRequestError\");\nvar le = class extends Error {\n    constructor(r, t){\n        super(r), this.name = \"PrismaClientRustPanicError\", this.clientVersion = t;\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientRustPanicError\";\n    }\n};\nx(le, \"PrismaClientRustPanicError\");\nvar j = class extends Error {\n    constructor(r, { clientVersion: t, batchRequestIdx: n }){\n        super(r), this.name = \"PrismaClientUnknownRequestError\", this.clientVersion = t, Object.defineProperty(this, \"batchRequestIdx\", {\n            value: n,\n            writable: !0,\n            enumerable: !1\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientUnknownRequestError\";\n    }\n};\nx(j, \"PrismaClientUnknownRequestError\");\nvar Z = class extends Error {\n    constructor(r, { clientVersion: t }){\n        super(r), this.name = \"PrismaClientValidationError\", this.clientVersion = t;\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientValidationError\";\n    }\n};\nx(Z, \"PrismaClientValidationError\");\nvar vr = 9e15, Ke = 1e9, Ui = \"0123456789abcdef\", fn = \"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\", gn = \"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\", Gi = {\n    precision: 20,\n    rounding: 4,\n    modulo: 1,\n    toExpNeg: -7,\n    toExpPos: 21,\n    minE: -vr,\n    maxE: vr,\n    crypto: !1\n}, Vs, Fe, w = !0, yn = \"[DecimalError] \", He = yn + \"Invalid argument: \", Bs = yn + \"Precision limit exceeded\", Us = yn + \"crypto unavailable\", Gs = \"[object Decimal]\", X = Math.floor, U = Math.pow, vp = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i, Pp = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i, Tp = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i, Qs = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i, fe = 1e7, E = 7, Sp = 9007199254740991, Rp = fn.length - 1, Qi = gn.length - 1, m = {\n    toStringTag: Gs\n};\nm.absoluteValue = m.abs = function() {\n    var e = new this.constructor(this);\n    return e.s < 0 && (e.s = 1), y(e);\n};\nm.ceil = function() {\n    return y(new this.constructor(this), this.e + 1, 2);\n};\nm.clampedTo = m.clamp = function(e, r) {\n    var t, n = this, i = n.constructor;\n    if (e = new i(e), r = new i(r), !e.s || !r.s) return new i(NaN);\n    if (e.gt(r)) throw Error(He + r);\n    return t = n.cmp(e), t < 0 ? e : n.cmp(r) > 0 ? r : new i(n);\n};\nm.comparedTo = m.cmp = function(e) {\n    var r, t, n, i, o = this, s = o.d, a = (e = new o.constructor(e)).d, l = o.s, u = e.s;\n    if (!s || !a) return !l || !u ? NaN : l !== u ? l : s === a ? 0 : !s ^ l < 0 ? 1 : -1;\n    if (!s[0] || !a[0]) return s[0] ? l : a[0] ? -u : 0;\n    if (l !== u) return l;\n    if (o.e !== e.e) return o.e > e.e ^ l < 0 ? 1 : -1;\n    for(n = s.length, i = a.length, r = 0, t = n < i ? n : i; r < t; ++r)if (s[r] !== a[r]) return s[r] > a[r] ^ l < 0 ? 1 : -1;\n    return n === i ? 0 : n > i ^ l < 0 ? 1 : -1;\n};\nm.cosine = m.cos = function() {\n    var e, r, t = this, n = t.constructor;\n    return t.d ? t.d[0] ? (e = n.precision, r = n.rounding, n.precision = e + Math.max(t.e, t.sd()) + E, n.rounding = 1, t = Ap(n, Ys(n, t)), n.precision = e, n.rounding = r, y(Fe == 2 || Fe == 3 ? t.neg() : t, e, r, !0)) : new n(1) : new n(NaN);\n};\nm.cubeRoot = m.cbrt = function() {\n    var e, r, t, n, i, o, s, a, l, u, c = this, p = c.constructor;\n    if (!c.isFinite() || c.isZero()) return new p(c);\n    for(w = !1, o = c.s * U(c.s * c, 1 / 3), !o || Math.abs(o) == 1 / 0 ? (t = J(c.d), e = c.e, (o = (e - t.length + 1) % 3) && (t += o == 1 || o == -2 ? \"0\" : \"00\"), o = U(t, 1 / 3), e = X((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2)), o == 1 / 0 ? t = \"5e\" + e : (t = o.toExponential(), t = t.slice(0, t.indexOf(\"e\") + 1) + e), n = new p(t), n.s = c.s) : n = new p(o.toString()), s = (e = p.precision) + 3;;)if (a = n, l = a.times(a).times(a), u = l.plus(c), n = L(u.plus(c).times(a), u.plus(l), s + 2, 1), J(a.d).slice(0, s) === (t = J(n.d)).slice(0, s)) if (t = t.slice(s - 3, s + 1), t == \"9999\" || !i && t == \"4999\") {\n        if (!i && (y(a, e + 1, 0), a.times(a).times(a).eq(c))) {\n            n = a;\n            break;\n        }\n        s += 4, i = 1;\n    } else {\n        (!+t || !+t.slice(1) && t.charAt(0) == \"5\") && (y(n, e + 1, 1), r = !n.times(n).times(n).eq(c));\n        break;\n    }\n    return w = !0, y(n, e, p.rounding, r);\n};\nm.decimalPlaces = m.dp = function() {\n    var e, r = this.d, t = NaN;\n    if (r) {\n        if (e = r.length - 1, t = (e - X(this.e / E)) * E, e = r[e], e) for(; e % 10 == 0; e /= 10)t--;\n        t < 0 && (t = 0);\n    }\n    return t;\n};\nm.dividedBy = m.div = function(e) {\n    return L(this, new this.constructor(e));\n};\nm.dividedToIntegerBy = m.divToInt = function(e) {\n    var r = this, t = r.constructor;\n    return y(L(r, new t(e), 0, 1, 1), t.precision, t.rounding);\n};\nm.equals = m.eq = function(e) {\n    return this.cmp(e) === 0;\n};\nm.floor = function() {\n    return y(new this.constructor(this), this.e + 1, 3);\n};\nm.greaterThan = m.gt = function(e) {\n    return this.cmp(e) > 0;\n};\nm.greaterThanOrEqualTo = m.gte = function(e) {\n    var r = this.cmp(e);\n    return r == 1 || r === 0;\n};\nm.hyperbolicCosine = m.cosh = function() {\n    var e, r, t, n, i, o = this, s = o.constructor, a = new s(1);\n    if (!o.isFinite()) return new s(o.s ? 1 / 0 : NaN);\n    if (o.isZero()) return a;\n    t = s.precision, n = s.rounding, s.precision = t + Math.max(o.e, o.sd()) + 4, s.rounding = 1, i = o.d.length, i < 32 ? (e = Math.ceil(i / 3), r = (1 / En(4, e)).toString()) : (e = 16, r = \"2.3283064365386962890625e-10\"), o = Pr(s, 1, o.times(r), new s(1), !0);\n    for(var l, u = e, c = new s(8); u--;)l = o.times(o), o = a.minus(l.times(c.minus(l.times(c))));\n    return y(o, s.precision = t, s.rounding = n, !0);\n};\nm.hyperbolicSine = m.sinh = function() {\n    var e, r, t, n, i = this, o = i.constructor;\n    if (!i.isFinite() || i.isZero()) return new o(i);\n    if (r = o.precision, t = o.rounding, o.precision = r + Math.max(i.e, i.sd()) + 4, o.rounding = 1, n = i.d.length, n < 3) i = Pr(o, 2, i, i, !0);\n    else {\n        e = 1.4 * Math.sqrt(n), e = e > 16 ? 16 : e | 0, i = i.times(1 / En(5, e)), i = Pr(o, 2, i, i, !0);\n        for(var s, a = new o(5), l = new o(16), u = new o(20); e--;)s = i.times(i), i = i.times(a.plus(s.times(l.times(s).plus(u))));\n    }\n    return o.precision = r, o.rounding = t, y(i, r, t, !0);\n};\nm.hyperbolicTangent = m.tanh = function() {\n    var e, r, t = this, n = t.constructor;\n    return t.isFinite() ? t.isZero() ? new n(t) : (e = n.precision, r = n.rounding, n.precision = e + 7, n.rounding = 1, L(t.sinh(), t.cosh(), n.precision = e, n.rounding = r)) : new n(t.s);\n};\nm.inverseCosine = m.acos = function() {\n    var e = this, r = e.constructor, t = e.abs().cmp(1), n = r.precision, i = r.rounding;\n    return t !== -1 ? t === 0 ? e.isNeg() ? we(r, n, i) : new r(0) : new r(NaN) : e.isZero() ? we(r, n + 4, i).times(.5) : (r.precision = n + 6, r.rounding = 1, e = new r(1).minus(e).div(e.plus(1)).sqrt().atan(), r.precision = n, r.rounding = i, e.times(2));\n};\nm.inverseHyperbolicCosine = m.acosh = function() {\n    var e, r, t = this, n = t.constructor;\n    return t.lte(1) ? new n(t.eq(1) ? 0 : NaN) : t.isFinite() ? (e = n.precision, r = n.rounding, n.precision = e + Math.max(Math.abs(t.e), t.sd()) + 4, n.rounding = 1, w = !1, t = t.times(t).minus(1).sqrt().plus(t), w = !0, n.precision = e, n.rounding = r, t.ln()) : new n(t);\n};\nm.inverseHyperbolicSine = m.asinh = function() {\n    var e, r, t = this, n = t.constructor;\n    return !t.isFinite() || t.isZero() ? new n(t) : (e = n.precision, r = n.rounding, n.precision = e + 2 * Math.max(Math.abs(t.e), t.sd()) + 6, n.rounding = 1, w = !1, t = t.times(t).plus(1).sqrt().plus(t), w = !0, n.precision = e, n.rounding = r, t.ln());\n};\nm.inverseHyperbolicTangent = m.atanh = function() {\n    var e, r, t, n, i = this, o = i.constructor;\n    return i.isFinite() ? i.e >= 0 ? new o(i.abs().eq(1) ? i.s / 0 : i.isZero() ? i : NaN) : (e = o.precision, r = o.rounding, n = i.sd(), Math.max(n, e) < 2 * -i.e - 1 ? y(new o(i), e, r, !0) : (o.precision = t = n - i.e, i = L(i.plus(1), new o(1).minus(i), t + e, 1), o.precision = e + 4, o.rounding = 1, i = i.ln(), o.precision = e, o.rounding = r, i.times(.5))) : new o(NaN);\n};\nm.inverseSine = m.asin = function() {\n    var e, r, t, n, i = this, o = i.constructor;\n    return i.isZero() ? new o(i) : (r = i.abs().cmp(1), t = o.precision, n = o.rounding, r !== -1 ? r === 0 ? (e = we(o, t + 4, n).times(.5), e.s = i.s, e) : new o(NaN) : (o.precision = t + 6, o.rounding = 1, i = i.div(new o(1).minus(i.times(i)).sqrt().plus(1)).atan(), o.precision = t, o.rounding = n, i.times(2)));\n};\nm.inverseTangent = m.atan = function() {\n    var e, r, t, n, i, o, s, a, l, u = this, c = u.constructor, p = c.precision, d = c.rounding;\n    if (u.isFinite()) {\n        if (u.isZero()) return new c(u);\n        if (u.abs().eq(1) && p + 4 <= Qi) return s = we(c, p + 4, d).times(.25), s.s = u.s, s;\n    } else {\n        if (!u.s) return new c(NaN);\n        if (p + 4 <= Qi) return s = we(c, p + 4, d).times(.5), s.s = u.s, s;\n    }\n    for(c.precision = a = p + 10, c.rounding = 1, t = Math.min(28, a / E + 2 | 0), e = t; e; --e)u = u.div(u.times(u).plus(1).sqrt().plus(1));\n    for(w = !1, r = Math.ceil(a / E), n = 1, l = u.times(u), s = new c(u), i = u; e !== -1;)if (i = i.times(l), o = s.minus(i.div(n += 2)), i = i.times(l), s = o.plus(i.div(n += 2)), s.d[r] !== void 0) for(e = r; s.d[e] === o.d[e] && e--;);\n    return t && (s = s.times(2 << t - 1)), w = !0, y(s, c.precision = p, c.rounding = d, !0);\n};\nm.isFinite = function() {\n    return !!this.d;\n};\nm.isInteger = m.isInt = function() {\n    return !!this.d && X(this.e / E) > this.d.length - 2;\n};\nm.isNaN = function() {\n    return !this.s;\n};\nm.isNegative = m.isNeg = function() {\n    return this.s < 0;\n};\nm.isPositive = m.isPos = function() {\n    return this.s > 0;\n};\nm.isZero = function() {\n    return !!this.d && this.d[0] === 0;\n};\nm.lessThan = m.lt = function(e) {\n    return this.cmp(e) < 0;\n};\nm.lessThanOrEqualTo = m.lte = function(e) {\n    return this.cmp(e) < 1;\n};\nm.logarithm = m.log = function(e) {\n    var r, t, n, i, o, s, a, l, u = this, c = u.constructor, p = c.precision, d = c.rounding, f = 5;\n    if (e == null) e = new c(10), r = !0;\n    else {\n        if (e = new c(e), t = e.d, e.s < 0 || !t || !t[0] || e.eq(1)) return new c(NaN);\n        r = e.eq(10);\n    }\n    if (t = u.d, u.s < 0 || !t || !t[0] || u.eq(1)) return new c(t && !t[0] ? -1 / 0 : u.s != 1 ? NaN : t ? 0 : 1 / 0);\n    if (r) if (t.length > 1) o = !0;\n    else {\n        for(i = t[0]; i % 10 === 0;)i /= 10;\n        o = i !== 1;\n    }\n    if (w = !1, a = p + f, s = Je(u, a), n = r ? hn(c, a + 10) : Je(e, a), l = L(s, n, a, 1), lt(l.d, i = p, d)) do if (a += 10, s = Je(u, a), n = r ? hn(c, a + 10) : Je(e, a), l = L(s, n, a, 1), !o) {\n        +J(l.d).slice(i + 1, i + 15) + 1 == 1e14 && (l = y(l, p + 1, 0));\n        break;\n    }\n    while (lt(l.d, i += 10, d));\n    return w = !0, y(l, p, d);\n};\nm.minus = m.sub = function(e) {\n    var r, t, n, i, o, s, a, l, u, c, p, d, f = this, h = f.constructor;\n    if (e = new h(e), !f.d || !e.d) return !f.s || !e.s ? e = new h(NaN) : f.d ? e.s = -e.s : e = new h(e.d || f.s !== e.s ? f : NaN), e;\n    if (f.s != e.s) return e.s = -e.s, f.plus(e);\n    if (u = f.d, d = e.d, a = h.precision, l = h.rounding, !u[0] || !d[0]) {\n        if (d[0]) e.s = -e.s;\n        else if (u[0]) e = new h(f);\n        else return new h(l === 3 ? -0 : 0);\n        return w ? y(e, a, l) : e;\n    }\n    if (t = X(e.e / E), c = X(f.e / E), u = u.slice(), o = c - t, o) {\n        for(p = o < 0, p ? (r = u, o = -o, s = d.length) : (r = d, t = c, s = u.length), n = Math.max(Math.ceil(a / E), s) + 2, o > n && (o = n, r.length = 1), r.reverse(), n = o; n--;)r.push(0);\n        r.reverse();\n    } else {\n        for(n = u.length, s = d.length, p = n < s, p && (s = n), n = 0; n < s; n++)if (u[n] != d[n]) {\n            p = u[n] < d[n];\n            break;\n        }\n        o = 0;\n    }\n    for(p && (r = u, u = d, d = r, e.s = -e.s), s = u.length, n = d.length - s; n > 0; --n)u[s++] = 0;\n    for(n = d.length; n > o;){\n        if (u[--n] < d[n]) {\n            for(i = n; i && u[--i] === 0;)u[i] = fe - 1;\n            --u[i], u[n] += fe;\n        }\n        u[n] -= d[n];\n    }\n    for(; u[--s] === 0;)u.pop();\n    for(; u[0] === 0; u.shift())--t;\n    return u[0] ? (e.d = u, e.e = bn(u, t), w ? y(e, a, l) : e) : new h(l === 3 ? -0 : 0);\n};\nm.modulo = m.mod = function(e) {\n    var r, t = this, n = t.constructor;\n    return e = new n(e), !t.d || !e.s || e.d && !e.d[0] ? new n(NaN) : !e.d || t.d && !t.d[0] ? y(new n(t), n.precision, n.rounding) : (w = !1, n.modulo == 9 ? (r = L(t, e.abs(), 0, 3, 1), r.s *= e.s) : r = L(t, e, 0, n.modulo, 1), r = r.times(e), w = !0, t.minus(r));\n};\nm.naturalExponential = m.exp = function() {\n    return Wi(this);\n};\nm.naturalLogarithm = m.ln = function() {\n    return Je(this);\n};\nm.negated = m.neg = function() {\n    var e = new this.constructor(this);\n    return e.s = -e.s, y(e);\n};\nm.plus = m.add = function(e) {\n    var r, t, n, i, o, s, a, l, u, c, p = this, d = p.constructor;\n    if (e = new d(e), !p.d || !e.d) return !p.s || !e.s ? e = new d(NaN) : p.d || (e = new d(e.d || p.s === e.s ? p : NaN)), e;\n    if (p.s != e.s) return e.s = -e.s, p.minus(e);\n    if (u = p.d, c = e.d, a = d.precision, l = d.rounding, !u[0] || !c[0]) return c[0] || (e = new d(p)), w ? y(e, a, l) : e;\n    if (o = X(p.e / E), n = X(e.e / E), u = u.slice(), i = o - n, i) {\n        for(i < 0 ? (t = u, i = -i, s = c.length) : (t = c, n = o, s = u.length), o = Math.ceil(a / E), s = o > s ? o + 1 : s + 1, i > s && (i = s, t.length = 1), t.reverse(); i--;)t.push(0);\n        t.reverse();\n    }\n    for(s = u.length, i = c.length, s - i < 0 && (i = s, t = c, c = u, u = t), r = 0; i;)r = (u[--i] = u[i] + c[i] + r) / fe | 0, u[i] %= fe;\n    for(r && (u.unshift(r), ++n), s = u.length; u[--s] == 0;)u.pop();\n    return e.d = u, e.e = bn(u, n), w ? y(e, a, l) : e;\n};\nm.precision = m.sd = function(e) {\n    var r, t = this;\n    if (e !== void 0 && e !== !!e && e !== 1 && e !== 0) throw Error(He + e);\n    return t.d ? (r = Ws(t.d), e && t.e + 1 > r && (r = t.e + 1)) : r = NaN, r;\n};\nm.round = function() {\n    var e = this, r = e.constructor;\n    return y(new r(e), e.e + 1, r.rounding);\n};\nm.sine = m.sin = function() {\n    var e, r, t = this, n = t.constructor;\n    return t.isFinite() ? t.isZero() ? new n(t) : (e = n.precision, r = n.rounding, n.precision = e + Math.max(t.e, t.sd()) + E, n.rounding = 1, t = Ip(n, Ys(n, t)), n.precision = e, n.rounding = r, y(Fe > 2 ? t.neg() : t, e, r, !0)) : new n(NaN);\n};\nm.squareRoot = m.sqrt = function() {\n    var e, r, t, n, i, o, s = this, a = s.d, l = s.e, u = s.s, c = s.constructor;\n    if (u !== 1 || !a || !a[0]) return new c(!u || u < 0 && (!a || a[0]) ? NaN : a ? s : 1 / 0);\n    for(w = !1, u = Math.sqrt(+s), u == 0 || u == 1 / 0 ? (r = J(a), (r.length + l) % 2 == 0 && (r += \"0\"), u = Math.sqrt(r), l = X((l + 1) / 2) - (l < 0 || l % 2), u == 1 / 0 ? r = \"5e\" + l : (r = u.toExponential(), r = r.slice(0, r.indexOf(\"e\") + 1) + l), n = new c(r)) : n = new c(u.toString()), t = (l = c.precision) + 3;;)if (o = n, n = o.plus(L(s, o, t + 2, 1)).times(.5), J(o.d).slice(0, t) === (r = J(n.d)).slice(0, t)) if (r = r.slice(t - 3, t + 1), r == \"9999\" || !i && r == \"4999\") {\n        if (!i && (y(o, l + 1, 0), o.times(o).eq(s))) {\n            n = o;\n            break;\n        }\n        t += 4, i = 1;\n    } else {\n        (!+r || !+r.slice(1) && r.charAt(0) == \"5\") && (y(n, l + 1, 1), e = !n.times(n).eq(s));\n        break;\n    }\n    return w = !0, y(n, l, c.rounding, e);\n};\nm.tangent = m.tan = function() {\n    var e, r, t = this, n = t.constructor;\n    return t.isFinite() ? t.isZero() ? new n(t) : (e = n.precision, r = n.rounding, n.precision = e + 10, n.rounding = 1, t = t.sin(), t.s = 1, t = L(t, new n(1).minus(t.times(t)).sqrt(), e + 10, 0), n.precision = e, n.rounding = r, y(Fe == 2 || Fe == 4 ? t.neg() : t, e, r, !0)) : new n(NaN);\n};\nm.times = m.mul = function(e) {\n    var r, t, n, i, o, s, a, l, u, c = this, p = c.constructor, d = c.d, f = (e = new p(e)).d;\n    if (e.s *= c.s, !d || !d[0] || !f || !f[0]) return new p(!e.s || d && !d[0] && !f || f && !f[0] && !d ? NaN : !d || !f ? e.s / 0 : e.s * 0);\n    for(t = X(c.e / E) + X(e.e / E), l = d.length, u = f.length, l < u && (o = d, d = f, f = o, s = l, l = u, u = s), o = [], s = l + u, n = s; n--;)o.push(0);\n    for(n = u; --n >= 0;){\n        for(r = 0, i = l + n; i > n;)a = o[i] + f[n] * d[i - n - 1] + r, o[i--] = a % fe | 0, r = a / fe | 0;\n        o[i] = (o[i] + r) % fe | 0;\n    }\n    for(; !o[--s];)o.pop();\n    return r ? ++t : o.shift(), e.d = o, e.e = bn(o, t), w ? y(e, p.precision, p.rounding) : e;\n};\nm.toBinary = function(e, r) {\n    return Ji(this, 2, e, r);\n};\nm.toDecimalPlaces = m.toDP = function(e, r) {\n    var t = this, n = t.constructor;\n    return t = new n(t), e === void 0 ? t : (ie(e, 0, Ke), r === void 0 ? r = n.rounding : ie(r, 0, 8), y(t, e + t.e + 1, r));\n};\nm.toExponential = function(e, r) {\n    var t, n = this, i = n.constructor;\n    return e === void 0 ? t = xe(n, !0) : (ie(e, 0, Ke), r === void 0 ? r = i.rounding : ie(r, 0, 8), n = y(new i(n), e + 1, r), t = xe(n, !0, e + 1)), n.isNeg() && !n.isZero() ? \"-\" + t : t;\n};\nm.toFixed = function(e, r) {\n    var t, n, i = this, o = i.constructor;\n    return e === void 0 ? t = xe(i) : (ie(e, 0, Ke), r === void 0 ? r = o.rounding : ie(r, 0, 8), n = y(new o(i), e + i.e + 1, r), t = xe(n, !1, e + n.e + 1)), i.isNeg() && !i.isZero() ? \"-\" + t : t;\n};\nm.toFraction = function(e) {\n    var r, t, n, i, o, s, a, l, u, c, p, d, f = this, h = f.d, g = f.constructor;\n    if (!h) return new g(f);\n    if (u = t = new g(1), n = l = new g(0), r = new g(n), o = r.e = Ws(h) - f.e - 1, s = o % E, r.d[0] = U(10, s < 0 ? E + s : s), e == null) e = o > 0 ? r : u;\n    else {\n        if (a = new g(e), !a.isInt() || a.lt(u)) throw Error(He + a);\n        e = a.gt(r) ? o > 0 ? r : u : a;\n    }\n    for(w = !1, a = new g(J(h)), c = g.precision, g.precision = o = h.length * E * 2; p = L(a, r, 0, 1, 1), i = t.plus(p.times(n)), i.cmp(e) != 1;)t = n, n = i, i = u, u = l.plus(p.times(i)), l = i, i = r, r = a.minus(p.times(i)), a = i;\n    return i = L(e.minus(t), n, 0, 1, 1), l = l.plus(i.times(u)), t = t.plus(i.times(n)), l.s = u.s = f.s, d = L(u, n, o, 1).minus(f).abs().cmp(L(l, t, o, 1).minus(f).abs()) < 1 ? [\n        u,\n        n\n    ] : [\n        l,\n        t\n    ], g.precision = c, w = !0, d;\n};\nm.toHexadecimal = m.toHex = function(e, r) {\n    return Ji(this, 16, e, r);\n};\nm.toNearest = function(e, r) {\n    var t = this, n = t.constructor;\n    if (t = new n(t), e == null) {\n        if (!t.d) return t;\n        e = new n(1), r = n.rounding;\n    } else {\n        if (e = new n(e), r === void 0 ? r = n.rounding : ie(r, 0, 8), !t.d) return e.s ? t : e;\n        if (!e.d) return e.s && (e.s = t.s), e;\n    }\n    return e.d[0] ? (w = !1, t = L(t, e, 0, r, 1).times(e), w = !0, y(t)) : (e.s = t.s, t = e), t;\n};\nm.toNumber = function() {\n    return +this;\n};\nm.toOctal = function(e, r) {\n    return Ji(this, 8, e, r);\n};\nm.toPower = m.pow = function(e) {\n    var r, t, n, i, o, s, a = this, l = a.constructor, u = +(e = new l(e));\n    if (!a.d || !e.d || !a.d[0] || !e.d[0]) return new l(U(+a, u));\n    if (a = new l(a), a.eq(1)) return a;\n    if (n = l.precision, o = l.rounding, e.eq(1)) return y(a, n, o);\n    if (r = X(e.e / E), r >= e.d.length - 1 && (t = u < 0 ? -u : u) <= Sp) return i = Js(l, a, t, n), e.s < 0 ? new l(1).div(i) : y(i, n, o);\n    if (s = a.s, s < 0) {\n        if (r < e.d.length - 1) return new l(NaN);\n        if ((e.d[r] & 1) == 0 && (s = 1), a.e == 0 && a.d[0] == 1 && a.d.length == 1) return a.s = s, a;\n    }\n    return t = U(+a, u), r = t == 0 || !isFinite(t) ? X(u * (Math.log(\"0.\" + J(a.d)) / Math.LN10 + a.e + 1)) : new l(t + \"\").e, r > l.maxE + 1 || r < l.minE - 1 ? new l(r > 0 ? s / 0 : 0) : (w = !1, l.rounding = a.s = 1, t = Math.min(12, (r + \"\").length), i = Wi(e.times(Je(a, n + t)), n), i.d && (i = y(i, n + 5, 1), lt(i.d, n, o) && (r = n + 10, i = y(Wi(e.times(Je(a, r + t)), r), r + 5, 1), +J(i.d).slice(n + 1, n + 15) + 1 == 1e14 && (i = y(i, n + 1, 0)))), i.s = s, w = !0, l.rounding = o, y(i, n, o));\n};\nm.toPrecision = function(e, r) {\n    var t, n = this, i = n.constructor;\n    return e === void 0 ? t = xe(n, n.e <= i.toExpNeg || n.e >= i.toExpPos) : (ie(e, 1, Ke), r === void 0 ? r = i.rounding : ie(r, 0, 8), n = y(new i(n), e, r), t = xe(n, e <= n.e || n.e <= i.toExpNeg, e)), n.isNeg() && !n.isZero() ? \"-\" + t : t;\n};\nm.toSignificantDigits = m.toSD = function(e, r) {\n    var t = this, n = t.constructor;\n    return e === void 0 ? (e = n.precision, r = n.rounding) : (ie(e, 1, Ke), r === void 0 ? r = n.rounding : ie(r, 0, 8)), y(new n(t), e, r);\n};\nm.toString = function() {\n    var e = this, r = e.constructor, t = xe(e, e.e <= r.toExpNeg || e.e >= r.toExpPos);\n    return e.isNeg() && !e.isZero() ? \"-\" + t : t;\n};\nm.truncated = m.trunc = function() {\n    return y(new this.constructor(this), this.e + 1, 1);\n};\nm.valueOf = m.toJSON = function() {\n    var e = this, r = e.constructor, t = xe(e, e.e <= r.toExpNeg || e.e >= r.toExpPos);\n    return e.isNeg() ? \"-\" + t : t;\n};\nfunction J(e) {\n    var r, t, n, i = e.length - 1, o = \"\", s = e[0];\n    if (i > 0) {\n        for(o += s, r = 1; r < i; r++)n = e[r] + \"\", t = E - n.length, t && (o += We(t)), o += n;\n        s = e[r], n = s + \"\", t = E - n.length, t && (o += We(t));\n    } else if (s === 0) return \"0\";\n    for(; s % 10 === 0;)s /= 10;\n    return o + s;\n}\nfunction ie(e, r, t) {\n    if (e !== ~~e || e < r || e > t) throw Error(He + e);\n}\nfunction lt(e, r, t, n) {\n    var i, o, s, a;\n    for(o = e[0]; o >= 10; o /= 10)--r;\n    return --r < 0 ? (r += E, i = 0) : (i = Math.ceil((r + 1) / E), r %= E), o = U(10, E - r), a = e[i] % o | 0, n == null ? r < 3 ? (r == 0 ? a = a / 100 | 0 : r == 1 && (a = a / 10 | 0), s = t < 4 && a == 99999 || t > 3 && a == 49999 || a == 5e4 || a == 0) : s = (t < 4 && a + 1 == o || t > 3 && a + 1 == o / 2) && (e[i + 1] / o / 100 | 0) == U(10, r - 2) - 1 || (a == o / 2 || a == 0) && (e[i + 1] / o / 100 | 0) == 0 : r < 4 ? (r == 0 ? a = a / 1e3 | 0 : r == 1 ? a = a / 100 | 0 : r == 2 && (a = a / 10 | 0), s = (n || t < 4) && a == 9999 || !n && t > 3 && a == 4999) : s = ((n || t < 4) && a + 1 == o || !n && t > 3 && a + 1 == o / 2) && (e[i + 1] / o / 1e3 | 0) == U(10, r - 3) - 1, s;\n}\nfunction dn(e, r, t) {\n    for(var n, i = [\n        0\n    ], o, s = 0, a = e.length; s < a;){\n        for(o = i.length; o--;)i[o] *= r;\n        for(i[0] += Ui.indexOf(e.charAt(s++)), n = 0; n < i.length; n++)i[n] > t - 1 && (i[n + 1] === void 0 && (i[n + 1] = 0), i[n + 1] += i[n] / t | 0, i[n] %= t);\n    }\n    return i.reverse();\n}\nfunction Ap(e, r) {\n    var t, n, i;\n    if (r.isZero()) return r;\n    n = r.d.length, n < 32 ? (t = Math.ceil(n / 3), i = (1 / En(4, t)).toString()) : (t = 16, i = \"2.3283064365386962890625e-10\"), e.precision += t, r = Pr(e, 1, r.times(i), new e(1));\n    for(var o = t; o--;){\n        var s = r.times(r);\n        r = s.times(s).minus(s).times(8).plus(1);\n    }\n    return e.precision -= t, r;\n}\nvar L = function() {\n    function e(n, i, o) {\n        var s, a = 0, l = n.length;\n        for(n = n.slice(); l--;)s = n[l] * i + a, n[l] = s % o | 0, a = s / o | 0;\n        return a && n.unshift(a), n;\n    }\n    function r(n, i, o, s) {\n        var a, l;\n        if (o != s) l = o > s ? 1 : -1;\n        else for(a = l = 0; a < o; a++)if (n[a] != i[a]) {\n            l = n[a] > i[a] ? 1 : -1;\n            break;\n        }\n        return l;\n    }\n    function t(n, i, o, s) {\n        for(var a = 0; o--;)n[o] -= a, a = n[o] < i[o] ? 1 : 0, n[o] = a * s + n[o] - i[o];\n        for(; !n[0] && n.length > 1;)n.shift();\n    }\n    return function(n, i, o, s, a, l) {\n        var u, c, p, d, f, h, g, S, P, R, b, D, me, ae, Hr, V, te, Ce, H, fr, jt = n.constructor, ni = n.s == i.s ? 1 : -1, K = n.d, _ = i.d;\n        if (!K || !K[0] || !_ || !_[0]) return new jt(!n.s || !i.s || (K ? _ && K[0] == _[0] : !_) ? NaN : K && K[0] == 0 || !_ ? ni * 0 : ni / 0);\n        for(l ? (f = 1, c = n.e - i.e) : (l = fe, f = E, c = X(n.e / f) - X(i.e / f)), H = _.length, te = K.length, P = new jt(ni), R = P.d = [], p = 0; _[p] == (K[p] || 0); p++);\n        if (_[p] > (K[p] || 0) && c--, o == null ? (ae = o = jt.precision, s = jt.rounding) : a ? ae = o + (n.e - i.e) + 1 : ae = o, ae < 0) R.push(1), h = !0;\n        else {\n            if (ae = ae / f + 2 | 0, p = 0, H == 1) {\n                for(d = 0, _ = _[0], ae++; (p < te || d) && ae--; p++)Hr = d * l + (K[p] || 0), R[p] = Hr / _ | 0, d = Hr % _ | 0;\n                h = d || p < te;\n            } else {\n                for(d = l / (_[0] + 1) | 0, d > 1 && (_ = e(_, d, l), K = e(K, d, l), H = _.length, te = K.length), V = H, b = K.slice(0, H), D = b.length; D < H;)b[D++] = 0;\n                fr = _.slice(), fr.unshift(0), Ce = _[0], _[1] >= l / 2 && ++Ce;\n                do d = 0, u = r(_, b, H, D), u < 0 ? (me = b[0], H != D && (me = me * l + (b[1] || 0)), d = me / Ce | 0, d > 1 ? (d >= l && (d = l - 1), g = e(_, d, l), S = g.length, D = b.length, u = r(g, b, S, D), u == 1 && (d--, t(g, H < S ? fr : _, S, l))) : (d == 0 && (u = d = 1), g = _.slice()), S = g.length, S < D && g.unshift(0), t(b, g, D, l), u == -1 && (D = b.length, u = r(_, b, H, D), u < 1 && (d++, t(b, H < D ? fr : _, D, l))), D = b.length) : u === 0 && (d++, b = [\n                    0\n                ]), R[p++] = d, u && b[0] ? b[D++] = K[V] || 0 : (b = [\n                    K[V]\n                ], D = 1);\n                while ((V++ < te || b[0] !== void 0) && ae--);\n                h = b[0] !== void 0;\n            }\n            R[0] || R.shift();\n        }\n        if (f == 1) P.e = c, Vs = h;\n        else {\n            for(p = 1, d = R[0]; d >= 10; d /= 10)p++;\n            P.e = p + c * f - 1, y(P, a ? o + P.e + 1 : o, s, h);\n        }\n        return P;\n    };\n}();\nfunction y(e, r, t, n) {\n    var i, o, s, a, l, u, c, p, d, f = e.constructor;\n    e: if (r != null) {\n        if (p = e.d, !p) return e;\n        for(i = 1, a = p[0]; a >= 10; a /= 10)i++;\n        if (o = r - i, o < 0) o += E, s = r, c = p[d = 0], l = c / U(10, i - s - 1) % 10 | 0;\n        else if (d = Math.ceil((o + 1) / E), a = p.length, d >= a) if (n) {\n            for(; a++ <= d;)p.push(0);\n            c = l = 0, i = 1, o %= E, s = o - E + 1;\n        } else break e;\n        else {\n            for(c = a = p[d], i = 1; a >= 10; a /= 10)i++;\n            o %= E, s = o - E + i, l = s < 0 ? 0 : c / U(10, i - s - 1) % 10 | 0;\n        }\n        if (n = n || r < 0 || p[d + 1] !== void 0 || (s < 0 ? c : c % U(10, i - s - 1)), u = t < 4 ? (l || n) && (t == 0 || t == (e.s < 0 ? 3 : 2)) : l > 5 || l == 5 && (t == 4 || n || t == 6 && (o > 0 ? s > 0 ? c / U(10, i - s) : 0 : p[d - 1]) % 10 & 1 || t == (e.s < 0 ? 8 : 7)), r < 1 || !p[0]) return p.length = 0, u ? (r -= e.e + 1, p[0] = U(10, (E - r % E) % E), e.e = -r || 0) : p[0] = e.e = 0, e;\n        if (o == 0 ? (p.length = d, a = 1, d--) : (p.length = d + 1, a = U(10, E - o), p[d] = s > 0 ? (c / U(10, i - s) % U(10, s) | 0) * a : 0), u) for(;;)if (d == 0) {\n            for(o = 1, s = p[0]; s >= 10; s /= 10)o++;\n            for(s = p[0] += a, a = 1; s >= 10; s /= 10)a++;\n            o != a && (e.e++, p[0] == fe && (p[0] = 1));\n            break;\n        } else {\n            if (p[d] += a, p[d] != fe) break;\n            p[d--] = 0, a = 1;\n        }\n        for(o = p.length; p[--o] === 0;)p.pop();\n    }\n    return w && (e.e > f.maxE ? (e.d = null, e.e = NaN) : e.e < f.minE && (e.e = 0, e.d = [\n        0\n    ])), e;\n}\nfunction xe(e, r, t) {\n    if (!e.isFinite()) return Ks(e);\n    var n, i = e.e, o = J(e.d), s = o.length;\n    return r ? (t && (n = t - s) > 0 ? o = o.charAt(0) + \".\" + o.slice(1) + We(n) : s > 1 && (o = o.charAt(0) + \".\" + o.slice(1)), o = o + (e.e < 0 ? \"e\" : \"e+\") + e.e) : i < 0 ? (o = \"0.\" + We(-i - 1) + o, t && (n = t - s) > 0 && (o += We(n))) : i >= s ? (o += We(i + 1 - s), t && (n = t - i - 1) > 0 && (o = o + \".\" + We(n))) : ((n = i + 1) < s && (o = o.slice(0, n) + \".\" + o.slice(n)), t && (n = t - s) > 0 && (i + 1 === s && (o += \".\"), o += We(n))), o;\n}\nfunction bn(e, r) {\n    var t = e[0];\n    for(r *= E; t >= 10; t /= 10)r++;\n    return r;\n}\nfunction hn(e, r, t) {\n    if (r > Rp) throw w = !0, t && (e.precision = t), Error(Bs);\n    return y(new e(fn), r, 1, !0);\n}\nfunction we(e, r, t) {\n    if (r > Qi) throw Error(Bs);\n    return y(new e(gn), r, t, !0);\n}\nfunction Ws(e) {\n    var r = e.length - 1, t = r * E + 1;\n    if (r = e[r], r) {\n        for(; r % 10 == 0; r /= 10)t--;\n        for(r = e[0]; r >= 10; r /= 10)t++;\n    }\n    return t;\n}\nfunction We(e) {\n    for(var r = \"\"; e--;)r += \"0\";\n    return r;\n}\nfunction Js(e, r, t, n) {\n    var i, o = new e(1), s = Math.ceil(n / E + 4);\n    for(w = !1;;){\n        if (t % 2 && (o = o.times(r), qs(o.d, s) && (i = !0)), t = X(t / 2), t === 0) {\n            t = o.d.length - 1, i && o.d[t] === 0 && ++o.d[t];\n            break;\n        }\n        r = r.times(r), qs(r.d, s);\n    }\n    return w = !0, o;\n}\nfunction $s(e) {\n    return e.d[e.d.length - 1] & 1;\n}\nfunction Hs(e, r, t) {\n    for(var n, i, o = new e(r[0]), s = 0; ++s < r.length;){\n        if (i = new e(r[s]), !i.s) {\n            o = i;\n            break;\n        }\n        n = o.cmp(i), (n === t || n === 0 && o.s === t) && (o = i);\n    }\n    return o;\n}\nfunction Wi(e, r) {\n    var t, n, i, o, s, a, l, u = 0, c = 0, p = 0, d = e.constructor, f = d.rounding, h = d.precision;\n    if (!e.d || !e.d[0] || e.e > 17) return new d(e.d ? e.d[0] ? e.s < 0 ? 0 : 1 / 0 : 1 : e.s ? e.s < 0 ? 0 : e : NaN);\n    for(r == null ? (w = !1, l = h) : l = r, a = new d(.03125); e.e > -2;)e = e.times(a), p += 5;\n    for(n = Math.log(U(2, p)) / Math.LN10 * 2 + 5 | 0, l += n, t = o = s = new d(1), d.precision = l;;){\n        if (o = y(o.times(e), l, 1), t = t.times(++c), a = s.plus(L(o, t, l, 1)), J(a.d).slice(0, l) === J(s.d).slice(0, l)) {\n            for(i = p; i--;)s = y(s.times(s), l, 1);\n            if (r == null) if (u < 3 && lt(s.d, l - n, f, u)) d.precision = l += 10, t = o = a = new d(1), c = 0, u++;\n            else return y(s, d.precision = h, f, w = !0);\n            else return d.precision = h, s;\n        }\n        s = a;\n    }\n}\nfunction Je(e, r) {\n    var t, n, i, o, s, a, l, u, c, p, d, f = 1, h = 10, g = e, S = g.d, P = g.constructor, R = P.rounding, b = P.precision;\n    if (g.s < 0 || !S || !S[0] || !g.e && S[0] == 1 && S.length == 1) return new P(S && !S[0] ? -1 / 0 : g.s != 1 ? NaN : S ? 0 : g);\n    if (r == null ? (w = !1, c = b) : c = r, P.precision = c += h, t = J(S), n = t.charAt(0), Math.abs(o = g.e) < 15e14) {\n        for(; n < 7 && n != 1 || n == 1 && t.charAt(1) > 3;)g = g.times(e), t = J(g.d), n = t.charAt(0), f++;\n        o = g.e, n > 1 ? (g = new P(\"0.\" + t), o++) : g = new P(n + \".\" + t.slice(1));\n    } else return u = hn(P, c + 2, b).times(o + \"\"), g = Je(new P(n + \".\" + t.slice(1)), c - h).plus(u), P.precision = b, r == null ? y(g, b, R, w = !0) : g;\n    for(p = g, l = s = g = L(g.minus(1), g.plus(1), c, 1), d = y(g.times(g), c, 1), i = 3;;){\n        if (s = y(s.times(d), c, 1), u = l.plus(L(s, new P(i), c, 1)), J(u.d).slice(0, c) === J(l.d).slice(0, c)) if (l = l.times(2), o !== 0 && (l = l.plus(hn(P, c + 2, b).times(o + \"\"))), l = L(l, new P(f), c, 1), r == null) if (lt(l.d, c - h, R, a)) P.precision = c += h, u = s = g = L(p.minus(1), p.plus(1), c, 1), d = y(g.times(g), c, 1), i = a = 1;\n        else return y(l, P.precision = b, R, w = !0);\n        else return P.precision = b, l;\n        l = u, i += 2;\n    }\n}\nfunction Ks(e) {\n    return String(e.s * e.s / 0);\n}\nfunction mn(e, r) {\n    var t, n, i;\n    for((t = r.indexOf(\".\")) > -1 && (r = r.replace(\".\", \"\")), (n = r.search(/e/i)) > 0 ? (t < 0 && (t = n), t += +r.slice(n + 1), r = r.substring(0, n)) : t < 0 && (t = r.length), n = 0; r.charCodeAt(n) === 48; n++);\n    for(i = r.length; r.charCodeAt(i - 1) === 48; --i);\n    if (r = r.slice(n, i), r) {\n        if (i -= n, e.e = t = t - n - 1, e.d = [], n = (t + 1) % E, t < 0 && (n += E), n < i) {\n            for(n && e.d.push(+r.slice(0, n)), i -= E; n < i;)e.d.push(+r.slice(n, n += E));\n            r = r.slice(n), n = E - r.length;\n        } else n -= i;\n        for(; n--;)r += \"0\";\n        e.d.push(+r), w && (e.e > e.constructor.maxE ? (e.d = null, e.e = NaN) : e.e < e.constructor.minE && (e.e = 0, e.d = [\n            0\n        ]));\n    } else e.e = 0, e.d = [\n        0\n    ];\n    return e;\n}\nfunction Cp(e, r) {\n    var t, n, i, o, s, a, l, u, c;\n    if (r.indexOf(\"_\") > -1) {\n        if (r = r.replace(/(\\d)_(?=\\d)/g, \"$1\"), Qs.test(r)) return mn(e, r);\n    } else if (r === \"Infinity\" || r === \"NaN\") return +r || (e.s = NaN), e.e = NaN, e.d = null, e;\n    if (Pp.test(r)) t = 16, r = r.toLowerCase();\n    else if (vp.test(r)) t = 2;\n    else if (Tp.test(r)) t = 8;\n    else throw Error(He + r);\n    for(o = r.search(/p/i), o > 0 ? (l = +r.slice(o + 1), r = r.substring(2, o)) : r = r.slice(2), o = r.indexOf(\".\"), s = o >= 0, n = e.constructor, s && (r = r.replace(\".\", \"\"), a = r.length, o = a - o, i = Js(n, new n(t), o, o * 2)), u = dn(r, t, fe), c = u.length - 1, o = c; u[o] === 0; --o)u.pop();\n    return o < 0 ? new n(e.s * 0) : (e.e = bn(u, c), e.d = u, w = !1, s && (e = L(e, i, a * 4)), l && (e = e.times(Math.abs(l) < 54 ? U(2, l) : ar.pow(2, l))), w = !0, e);\n}\nfunction Ip(e, r) {\n    var t, n = r.d.length;\n    if (n < 3) return r.isZero() ? r : Pr(e, 2, r, r);\n    t = 1.4 * Math.sqrt(n), t = t > 16 ? 16 : t | 0, r = r.times(1 / En(5, t)), r = Pr(e, 2, r, r);\n    for(var i, o = new e(5), s = new e(16), a = new e(20); t--;)i = r.times(r), r = r.times(o.plus(i.times(s.times(i).minus(a))));\n    return r;\n}\nfunction Pr(e, r, t, n, i) {\n    var o, s, a, l, u = 1, c = e.precision, p = Math.ceil(c / E);\n    for(w = !1, l = t.times(t), a = new e(n);;){\n        if (s = L(a.times(l), new e(r++ * r++), c, 1), a = i ? n.plus(s) : n.minus(s), n = L(s.times(l), new e(r++ * r++), c, 1), s = a.plus(n), s.d[p] !== void 0) {\n            for(o = p; s.d[o] === a.d[o] && o--;);\n            if (o == -1) break;\n        }\n        o = a, a = n, n = s, s = o, u++;\n    }\n    return w = !0, s.d.length = p + 1, s;\n}\nfunction En(e, r) {\n    for(var t = e; --r;)t *= e;\n    return t;\n}\nfunction Ys(e, r) {\n    var t, n = r.s < 0, i = we(e, e.precision, 1), o = i.times(.5);\n    if (r = r.abs(), r.lte(o)) return Fe = n ? 4 : 1, r;\n    if (t = r.divToInt(i), t.isZero()) Fe = n ? 3 : 2;\n    else {\n        if (r = r.minus(t.times(i)), r.lte(o)) return Fe = $s(t) ? n ? 2 : 3 : n ? 4 : 1, r;\n        Fe = $s(t) ? n ? 1 : 4 : n ? 3 : 2;\n    }\n    return r.minus(i).abs();\n}\nfunction Ji(e, r, t, n) {\n    var i, o, s, a, l, u, c, p, d, f = e.constructor, h = t !== void 0;\n    if (h ? (ie(t, 1, Ke), n === void 0 ? n = f.rounding : ie(n, 0, 8)) : (t = f.precision, n = f.rounding), !e.isFinite()) c = Ks(e);\n    else {\n        for(c = xe(e), s = c.indexOf(\".\"), h ? (i = 2, r == 16 ? t = t * 4 - 3 : r == 8 && (t = t * 3 - 2)) : i = r, s >= 0 && (c = c.replace(\".\", \"\"), d = new f(1), d.e = c.length - s, d.d = dn(xe(d), 10, i), d.e = d.d.length), p = dn(c, 10, i), o = l = p.length; p[--l] == 0;)p.pop();\n        if (!p[0]) c = h ? \"0p+0\" : \"0\";\n        else {\n            if (s < 0 ? o-- : (e = new f(e), e.d = p, e.e = o, e = L(e, d, t, n, 0, i), p = e.d, o = e.e, u = Vs), s = p[t], a = i / 2, u = u || p[t + 1] !== void 0, u = n < 4 ? (s !== void 0 || u) && (n === 0 || n === (e.s < 0 ? 3 : 2)) : s > a || s === a && (n === 4 || u || n === 6 && p[t - 1] & 1 || n === (e.s < 0 ? 8 : 7)), p.length = t, u) for(; ++p[--t] > i - 1;)p[t] = 0, t || (++o, p.unshift(1));\n            for(l = p.length; !p[l - 1]; --l);\n            for(s = 0, c = \"\"; s < l; s++)c += Ui.charAt(p[s]);\n            if (h) {\n                if (l > 1) if (r == 16 || r == 8) {\n                    for(s = r == 16 ? 4 : 3, --l; l % s; l++)c += \"0\";\n                    for(p = dn(c, i, r), l = p.length; !p[l - 1]; --l);\n                    for(s = 1, c = \"1.\"; s < l; s++)c += Ui.charAt(p[s]);\n                } else c = c.charAt(0) + \".\" + c.slice(1);\n                c = c + (o < 0 ? \"p\" : \"p+\") + o;\n            } else if (o < 0) {\n                for(; ++o;)c = \"0\" + c;\n                c = \"0.\" + c;\n            } else if (++o > l) for(o -= l; o--;)c += \"0\";\n            else o < l && (c = c.slice(0, o) + \".\" + c.slice(o));\n        }\n        c = (r == 16 ? \"0x\" : r == 2 ? \"0b\" : r == 8 ? \"0o\" : \"\") + c;\n    }\n    return e.s < 0 ? \"-\" + c : c;\n}\nfunction qs(e, r) {\n    if (e.length > r) return e.length = r, !0;\n}\nfunction kp(e) {\n    return new this(e).abs();\n}\nfunction Dp(e) {\n    return new this(e).acos();\n}\nfunction Op(e) {\n    return new this(e).acosh();\n}\nfunction _p(e, r) {\n    return new this(e).plus(r);\n}\nfunction Np(e) {\n    return new this(e).asin();\n}\nfunction Lp(e) {\n    return new this(e).asinh();\n}\nfunction Fp(e) {\n    return new this(e).atan();\n}\nfunction Mp(e) {\n    return new this(e).atanh();\n}\nfunction $p(e, r) {\n    e = new this(e), r = new this(r);\n    var t, n = this.precision, i = this.rounding, o = n + 4;\n    return !e.s || !r.s ? t = new this(NaN) : !e.d && !r.d ? (t = we(this, o, 1).times(r.s > 0 ? .25 : .75), t.s = e.s) : !r.d || e.isZero() ? (t = r.s < 0 ? we(this, n, i) : new this(0), t.s = e.s) : !e.d || r.isZero() ? (t = we(this, o, 1).times(.5), t.s = e.s) : r.s < 0 ? (this.precision = o, this.rounding = 1, t = this.atan(L(e, r, o, 1)), r = we(this, o, 1), this.precision = n, this.rounding = i, t = e.s < 0 ? t.minus(r) : t.plus(r)) : t = this.atan(L(e, r, o, 1)), t;\n}\nfunction qp(e) {\n    return new this(e).cbrt();\n}\nfunction jp(e) {\n    return y(e = new this(e), e.e + 1, 2);\n}\nfunction Vp(e, r, t) {\n    return new this(e).clamp(r, t);\n}\nfunction Bp(e) {\n    if (!e || typeof e != \"object\") throw Error(yn + \"Object expected\");\n    var r, t, n, i = e.defaults === !0, o = [\n        \"precision\",\n        1,\n        Ke,\n        \"rounding\",\n        0,\n        8,\n        \"toExpNeg\",\n        -vr,\n        0,\n        \"toExpPos\",\n        0,\n        vr,\n        \"maxE\",\n        0,\n        vr,\n        \"minE\",\n        -vr,\n        0,\n        \"modulo\",\n        0,\n        9\n    ];\n    for(r = 0; r < o.length; r += 3)if (t = o[r], i && (this[t] = Gi[t]), (n = e[t]) !== void 0) if (X(n) === n && n >= o[r + 1] && n <= o[r + 2]) this[t] = n;\n    else throw Error(He + t + \": \" + n);\n    if (t = \"crypto\", i && (this[t] = Gi[t]), (n = e[t]) !== void 0) if (n === !0 || n === !1 || n === 0 || n === 1) if (n) if (typeof crypto < \"u\" && crypto && (crypto.getRandomValues || crypto.randomBytes)) this[t] = !0;\n    else throw Error(Us);\n    else this[t] = !1;\n    else throw Error(He + t + \": \" + n);\n    return this;\n}\nfunction Up(e) {\n    return new this(e).cos();\n}\nfunction Gp(e) {\n    return new this(e).cosh();\n}\nfunction zs(e) {\n    var r, t, n;\n    function i(o) {\n        var s, a, l, u = this;\n        if (!(u instanceof i)) return new i(o);\n        if (u.constructor = i, js(o)) {\n            u.s = o.s, w ? !o.d || o.e > i.maxE ? (u.e = NaN, u.d = null) : o.e < i.minE ? (u.e = 0, u.d = [\n                0\n            ]) : (u.e = o.e, u.d = o.d.slice()) : (u.e = o.e, u.d = o.d ? o.d.slice() : o.d);\n            return;\n        }\n        if (l = typeof o, l === \"number\") {\n            if (o === 0) {\n                u.s = 1 / o < 0 ? -1 : 1, u.e = 0, u.d = [\n                    0\n                ];\n                return;\n            }\n            if (o < 0 ? (o = -o, u.s = -1) : u.s = 1, o === ~~o && o < 1e7) {\n                for(s = 0, a = o; a >= 10; a /= 10)s++;\n                w ? s > i.maxE ? (u.e = NaN, u.d = null) : s < i.minE ? (u.e = 0, u.d = [\n                    0\n                ]) : (u.e = s, u.d = [\n                    o\n                ]) : (u.e = s, u.d = [\n                    o\n                ]);\n                return;\n            }\n            if (o * 0 !== 0) {\n                o || (u.s = NaN), u.e = NaN, u.d = null;\n                return;\n            }\n            return mn(u, o.toString());\n        }\n        if (l === \"string\") return (a = o.charCodeAt(0)) === 45 ? (o = o.slice(1), u.s = -1) : (a === 43 && (o = o.slice(1)), u.s = 1), Qs.test(o) ? mn(u, o) : Cp(u, o);\n        if (l === \"bigint\") return o < 0 ? (o = -o, u.s = -1) : u.s = 1, mn(u, o.toString());\n        throw Error(He + o);\n    }\n    if (i.prototype = m, i.ROUND_UP = 0, i.ROUND_DOWN = 1, i.ROUND_CEIL = 2, i.ROUND_FLOOR = 3, i.ROUND_HALF_UP = 4, i.ROUND_HALF_DOWN = 5, i.ROUND_HALF_EVEN = 6, i.ROUND_HALF_CEIL = 7, i.ROUND_HALF_FLOOR = 8, i.EUCLID = 9, i.config = i.set = Bp, i.clone = zs, i.isDecimal = js, i.abs = kp, i.acos = Dp, i.acosh = Op, i.add = _p, i.asin = Np, i.asinh = Lp, i.atan = Fp, i.atanh = Mp, i.atan2 = $p, i.cbrt = qp, i.ceil = jp, i.clamp = Vp, i.cos = Up, i.cosh = Gp, i.div = Qp, i.exp = Wp, i.floor = Jp, i.hypot = Hp, i.ln = Kp, i.log = Yp, i.log10 = Zp, i.log2 = zp, i.max = Xp, i.min = ed, i.mod = rd, i.mul = td, i.pow = nd, i.random = id, i.round = od, i.sign = sd, i.sin = ad, i.sinh = ld, i.sqrt = ud, i.sub = cd, i.sum = pd, i.tan = dd, i.tanh = md, i.trunc = fd, e === void 0 && (e = {}), e && e.defaults !== !0) for(n = [\n        \"precision\",\n        \"rounding\",\n        \"toExpNeg\",\n        \"toExpPos\",\n        \"maxE\",\n        \"minE\",\n        \"modulo\",\n        \"crypto\"\n    ], r = 0; r < n.length;)e.hasOwnProperty(t = n[r++]) || (e[t] = this[t]);\n    return i.config(e), i;\n}\nfunction Qp(e, r) {\n    return new this(e).div(r);\n}\nfunction Wp(e) {\n    return new this(e).exp();\n}\nfunction Jp(e) {\n    return y(e = new this(e), e.e + 1, 3);\n}\nfunction Hp() {\n    var e, r, t = new this(0);\n    for(w = !1, e = 0; e < arguments.length;)if (r = new this(arguments[e++]), r.d) t.d && (t = t.plus(r.times(r)));\n    else {\n        if (r.s) return w = !0, new this(1 / 0);\n        t = r;\n    }\n    return w = !0, t.sqrt();\n}\nfunction js(e) {\n    return e instanceof ar || e && e.toStringTag === Gs || !1;\n}\nfunction Kp(e) {\n    return new this(e).ln();\n}\nfunction Yp(e, r) {\n    return new this(e).log(r);\n}\nfunction zp(e) {\n    return new this(e).log(2);\n}\nfunction Zp(e) {\n    return new this(e).log(10);\n}\nfunction Xp() {\n    return Hs(this, arguments, -1);\n}\nfunction ed() {\n    return Hs(this, arguments, 1);\n}\nfunction rd(e, r) {\n    return new this(e).mod(r);\n}\nfunction td(e, r) {\n    return new this(e).mul(r);\n}\nfunction nd(e, r) {\n    return new this(e).pow(r);\n}\nfunction id(e) {\n    var r, t, n, i, o = 0, s = new this(1), a = [];\n    if (e === void 0 ? e = this.precision : ie(e, 1, Ke), n = Math.ceil(e / E), this.crypto) if (crypto.getRandomValues) for(r = crypto.getRandomValues(new Uint32Array(n)); o < n;)i = r[o], i >= 429e7 ? r[o] = crypto.getRandomValues(new Uint32Array(1))[0] : a[o++] = i % 1e7;\n    else if (crypto.randomBytes) {\n        for(r = crypto.randomBytes(n *= 4); o < n;)i = r[o] + (r[o + 1] << 8) + (r[o + 2] << 16) + ((r[o + 3] & 127) << 24), i >= 214e7 ? crypto.randomBytes(4).copy(r, o) : (a.push(i % 1e7), o += 4);\n        o = n / 4;\n    } else throw Error(Us);\n    else for(; o < n;)a[o++] = Math.random() * 1e7 | 0;\n    for(n = a[--o], e %= E, n && e && (i = U(10, E - e), a[o] = (n / i | 0) * i); a[o] === 0; o--)a.pop();\n    if (o < 0) t = 0, a = [\n        0\n    ];\n    else {\n        for(t = -1; a[0] === 0; t -= E)a.shift();\n        for(n = 1, i = a[0]; i >= 10; i /= 10)n++;\n        n < E && (t -= E - n);\n    }\n    return s.e = t, s.d = a, s;\n}\nfunction od(e) {\n    return y(e = new this(e), e.e + 1, this.rounding);\n}\nfunction sd(e) {\n    return e = new this(e), e.d ? e.d[0] ? e.s : 0 * e.s : e.s || NaN;\n}\nfunction ad(e) {\n    return new this(e).sin();\n}\nfunction ld(e) {\n    return new this(e).sinh();\n}\nfunction ud(e) {\n    return new this(e).sqrt();\n}\nfunction cd(e, r) {\n    return new this(e).sub(r);\n}\nfunction pd() {\n    var e = 0, r = arguments, t = new this(r[e]);\n    for(w = !1; t.s && ++e < r.length;)t = t.plus(r[e]);\n    return w = !0, y(t, this.precision, this.rounding);\n}\nfunction dd(e) {\n    return new this(e).tan();\n}\nfunction md(e) {\n    return new this(e).tanh();\n}\nfunction fd(e) {\n    return y(e = new this(e), e.e + 1, 1);\n}\nm[Symbol.for(\"nodejs.util.inspect.custom\")] = m.toString;\nm[Symbol.toStringTag] = \"Decimal\";\nvar ar = m.constructor = zs(Gi);\nfn = new ar(fn);\ngn = new ar(gn);\nvar ve = ar;\nfunction Tr(e) {\n    return e === null ? e : Array.isArray(e) ? e.map(Tr) : typeof e == \"object\" ? gd(e) ? hd(e) : e.constructor !== null && e.constructor.name !== \"Object\" ? e : xr(e, Tr) : e;\n}\nfunction gd(e) {\n    return e !== null && typeof e == \"object\" && typeof e.$type == \"string\";\n}\nfunction hd({ $type: e, value: r }) {\n    switch(e){\n        case \"BigInt\":\n            return BigInt(r);\n        case \"Bytes\":\n            {\n                let { buffer: t, byteOffset: n, byteLength: i } = Buffer.from(r, \"base64\");\n                return new Uint8Array(t, n, i);\n            }\n        case \"DateTime\":\n            return new Date(r);\n        case \"Decimal\":\n            return new ve(r);\n        case \"Json\":\n            return JSON.parse(r);\n        default:\n            Ne(r, \"Unknown tagged value\");\n    }\n}\nvar Pe = class {\n    get(r) {\n        return this._map.get(r)?.value;\n    }\n    set(r, t) {\n        this._map.set(r, {\n            value: t\n        });\n    }\n    getOrCreate(r, t) {\n        let n = this._map.get(r);\n        if (n) return n.value;\n        let i = t();\n        return this.set(r, i), i;\n    }\n    constructor(){\n        this._map = new Map;\n    }\n};\nfunction Ye(e) {\n    return e.substring(0, 1).toLowerCase() + e.substring(1);\n}\nfunction Zs(e, r) {\n    let t = {};\n    for (let n of e){\n        let i = n[r];\n        t[i] = n;\n    }\n    return t;\n}\nfunction ut(e) {\n    let r;\n    return {\n        get () {\n            return r || (r = {\n                value: e()\n            }), r.value;\n        }\n    };\n}\nfunction Xs(e) {\n    return {\n        models: Hi(e.models),\n        enums: Hi(e.enums),\n        types: Hi(e.types)\n    };\n}\nfunction Hi(e) {\n    let r = {};\n    for (let { name: t, ...n } of e)r[t] = n;\n    return r;\n}\nfunction Sr(e) {\n    return e instanceof Date || Object.prototype.toString.call(e) === \"[object Date]\";\n}\nfunction wn(e) {\n    return e.toString() !== \"Invalid Date\";\n}\nfunction Rr(e) {\n    return ar.isDecimal(e) ? !0 : e !== null && typeof e == \"object\" && typeof e.s == \"number\" && typeof e.e == \"number\" && typeof e.toFixed == \"function\" && Array.isArray(e.d);\n}\nvar ct = {};\ntr(ct, {\n    ModelAction: ()=>Ar,\n    datamodelEnumToSchemaEnum: ()=>yd\n});\nfunction yd(e) {\n    return {\n        name: e.name,\n        values: e.values.map((r)=>r.name)\n    };\n}\nvar Ar = ((b)=>(b.findUnique = \"findUnique\", b.findUniqueOrThrow = \"findUniqueOrThrow\", b.findFirst = \"findFirst\", b.findFirstOrThrow = \"findFirstOrThrow\", b.findMany = \"findMany\", b.create = \"create\", b.createMany = \"createMany\", b.createManyAndReturn = \"createManyAndReturn\", b.update = \"update\", b.updateMany = \"updateMany\", b.updateManyAndReturn = \"updateManyAndReturn\", b.upsert = \"upsert\", b.delete = \"delete\", b.deleteMany = \"deleteMany\", b.groupBy = \"groupBy\", b.count = \"count\", b.aggregate = \"aggregate\", b.findRaw = \"findRaw\", b.aggregateRaw = \"aggregateRaw\", b))(Ar || {});\nvar ia = C(Di());\nvar na = C(__webpack_require__(/*! node:fs */ \"node:fs\"));\nvar ea = {\n    keyword: De,\n    entity: De,\n    value: (e)=>W(nr(e)),\n    punctuation: nr,\n    directive: De,\n    function: De,\n    variable: (e)=>W(nr(e)),\n    string: (e)=>W(qe(e)),\n    boolean: ke,\n    number: De,\n    comment: Kr\n};\nvar bd = (e)=>e, xn = {}, Ed = 0, v = {\n    manual: xn.Prism && xn.Prism.manual,\n    disableWorkerMessageHandler: xn.Prism && xn.Prism.disableWorkerMessageHandler,\n    util: {\n        encode: function(e) {\n            if (e instanceof ge) {\n                let r = e;\n                return new ge(r.type, v.util.encode(r.content), r.alias);\n            } else return Array.isArray(e) ? e.map(v.util.encode) : e.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n        },\n        type: function(e) {\n            return Object.prototype.toString.call(e).slice(8, -1);\n        },\n        objId: function(e) {\n            return e.__id || Object.defineProperty(e, \"__id\", {\n                value: ++Ed\n            }), e.__id;\n        },\n        clone: function e(r, t) {\n            let n, i, o = v.util.type(r);\n            switch(t = t || {}, o){\n                case \"Object\":\n                    if (i = v.util.objId(r), t[i]) return t[i];\n                    n = {}, t[i] = n;\n                    for(let s in r)r.hasOwnProperty(s) && (n[s] = e(r[s], t));\n                    return n;\n                case \"Array\":\n                    return i = v.util.objId(r), t[i] ? t[i] : (n = [], t[i] = n, r.forEach(function(s, a) {\n                        n[a] = e(s, t);\n                    }), n);\n                default:\n                    return r;\n            }\n        }\n    },\n    languages: {\n        extend: function(e, r) {\n            let t = v.util.clone(v.languages[e]);\n            for(let n in r)t[n] = r[n];\n            return t;\n        },\n        insertBefore: function(e, r, t, n) {\n            n = n || v.languages;\n            let i = n[e], o = {};\n            for(let a in i)if (i.hasOwnProperty(a)) {\n                if (a == r) for(let l in t)t.hasOwnProperty(l) && (o[l] = t[l]);\n                t.hasOwnProperty(a) || (o[a] = i[a]);\n            }\n            let s = n[e];\n            return n[e] = o, v.languages.DFS(v.languages, function(a, l) {\n                l === s && a != e && (this[a] = o);\n            }), o;\n        },\n        DFS: function e(r, t, n, i) {\n            i = i || {};\n            let o = v.util.objId;\n            for(let s in r)if (r.hasOwnProperty(s)) {\n                t.call(r, s, r[s], n || s);\n                let a = r[s], l = v.util.type(a);\n                l === \"Object\" && !i[o(a)] ? (i[o(a)] = !0, e(a, t, null, i)) : l === \"Array\" && !i[o(a)] && (i[o(a)] = !0, e(a, t, s, i));\n            }\n        }\n    },\n    plugins: {},\n    highlight: function(e, r, t) {\n        let n = {\n            code: e,\n            grammar: r,\n            language: t\n        };\n        return v.hooks.run(\"before-tokenize\", n), n.tokens = v.tokenize(n.code, n.grammar), v.hooks.run(\"after-tokenize\", n), ge.stringify(v.util.encode(n.tokens), n.language);\n    },\n    matchGrammar: function(e, r, t, n, i, o, s) {\n        for(let g in t){\n            if (!t.hasOwnProperty(g) || !t[g]) continue;\n            if (g == s) return;\n            let S = t[g];\n            S = v.util.type(S) === \"Array\" ? S : [\n                S\n            ];\n            for(let P = 0; P < S.length; ++P){\n                let R = S[P], b = R.inside, D = !!R.lookbehind, me = !!R.greedy, ae = 0, Hr = R.alias;\n                if (me && !R.pattern.global) {\n                    let V = R.pattern.toString().match(/[imuy]*$/)[0];\n                    R.pattern = RegExp(R.pattern.source, V + \"g\");\n                }\n                R = R.pattern || R;\n                for(let V = n, te = i; V < r.length; te += r[V].length, ++V){\n                    let Ce = r[V];\n                    if (r.length > e.length) return;\n                    if (Ce instanceof ge) continue;\n                    if (me && V != r.length - 1) {\n                        R.lastIndex = te;\n                        var p = R.exec(e);\n                        if (!p) break;\n                        var c = p.index + (D ? p[1].length : 0), d = p.index + p[0].length, a = V, l = te;\n                        for(let _ = r.length; a < _ && (l < d || !r[a].type && !r[a - 1].greedy); ++a)l += r[a].length, c >= l && (++V, te = l);\n                        if (r[V] instanceof ge) continue;\n                        u = a - V, Ce = e.slice(te, l), p.index -= te;\n                    } else {\n                        R.lastIndex = 0;\n                        var p = R.exec(Ce), u = 1;\n                    }\n                    if (!p) {\n                        if (o) break;\n                        continue;\n                    }\n                    D && (ae = p[1] ? p[1].length : 0);\n                    var c = p.index + ae, p = p[0].slice(ae), d = c + p.length, f = Ce.slice(0, c), h = Ce.slice(d);\n                    let H = [\n                        V,\n                        u\n                    ];\n                    f && (++V, te += f.length, H.push(f));\n                    let fr = new ge(g, b ? v.tokenize(p, b) : p, Hr, p, me);\n                    if (H.push(fr), h && H.push(h), Array.prototype.splice.apply(r, H), u != 1 && v.matchGrammar(e, r, t, V, te, !0, g), o) break;\n                }\n            }\n        }\n    },\n    tokenize: function(e, r) {\n        let t = [\n            e\n        ], n = r.rest;\n        if (n) {\n            for(let i in n)r[i] = n[i];\n            delete r.rest;\n        }\n        return v.matchGrammar(e, t, r, 0, 0, !1), t;\n    },\n    hooks: {\n        all: {},\n        add: function(e, r) {\n            let t = v.hooks.all;\n            t[e] = t[e] || [], t[e].push(r);\n        },\n        run: function(e, r) {\n            let t = v.hooks.all[e];\n            if (!(!t || !t.length)) for(var n = 0, i; i = t[n++];)i(r);\n        }\n    },\n    Token: ge\n};\nv.languages.clike = {\n    comment: [\n        {\n            pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^\\\\:])\\/\\/.*/,\n            lookbehind: !0,\n            greedy: !0\n        }\n    ],\n    string: {\n        pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: !0\n    },\n    \"class-name\": {\n        pattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,\n        lookbehind: !0,\n        inside: {\n            punctuation: /[.\\\\]/\n        }\n    },\n    keyword: /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n    boolean: /\\b(?:true|false)\\b/,\n    function: /\\w+(?=\\()/,\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    operator: /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n    punctuation: /[{}[\\];(),.:]/\n};\nv.languages.javascript = v.languages.extend(\"clike\", {\n    \"class-name\": [\n        v.languages.clike[\"class-name\"],\n        {\n            pattern: /(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,\n            lookbehind: !0\n        }\n    ],\n    keyword: [\n        {\n            pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^.])\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n            lookbehind: !0\n        }\n    ],\n    number: /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n    function: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n    operator: /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/\n});\nv.languages.javascript[\"class-name\"][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\nv.languages.insertBefore(\"javascript\", \"keyword\", {\n    regex: {\n        pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    \"function-variable\": {\n        pattern: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,\n        alias: \"function\"\n    },\n    parameter: [\n        {\n            pattern: /(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,\n            lookbehind: !0,\n            inside: v.languages.javascript\n        },\n        {\n            pattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,\n            inside: v.languages.javascript\n        },\n        {\n            pattern: /(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,\n            lookbehind: !0,\n            inside: v.languages.javascript\n        },\n        {\n            pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,\n            lookbehind: !0,\n            inside: v.languages.javascript\n        }\n    ],\n    constant: /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nv.languages.markup && v.languages.markup.tag.addInlined(\"script\", \"javascript\");\nv.languages.js = v.languages.javascript;\nv.languages.typescript = v.languages.extend(\"javascript\", {\n    keyword: /\\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\\b/,\n    builtin: /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n});\nv.languages.ts = v.languages.typescript;\nfunction ge(e, r, t, n, i) {\n    this.type = e, this.content = r, this.alias = t, this.length = (n || \"\").length | 0, this.greedy = !!i;\n}\nge.stringify = function(e, r) {\n    return typeof e == \"string\" ? e : Array.isArray(e) ? e.map(function(t) {\n        return ge.stringify(t, r);\n    }).join(\"\") : wd(e.type)(e.content);\n};\nfunction wd(e) {\n    return ea[e] || bd;\n}\nfunction ra(e) {\n    return xd(e, v.languages.javascript);\n}\nfunction xd(e, r) {\n    return v.tokenize(e, r).map((n)=>ge.stringify(n)).join(\"\");\n}\nfunction ta(e) {\n    return Ii(e);\n}\nvar vn = class e {\n    static read(r) {\n        let t;\n        try {\n            t = na.default.readFileSync(r, \"utf-8\");\n        } catch  {\n            return null;\n        }\n        return e.fromContent(t);\n    }\n    static fromContent(r) {\n        let t = r.split(/\\r?\\n/);\n        return new e(1, t);\n    }\n    constructor(r, t){\n        this.firstLineNumber = r, this.lines = t;\n    }\n    get lastLineNumber() {\n        return this.firstLineNumber + this.lines.length - 1;\n    }\n    mapLineAt(r, t) {\n        if (r < this.firstLineNumber || r > this.lines.length + this.firstLineNumber) return this;\n        let n = r - this.firstLineNumber, i = [\n            ...this.lines\n        ];\n        return i[n] = t(i[n]), new e(this.firstLineNumber, i);\n    }\n    mapLines(r) {\n        return new e(this.firstLineNumber, this.lines.map((t, n)=>r(t, this.firstLineNumber + n)));\n    }\n    lineAt(r) {\n        return this.lines[r - this.firstLineNumber];\n    }\n    prependSymbolAt(r, t) {\n        return this.mapLines((n, i)=>i === r ? `${t} ${n}` : `  ${n}`);\n    }\n    slice(r, t) {\n        let n = this.lines.slice(r - 1, t).join(`\n`);\n        return new e(r, ta(n).split(`\n`));\n    }\n    highlight() {\n        let r = ra(this.toString());\n        return new e(this.firstLineNumber, r.split(`\n`));\n    }\n    toString() {\n        return this.lines.join(`\n`);\n    }\n};\nvar vd = {\n    red: ce,\n    gray: Kr,\n    dim: Ie,\n    bold: W,\n    underline: Y,\n    highlightSource: (e)=>e.highlight()\n}, Pd = {\n    red: (e)=>e,\n    gray: (e)=>e,\n    dim: (e)=>e,\n    bold: (e)=>e,\n    underline: (e)=>e,\n    highlightSource: (e)=>e\n};\nfunction Td({ message: e, originalMethod: r, isPanic: t, callArguments: n }) {\n    return {\n        functionName: `prisma.${r}()`,\n        message: e,\n        isPanic: t ?? !1,\n        callArguments: n\n    };\n}\nfunction Sd({ callsite: e, message: r, originalMethod: t, isPanic: n, callArguments: i }, o) {\n    let s = Td({\n        message: r,\n        originalMethod: t,\n        isPanic: n,\n        callArguments: i\n    });\n    if (!e || \"undefined\" < \"u\" || \"development\" === \"production\") return s;\n    let a = e.getLocation();\n    if (!a || !a.lineNumber || !a.columnNumber) return s;\n    let l = Math.max(1, a.lineNumber - 3), u = vn.read(a.fileName)?.slice(l, a.lineNumber), c = u?.lineAt(a.lineNumber);\n    if (u && c) {\n        let p = Ad(c), d = Rd(c);\n        if (!d) return s;\n        s.functionName = `${d.code})`, s.location = a, n || (u = u.mapLineAt(a.lineNumber, (h)=>h.slice(0, d.openingBraceIndex))), u = o.highlightSource(u);\n        let f = String(u.lastLineNumber).length;\n        if (s.contextLines = u.mapLines((h, g)=>o.gray(String(g).padStart(f)) + \" \" + h).mapLines((h)=>o.dim(h)).prependSymbolAt(a.lineNumber, o.bold(o.red(\"\\u2192\"))), i) {\n            let h = p + f + 1;\n            h += 2, s.callArguments = (0, ia.default)(i, h).slice(h);\n        }\n    }\n    return s;\n}\nfunction Rd(e) {\n    let r = Object.keys(Ar).join(\"|\"), n = new RegExp(String.raw`\\.(${r})\\(`).exec(e);\n    if (n) {\n        let i = n.index + n[0].length, o = e.lastIndexOf(\" \", n.index) + 1;\n        return {\n            code: e.slice(o, i),\n            openingBraceIndex: i\n        };\n    }\n    return null;\n}\nfunction Ad(e) {\n    let r = 0;\n    for(let t = 0; t < e.length; t++){\n        if (e.charAt(t) !== \" \") return r;\n        r++;\n    }\n    return r;\n}\nfunction Cd({ functionName: e, location: r, message: t, isPanic: n, contextLines: i, callArguments: o }, s) {\n    let a = [\n        \"\"\n    ], l = r ? \" in\" : \":\";\n    if (n ? (a.push(s.red(`Oops, an unknown error occurred! This is ${s.bold(\"on us\")}, you did nothing wrong.`)), a.push(s.red(`It occurred in the ${s.bold(`\\`${e}\\``)} invocation${l}`))) : a.push(s.red(`Invalid ${s.bold(`\\`${e}\\``)} invocation${l}`)), r && a.push(s.underline(Id(r))), i) {\n        a.push(\"\");\n        let u = [\n            i.toString()\n        ];\n        o && (u.push(o), u.push(s.dim(\")\"))), a.push(u.join(\"\")), o && a.push(\"\");\n    } else a.push(\"\"), o && a.push(o), a.push(\"\");\n    return a.push(t), a.join(`\n`);\n}\nfunction Id(e) {\n    let r = [\n        e.fileName\n    ];\n    return e.lineNumber && r.push(String(e.lineNumber)), e.columnNumber && r.push(String(e.columnNumber)), r.join(\":\");\n}\nfunction Pn(e) {\n    let r = e.showColors ? vd : Pd, t;\n    return t = Sd(e, r), Cd(t, r);\n}\nvar ma = C(Ki());\nfunction la(e, r, t) {\n    let n = ua(e), i = kd(n), o = Od(i);\n    o ? Tn(o, r, t) : r.addErrorMessage(()=>\"Unknown error\");\n}\nfunction ua(e) {\n    return e.errors.flatMap((r)=>r.kind === \"Union\" ? ua(r) : [\n            r\n        ]);\n}\nfunction kd(e) {\n    let r = new Map, t = [];\n    for (let n of e){\n        if (n.kind !== \"InvalidArgumentType\") {\n            t.push(n);\n            continue;\n        }\n        let i = `${n.selectionPath.join(\".\")}:${n.argumentPath.join(\".\")}`, o = r.get(i);\n        o ? r.set(i, {\n            ...n,\n            argument: {\n                ...n.argument,\n                typeNames: Dd(o.argument.typeNames, n.argument.typeNames)\n            }\n        }) : r.set(i, n);\n    }\n    return t.push(...r.values()), t;\n}\nfunction Dd(e, r) {\n    return [\n        ...new Set(e.concat(r))\n    ];\n}\nfunction Od(e) {\n    return Bi(e, (r, t)=>{\n        let n = sa(r), i = sa(t);\n        return n !== i ? n - i : aa(r) - aa(t);\n    });\n}\nfunction sa(e) {\n    let r = 0;\n    return Array.isArray(e.selectionPath) && (r += e.selectionPath.length), Array.isArray(e.argumentPath) && (r += e.argumentPath.length), r;\n}\nfunction aa(e) {\n    switch(e.kind){\n        case \"InvalidArgumentValue\":\n        case \"ValueTooLarge\":\n            return 20;\n        case \"InvalidArgumentType\":\n            return 10;\n        case \"RequiredArgumentMissing\":\n            return -10;\n        default:\n            return 0;\n    }\n}\nvar ue = class {\n    constructor(r, t){\n        this.isRequired = !1;\n        this.name = r;\n        this.value = t;\n    }\n    makeRequired() {\n        return this.isRequired = !0, this;\n    }\n    write(r) {\n        let { colors: { green: t } } = r.context;\n        r.addMarginSymbol(t(this.isRequired ? \"+\" : \"?\")), r.write(t(this.name)), this.isRequired || r.write(t(\"?\")), r.write(t(\": \")), typeof this.value == \"string\" ? r.write(t(this.value)) : r.write(this.value);\n    }\n};\npa();\nvar Cr = class {\n    constructor(r = 0, t){\n        this.lines = [];\n        this.currentLine = \"\";\n        this.currentIndent = 0;\n        this.context = t;\n        this.currentIndent = r;\n    }\n    write(r) {\n        return typeof r == \"string\" ? this.currentLine += r : r.write(this), this;\n    }\n    writeJoined(r, t, n = (i, o)=>o.write(i)) {\n        let i = t.length - 1;\n        for(let o = 0; o < t.length; o++)n(t[o], this), o !== i && this.write(r);\n        return this;\n    }\n    writeLine(r) {\n        return this.write(r).newLine();\n    }\n    newLine() {\n        this.lines.push(this.indentedCurrentLine()), this.currentLine = \"\", this.marginSymbol = void 0;\n        let r = this.afterNextNewLineCallback;\n        return this.afterNextNewLineCallback = void 0, r?.(), this;\n    }\n    withIndent(r) {\n        return this.indent(), r(this), this.unindent(), this;\n    }\n    afterNextNewline(r) {\n        return this.afterNextNewLineCallback = r, this;\n    }\n    indent() {\n        return this.currentIndent++, this;\n    }\n    unindent() {\n        return this.currentIndent > 0 && this.currentIndent--, this;\n    }\n    addMarginSymbol(r) {\n        return this.marginSymbol = r, this;\n    }\n    toString() {\n        return this.lines.concat(this.indentedCurrentLine()).join(`\n`);\n    }\n    getCurrentLineLength() {\n        return this.currentLine.length;\n    }\n    indentedCurrentLine() {\n        let r = this.currentLine.padStart(this.currentLine.length + 2 * this.currentIndent);\n        return this.marginSymbol ? this.marginSymbol + r.slice(1) : r;\n    }\n};\nca();\nvar Sn = class {\n    constructor(r){\n        this.value = r;\n    }\n    write(r) {\n        r.write(this.value);\n    }\n    markAsError() {\n        this.value.markAsError();\n    }\n};\nvar Rn = (e)=>e, An = {\n    bold: Rn,\n    red: Rn,\n    green: Rn,\n    dim: Rn,\n    enabled: !1\n}, da = {\n    bold: W,\n    red: ce,\n    green: qe,\n    dim: Ie,\n    enabled: !0\n}, Ir = {\n    write (e) {\n        e.writeLine(\",\");\n    }\n};\nvar Te = class {\n    constructor(r){\n        this.isUnderlined = !1;\n        this.color = (r)=>r;\n        this.contents = r;\n    }\n    underline() {\n        return this.isUnderlined = !0, this;\n    }\n    setColor(r) {\n        return this.color = r, this;\n    }\n    write(r) {\n        let t = r.getCurrentLineLength();\n        r.write(this.color(this.contents)), this.isUnderlined && r.afterNextNewline(()=>{\n            r.write(\" \".repeat(t)).writeLine(this.color(\"~\".repeat(this.contents.length)));\n        });\n    }\n};\nvar ze = class {\n    markAsError() {\n        return this.hasError = !0, this;\n    }\n    constructor(){\n        this.hasError = !1;\n    }\n};\nvar kr = class extends ze {\n    addItem(r) {\n        return this.items.push(new Sn(r)), this;\n    }\n    getField(r) {\n        return this.items[r];\n    }\n    getPrintWidth() {\n        return this.items.length === 0 ? 2 : Math.max(...this.items.map((t)=>t.value.getPrintWidth())) + 2;\n    }\n    write(r) {\n        if (this.items.length === 0) {\n            this.writeEmpty(r);\n            return;\n        }\n        this.writeWithItems(r);\n    }\n    writeEmpty(r) {\n        let t = new Te(\"[]\");\n        this.hasError && t.setColor(r.context.colors.red).underline(), r.write(t);\n    }\n    writeWithItems(r) {\n        let { colors: t } = r.context;\n        r.writeLine(\"[\").withIndent(()=>r.writeJoined(Ir, this.items).newLine()).write(\"]\"), this.hasError && r.afterNextNewline(()=>{\n            r.writeLine(t.red(\"~\".repeat(this.getPrintWidth())));\n        });\n    }\n    asObject() {}\n    constructor(...args){\n        super(...args), this.items = [];\n    }\n};\nvar Dr = class e extends ze {\n    addField(r) {\n        this.fields[r.name] = r;\n    }\n    addSuggestion(r) {\n        this.suggestions.push(r);\n    }\n    getField(r) {\n        return this.fields[r];\n    }\n    getDeepField(r) {\n        let [t, ...n] = r, i = this.getField(t);\n        if (!i) return;\n        let o = i;\n        for (let s of n){\n            let a;\n            if (o.value instanceof e ? a = o.value.getField(s) : o.value instanceof kr && (a = o.value.getField(Number(s))), !a) return;\n            o = a;\n        }\n        return o;\n    }\n    getDeepFieldValue(r) {\n        return r.length === 0 ? this : this.getDeepField(r)?.value;\n    }\n    hasField(r) {\n        return !!this.getField(r);\n    }\n    removeAllFields() {\n        this.fields = {};\n    }\n    removeField(r) {\n        delete this.fields[r];\n    }\n    getFields() {\n        return this.fields;\n    }\n    isEmpty() {\n        return Object.keys(this.fields).length === 0;\n    }\n    getFieldValue(r) {\n        return this.getField(r)?.value;\n    }\n    getDeepSubSelectionValue(r) {\n        let t = this;\n        for (let n of r){\n            if (!(t instanceof e)) return;\n            let i = t.getSubSelectionValue(n);\n            if (!i) return;\n            t = i;\n        }\n        return t;\n    }\n    getDeepSelectionParent(r) {\n        let t = this.getSelectionParent();\n        if (!t) return;\n        let n = t;\n        for (let i of r){\n            let o = n.value.getFieldValue(i);\n            if (!o || !(o instanceof e)) return;\n            let s = o.getSelectionParent();\n            if (!s) return;\n            n = s;\n        }\n        return n;\n    }\n    getSelectionParent() {\n        let r = this.getField(\"select\")?.value.asObject();\n        if (r) return {\n            kind: \"select\",\n            value: r\n        };\n        let t = this.getField(\"include\")?.value.asObject();\n        if (t) return {\n            kind: \"include\",\n            value: t\n        };\n    }\n    getSubSelectionValue(r) {\n        return this.getSelectionParent()?.value.fields[r].value;\n    }\n    getPrintWidth() {\n        let r = Object.values(this.fields);\n        return r.length == 0 ? 2 : Math.max(...r.map((n)=>n.getPrintWidth())) + 2;\n    }\n    write(r) {\n        let t = Object.values(this.fields);\n        if (t.length === 0 && this.suggestions.length === 0) {\n            this.writeEmpty(r);\n            return;\n        }\n        this.writeWithContents(r, t);\n    }\n    asObject() {\n        return this;\n    }\n    writeEmpty(r) {\n        let t = new Te(\"{}\");\n        this.hasError && t.setColor(r.context.colors.red).underline(), r.write(t);\n    }\n    writeWithContents(r, t) {\n        r.writeLine(\"{\").withIndent(()=>{\n            r.writeJoined(Ir, [\n                ...t,\n                ...this.suggestions\n            ]).newLine();\n        }), r.write(\"}\"), this.hasError && r.afterNextNewline(()=>{\n            r.writeLine(r.context.colors.red(\"~\".repeat(this.getPrintWidth())));\n        });\n    }\n    constructor(...args){\n        super(...args), this.fields = {}, this.suggestions = [];\n    }\n};\nvar Q = class extends ze {\n    constructor(t){\n        super();\n        this.text = t;\n    }\n    getPrintWidth() {\n        return this.text.length;\n    }\n    write(t) {\n        let n = new Te(this.text);\n        this.hasError && n.underline().setColor(t.context.colors.red), t.write(n);\n    }\n    asObject() {}\n};\nvar pt = class {\n    addField(r, t) {\n        return this.fields.push({\n            write (n) {\n                let { green: i, dim: o } = n.context.colors;\n                n.write(i(o(`${r}: ${t}`))).addMarginSymbol(i(o(\"+\")));\n            }\n        }), this;\n    }\n    write(r) {\n        let { colors: { green: t } } = r.context;\n        r.writeLine(t(\"{\")).withIndent(()=>{\n            r.writeJoined(Ir, this.fields).newLine();\n        }).write(t(\"}\")).addMarginSymbol(t(\"+\"));\n    }\n    constructor(){\n        this.fields = [];\n    }\n};\nfunction Tn(e, r, t) {\n    switch(e.kind){\n        case \"MutuallyExclusiveFields\":\n            _d(e, r);\n            break;\n        case \"IncludeOnScalar\":\n            Nd(e, r);\n            break;\n        case \"EmptySelection\":\n            Ld(e, r, t);\n            break;\n        case \"UnknownSelectionField\":\n            qd(e, r);\n            break;\n        case \"InvalidSelectionValue\":\n            jd(e, r);\n            break;\n        case \"UnknownArgument\":\n            Vd(e, r);\n            break;\n        case \"UnknownInputField\":\n            Bd(e, r);\n            break;\n        case \"RequiredArgumentMissing\":\n            Ud(e, r);\n            break;\n        case \"InvalidArgumentType\":\n            Gd(e, r);\n            break;\n        case \"InvalidArgumentValue\":\n            Qd(e, r);\n            break;\n        case \"ValueTooLarge\":\n            Wd(e, r);\n            break;\n        case \"SomeFieldsMissing\":\n            Jd(e, r);\n            break;\n        case \"TooManyFieldsGiven\":\n            Hd(e, r);\n            break;\n        case \"Union\":\n            la(e, r, t);\n            break;\n        default:\n            throw new Error(\"not implemented: \" + e.kind);\n    }\n}\nfunction _d(e, r) {\n    let t = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    t && (t.getField(e.firstField)?.markAsError(), t.getField(e.secondField)?.markAsError()), r.addErrorMessage((n)=>`Please ${n.bold(\"either\")} use ${n.green(`\\`${e.firstField}\\``)} or ${n.green(`\\`${e.secondField}\\``)}, but ${n.red(\"not both\")} at the same time.`);\n}\nfunction Nd(e, r) {\n    let [t, n] = Or(e.selectionPath), i = e.outputType, o = r.arguments.getDeepSelectionParent(t)?.value;\n    if (o && (o.getField(n)?.markAsError(), i)) for (let s of i.fields)s.isRelation && o.addSuggestion(new ue(s.name, \"true\"));\n    r.addErrorMessage((s)=>{\n        let a = `Invalid scalar field ${s.red(`\\`${n}\\``)} for ${s.bold(\"include\")} statement`;\n        return i ? a += ` on model ${s.bold(i.name)}. ${dt(s)}` : a += \".\", a += `\nNote that ${s.bold(\"include\")} statements only accept relation fields.`, a;\n    });\n}\nfunction Ld(e, r, t) {\n    let n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (n) {\n        let i = n.getField(\"omit\")?.value.asObject();\n        if (i) {\n            Fd(e, r, i);\n            return;\n        }\n        if (n.hasField(\"select\")) {\n            Md(e, r);\n            return;\n        }\n    }\n    if (t?.[Ye(e.outputType.name)]) {\n        $d(e, r);\n        return;\n    }\n    r.addErrorMessage(()=>`Unknown field at \"${e.selectionPath.join(\".\")} selection\"`);\n}\nfunction Fd(e, r, t) {\n    t.removeAllFields();\n    for (let n of e.outputType.fields)t.addSuggestion(new ue(n.name, \"false\"));\n    r.addErrorMessage((n)=>`The ${n.red(\"omit\")} statement includes every field of the model ${n.bold(e.outputType.name)}. At least one field must be included in the result`);\n}\nfunction Md(e, r) {\n    let t = e.outputType, n = r.arguments.getDeepSelectionParent(e.selectionPath)?.value, i = n?.isEmpty() ?? !1;\n    n && (n.removeAllFields(), ha(n, t)), r.addErrorMessage((o)=>i ? `The ${o.red(\"`select`\")} statement for type ${o.bold(t.name)} must not be empty. ${dt(o)}` : `The ${o.red(\"`select`\")} statement for type ${o.bold(t.name)} needs ${o.bold(\"at least one truthy value\")}.`);\n}\nfunction $d(e, r) {\n    let t = new pt;\n    for (let i of e.outputType.fields)i.isRelation || t.addField(i.name, \"false\");\n    let n = new ue(\"omit\", t).makeRequired();\n    if (e.selectionPath.length === 0) r.arguments.addSuggestion(n);\n    else {\n        let [i, o] = Or(e.selectionPath), a = r.arguments.getDeepSelectionParent(i)?.value.asObject()?.getField(o);\n        if (a) {\n            let l = a?.value.asObject() ?? new Dr;\n            l.addSuggestion(n), a.value = l;\n        }\n    }\n    r.addErrorMessage((i)=>`The global ${i.red(\"omit\")} configuration excludes every field of the model ${i.bold(e.outputType.name)}. At least one field must be included in the result`);\n}\nfunction qd(e, r) {\n    let t = ya(e.selectionPath, r);\n    if (t.parentKind !== \"unknown\") {\n        t.field.markAsError();\n        let n = t.parent;\n        switch(t.parentKind){\n            case \"select\":\n                ha(n, e.outputType);\n                break;\n            case \"include\":\n                Kd(n, e.outputType);\n                break;\n            case \"omit\":\n                Yd(n, e.outputType);\n                break;\n        }\n    }\n    r.addErrorMessage((n)=>{\n        let i = [\n            `Unknown field ${n.red(`\\`${t.fieldName}\\``)}`\n        ];\n        return t.parentKind !== \"unknown\" && i.push(`for ${n.bold(t.parentKind)} statement`), i.push(`on model ${n.bold(`\\`${e.outputType.name}\\``)}.`), i.push(dt(n)), i.join(\" \");\n    });\n}\nfunction jd(e, r) {\n    let t = ya(e.selectionPath, r);\n    t.parentKind !== \"unknown\" && t.field.value.markAsError(), r.addErrorMessage((n)=>`Invalid value for selection field \\`${n.red(t.fieldName)}\\`: ${e.underlyingError}`);\n}\nfunction Vd(e, r) {\n    let t = e.argumentPath[0], n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    n && (n.getField(t)?.markAsError(), zd(n, e.arguments)), r.addErrorMessage((i)=>fa(i, t, e.arguments.map((o)=>o.name)));\n}\nfunction Bd(e, r) {\n    let [t, n] = Or(e.argumentPath), i = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (i) {\n        i.getDeepField(e.argumentPath)?.markAsError();\n        let o = i.getDeepFieldValue(t)?.asObject();\n        o && ba(o, e.inputType);\n    }\n    r.addErrorMessage((o)=>fa(o, n, e.inputType.fields.map((s)=>s.name)));\n}\nfunction fa(e, r, t) {\n    let n = [\n        `Unknown argument \\`${e.red(r)}\\`.`\n    ], i = Xd(r, t);\n    return i && n.push(`Did you mean \\`${e.green(i)}\\`?`), t.length > 0 && n.push(dt(e)), n.join(\" \");\n}\nfunction Ud(e, r) {\n    let t;\n    r.addErrorMessage((l)=>t?.value instanceof Q && t.value.text === \"null\" ? `Argument \\`${l.green(o)}\\` must not be ${l.red(\"null\")}.` : `Argument \\`${l.green(o)}\\` is missing.`);\n    let n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (!n) return;\n    let [i, o] = Or(e.argumentPath), s = new pt, a = n.getDeepFieldValue(i)?.asObject();\n    if (a) {\n        if (t = a.getField(o), t && a.removeField(o), e.inputTypes.length === 1 && e.inputTypes[0].kind === \"object\") {\n            for (let l of e.inputTypes[0].fields)s.addField(l.name, l.typeNames.join(\" | \"));\n            a.addSuggestion(new ue(o, s).makeRequired());\n        } else {\n            let l = e.inputTypes.map(ga).join(\" | \");\n            a.addSuggestion(new ue(o, l).makeRequired());\n        }\n        if (e.dependentArgumentPath) {\n            n.getDeepField(e.dependentArgumentPath)?.markAsError();\n            let [, l] = Or(e.dependentArgumentPath);\n            r.addErrorMessage((u)=>`Argument \\`${u.green(o)}\\` is required because argument \\`${u.green(l)}\\` was provided.`);\n        }\n    }\n}\nfunction ga(e) {\n    return e.kind === \"list\" ? `${ga(e.elementType)}[]` : e.name;\n}\nfunction Gd(e, r) {\n    let t = e.argument.name, n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    n && n.getDeepFieldValue(e.argumentPath)?.markAsError(), r.addErrorMessage((i)=>{\n        let o = Cn(\"or\", e.argument.typeNames.map((s)=>i.green(s)));\n        return `Argument \\`${i.bold(t)}\\`: Invalid value provided. Expected ${o}, provided ${i.red(e.inferredType)}.`;\n    });\n}\nfunction Qd(e, r) {\n    let t = e.argument.name, n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    n && n.getDeepFieldValue(e.argumentPath)?.markAsError(), r.addErrorMessage((i)=>{\n        let o = [\n            `Invalid value for argument \\`${i.bold(t)}\\``\n        ];\n        if (e.underlyingError && o.push(`: ${e.underlyingError}`), o.push(\".\"), e.argument.typeNames.length > 0) {\n            let s = Cn(\"or\", e.argument.typeNames.map((a)=>i.green(a)));\n            o.push(` Expected ${s}.`);\n        }\n        return o.join(\"\");\n    });\n}\nfunction Wd(e, r) {\n    let t = e.argument.name, n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(), i;\n    if (n) {\n        let s = n.getDeepField(e.argumentPath)?.value;\n        s?.markAsError(), s instanceof Q && (i = s.text);\n    }\n    r.addErrorMessage((o)=>{\n        let s = [\n            \"Unable to fit value\"\n        ];\n        return i && s.push(o.red(i)), s.push(`into a 64-bit signed integer for field \\`${o.bold(t)}\\``), s.join(\" \");\n    });\n}\nfunction Jd(e, r) {\n    let t = e.argumentPath[e.argumentPath.length - 1], n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (n) {\n        let i = n.getDeepFieldValue(e.argumentPath)?.asObject();\n        i && ba(i, e.inputType);\n    }\n    r.addErrorMessage((i)=>{\n        let o = [\n            `Argument \\`${i.bold(t)}\\` of type ${i.bold(e.inputType.name)} needs`\n        ];\n        return e.constraints.minFieldCount === 1 ? e.constraints.requiredFields ? o.push(`${i.green(\"at least one of\")} ${Cn(\"or\", e.constraints.requiredFields.map((s)=>`\\`${i.bold(s)}\\``))} arguments.`) : o.push(`${i.green(\"at least one\")} argument.`) : o.push(`${i.green(`at least ${e.constraints.minFieldCount}`)} arguments.`), o.push(dt(i)), o.join(\" \");\n    });\n}\nfunction Hd(e, r) {\n    let t = e.argumentPath[e.argumentPath.length - 1], n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(), i = [];\n    if (n) {\n        let o = n.getDeepFieldValue(e.argumentPath)?.asObject();\n        o && (o.markAsError(), i = Object.keys(o.getFields()));\n    }\n    r.addErrorMessage((o)=>{\n        let s = [\n            `Argument \\`${o.bold(t)}\\` of type ${o.bold(e.inputType.name)} needs`\n        ];\n        return e.constraints.minFieldCount === 1 && e.constraints.maxFieldCount == 1 ? s.push(`${o.green(\"exactly one\")} argument,`) : e.constraints.maxFieldCount == 1 ? s.push(`${o.green(\"at most one\")} argument,`) : s.push(`${o.green(`at most ${e.constraints.maxFieldCount}`)} arguments,`), s.push(`but you provided ${Cn(\"and\", i.map((a)=>o.red(a)))}. Please choose`), e.constraints.maxFieldCount === 1 ? s.push(\"one.\") : s.push(`${e.constraints.maxFieldCount}.`), s.join(\" \");\n    });\n}\nfunction ha(e, r) {\n    for (let t of r.fields)e.hasField(t.name) || e.addSuggestion(new ue(t.name, \"true\"));\n}\nfunction Kd(e, r) {\n    for (let t of r.fields)t.isRelation && !e.hasField(t.name) && e.addSuggestion(new ue(t.name, \"true\"));\n}\nfunction Yd(e, r) {\n    for (let t of r.fields)!e.hasField(t.name) && !t.isRelation && e.addSuggestion(new ue(t.name, \"true\"));\n}\nfunction zd(e, r) {\n    for (let t of r)e.hasField(t.name) || e.addSuggestion(new ue(t.name, t.typeNames.join(\" | \")));\n}\nfunction ya(e, r) {\n    let [t, n] = Or(e), i = r.arguments.getDeepSubSelectionValue(t)?.asObject();\n    if (!i) return {\n        parentKind: \"unknown\",\n        fieldName: n\n    };\n    let o = i.getFieldValue(\"select\")?.asObject(), s = i.getFieldValue(\"include\")?.asObject(), a = i.getFieldValue(\"omit\")?.asObject(), l = o?.getField(n);\n    return o && l ? {\n        parentKind: \"select\",\n        parent: o,\n        field: l,\n        fieldName: n\n    } : (l = s?.getField(n), s && l ? {\n        parentKind: \"include\",\n        field: l,\n        parent: s,\n        fieldName: n\n    } : (l = a?.getField(n), a && l ? {\n        parentKind: \"omit\",\n        field: l,\n        parent: a,\n        fieldName: n\n    } : {\n        parentKind: \"unknown\",\n        fieldName: n\n    }));\n}\nfunction ba(e, r) {\n    if (r.kind === \"object\") for (let t of r.fields)e.hasField(t.name) || e.addSuggestion(new ue(t.name, t.typeNames.join(\" | \")));\n}\nfunction Or(e) {\n    let r = [\n        ...e\n    ], t = r.pop();\n    if (!t) throw new Error(\"unexpected empty path\");\n    return [\n        r,\n        t\n    ];\n}\nfunction dt({ green: e, enabled: r }) {\n    return \"Available options are \" + (r ? `listed in ${e(\"green\")}` : \"marked with ?\") + \".\";\n}\nfunction Cn(e, r) {\n    if (r.length === 1) return r[0];\n    let t = [\n        ...r\n    ], n = t.pop();\n    return `${t.join(\", \")} ${e} ${n}`;\n}\nvar Zd = 3;\nfunction Xd(e, r) {\n    let t = 1 / 0, n;\n    for (let i of r){\n        let o = (0, ma.default)(e, i);\n        o > Zd || o < t && (t = o, n = i);\n    }\n    return n;\n}\nvar mt = class {\n    constructor(r, t, n, i, o){\n        this.modelName = r, this.name = t, this.typeName = n, this.isList = i, this.isEnum = o;\n    }\n    _toGraphQLInputType() {\n        let r = this.isList ? \"List\" : \"\", t = this.isEnum ? \"Enum\" : \"\";\n        return `${r}${t}${this.typeName}FieldRefInput<${this.modelName}>`;\n    }\n};\nfunction _r(e) {\n    return e instanceof mt;\n}\nvar In = Symbol(), zi = new WeakMap, Me = class {\n    constructor(r){\n        r === In ? zi.set(this, `Prisma.${this._getName()}`) : zi.set(this, `new Prisma.${this._getNamespace()}.${this._getName()}()`);\n    }\n    _getName() {\n        return this.constructor.name;\n    }\n    toString() {\n        return zi.get(this);\n    }\n}, ft = class extends Me {\n    _getNamespace() {\n        return \"NullTypes\";\n    }\n}, gt = class extends ft {\n    #e;\n};\nZi(gt, \"DbNull\");\nvar ht = class extends ft {\n    #e;\n};\nZi(ht, \"JsonNull\");\nvar yt = class extends ft {\n    #e;\n};\nZi(yt, \"AnyNull\");\nvar kn = {\n    classes: {\n        DbNull: gt,\n        JsonNull: ht,\n        AnyNull: yt\n    },\n    instances: {\n        DbNull: new gt(In),\n        JsonNull: new ht(In),\n        AnyNull: new yt(In)\n    }\n};\nfunction Zi(e, r) {\n    Object.defineProperty(e, \"name\", {\n        value: r,\n        configurable: !0\n    });\n}\nvar Ea = \": \", Dn = class {\n    constructor(r, t){\n        this.hasError = !1;\n        this.name = r;\n        this.value = t;\n    }\n    markAsError() {\n        this.hasError = !0;\n    }\n    getPrintWidth() {\n        return this.name.length + this.value.getPrintWidth() + Ea.length;\n    }\n    write(r) {\n        let t = new Te(this.name);\n        this.hasError && t.underline().setColor(r.context.colors.red), r.write(t).write(Ea).write(this.value);\n    }\n};\nvar Xi = class {\n    constructor(r){\n        this.errorMessages = [];\n        this.arguments = r;\n    }\n    write(r) {\n        r.write(this.arguments);\n    }\n    addErrorMessage(r) {\n        this.errorMessages.push(r);\n    }\n    renderAllMessages(r) {\n        return this.errorMessages.map((t)=>t(r)).join(`\n`);\n    }\n};\nfunction Nr(e) {\n    return new Xi(wa(e));\n}\nfunction wa(e) {\n    let r = new Dr;\n    for (let [t, n] of Object.entries(e)){\n        let i = new Dn(t, xa(n));\n        r.addField(i);\n    }\n    return r;\n}\nfunction xa(e) {\n    if (typeof e == \"string\") return new Q(JSON.stringify(e));\n    if (typeof e == \"number\" || typeof e == \"boolean\") return new Q(String(e));\n    if (typeof e == \"bigint\") return new Q(`${e}n`);\n    if (e === null) return new Q(\"null\");\n    if (e === void 0) return new Q(\"undefined\");\n    if (Rr(e)) return new Q(`new Prisma.Decimal(\"${e.toFixed()}\")`);\n    if (e instanceof Uint8Array) return Buffer.isBuffer(e) ? new Q(`Buffer.alloc(${e.byteLength})`) : new Q(`new Uint8Array(${e.byteLength})`);\n    if (e instanceof Date) {\n        let r = wn(e) ? e.toISOString() : \"Invalid Date\";\n        return new Q(`new Date(\"${r}\")`);\n    }\n    return e instanceof Me ? new Q(`Prisma.${e._getName()}`) : _r(e) ? new Q(`prisma.${Ye(e.modelName)}.$fields.${e.name}`) : Array.isArray(e) ? em(e) : typeof e == \"object\" ? wa(e) : new Q(Object.prototype.toString.call(e));\n}\nfunction em(e) {\n    let r = new kr;\n    for (let t of e)r.addItem(xa(t));\n    return r;\n}\nfunction On(e, r) {\n    let t = r === \"pretty\" ? da : An, n = e.renderAllMessages(t), i = new Cr(0, {\n        colors: t\n    }).write(e).toString();\n    return {\n        message: n,\n        args: i\n    };\n}\nfunction _n({ args: e, errors: r, errorFormat: t, callsite: n, originalMethod: i, clientVersion: o, globalOmit: s }) {\n    let a = Nr(e);\n    for (let p of r)Tn(p, a, s);\n    let { message: l, args: u } = On(a, t), c = Pn({\n        message: l,\n        callsite: n,\n        originalMethod: i,\n        showColors: t === \"pretty\",\n        callArguments: u\n    });\n    throw new Z(c, {\n        clientVersion: o\n    });\n}\nfunction Se(e) {\n    return e.replace(/^./, (r)=>r.toLowerCase());\n}\nfunction Pa(e, r, t) {\n    let n = Se(t);\n    return !r.result || !(r.result.$allModels || r.result[n]) ? e : rm({\n        ...e,\n        ...va(r.name, e, r.result.$allModels),\n        ...va(r.name, e, r.result[n])\n    });\n}\nfunction rm(e) {\n    let r = new Pe, t = (n, i)=>r.getOrCreate(n, ()=>i.has(n) ? [\n                n\n            ] : (i.add(n), e[n] ? e[n].needs.flatMap((o)=>t(o, i)) : [\n                n\n            ]));\n    return xr(e, (n)=>({\n            ...n,\n            needs: t(n.name, new Set)\n        }));\n}\nfunction va(e, r, t) {\n    return t ? xr(t, ({ needs: n, compute: i }, o)=>({\n            name: o,\n            needs: n ? Object.keys(n).filter((s)=>n[s]) : [],\n            compute: tm(r, o, i)\n        })) : {};\n}\nfunction tm(e, r, t) {\n    let n = e?.[r]?.compute;\n    return n ? (i)=>t({\n            ...i,\n            [r]: n(i)\n        }) : t;\n}\nfunction Ta(e, r) {\n    if (!r) return e;\n    let t = {\n        ...e\n    };\n    for (let n of Object.values(r))if (e[n.name]) for (let i of n.needs)t[i] = !0;\n    return t;\n}\nfunction Sa(e, r) {\n    if (!r) return e;\n    let t = {\n        ...e\n    };\n    for (let n of Object.values(r))if (!e[n.name]) for (let i of n.needs)delete t[i];\n    return t;\n}\nvar Nn = class {\n    constructor(r, t){\n        this.computedFieldsCache = new Pe;\n        this.modelExtensionsCache = new Pe;\n        this.queryCallbacksCache = new Pe;\n        this.clientExtensions = ut(()=>this.extension.client ? {\n                ...this.previous?.getAllClientExtensions(),\n                ...this.extension.client\n            } : this.previous?.getAllClientExtensions());\n        this.batchCallbacks = ut(()=>{\n            let r = this.previous?.getAllBatchQueryCallbacks() ?? [], t = this.extension.query?.$__internalBatch;\n            return t ? r.concat(t) : r;\n        });\n        this.extension = r;\n        this.previous = t;\n    }\n    getAllComputedFields(r) {\n        return this.computedFieldsCache.getOrCreate(r, ()=>Pa(this.previous?.getAllComputedFields(r), this.extension, r));\n    }\n    getAllClientExtensions() {\n        return this.clientExtensions.get();\n    }\n    getAllModelExtensions(r) {\n        return this.modelExtensionsCache.getOrCreate(r, ()=>{\n            let t = Se(r);\n            return !this.extension.model || !(this.extension.model[t] || this.extension.model.$allModels) ? this.previous?.getAllModelExtensions(r) : {\n                ...this.previous?.getAllModelExtensions(r),\n                ...this.extension.model.$allModels,\n                ...this.extension.model[t]\n            };\n        });\n    }\n    getAllQueryCallbacks(r, t) {\n        return this.queryCallbacksCache.getOrCreate(`${r}:${t}`, ()=>{\n            let n = this.previous?.getAllQueryCallbacks(r, t) ?? [], i = [], o = this.extension.query;\n            return !o || !(o[r] || o.$allModels || o[t] || o.$allOperations) ? n : (o[r] !== void 0 && (o[r][t] !== void 0 && i.push(o[r][t]), o[r].$allOperations !== void 0 && i.push(o[r].$allOperations)), r !== \"$none\" && o.$allModels !== void 0 && (o.$allModels[t] !== void 0 && i.push(o.$allModels[t]), o.$allModels.$allOperations !== void 0 && i.push(o.$allModels.$allOperations)), o[t] !== void 0 && i.push(o[t]), o.$allOperations !== void 0 && i.push(o.$allOperations), n.concat(i));\n        });\n    }\n    getAllBatchQueryCallbacks() {\n        return this.batchCallbacks.get();\n    }\n}, Lr = class e {\n    constructor(r){\n        this.head = r;\n    }\n    static empty() {\n        return new e;\n    }\n    static single(r) {\n        return new e(new Nn(r));\n    }\n    isEmpty() {\n        return this.head === void 0;\n    }\n    append(r) {\n        return new e(new Nn(r, this.head));\n    }\n    getAllComputedFields(r) {\n        return this.head?.getAllComputedFields(r);\n    }\n    getAllClientExtensions() {\n        return this.head?.getAllClientExtensions();\n    }\n    getAllModelExtensions(r) {\n        return this.head?.getAllModelExtensions(r);\n    }\n    getAllQueryCallbacks(r, t) {\n        return this.head?.getAllQueryCallbacks(r, t) ?? [];\n    }\n    getAllBatchQueryCallbacks() {\n        return this.head?.getAllBatchQueryCallbacks() ?? [];\n    }\n};\nvar Ln = class {\n    constructor(r){\n        this.name = r;\n    }\n};\nfunction Ra(e) {\n    return e instanceof Ln;\n}\nfunction Aa(e) {\n    return new Ln(e);\n}\nvar Ca = Symbol(), bt = class {\n    constructor(r){\n        if (r !== Ca) throw new Error(\"Skip instance can not be constructed directly\");\n    }\n    ifUndefined(r) {\n        return r === void 0 ? Fn : r;\n    }\n}, Fn = new bt(Ca);\nfunction Re(e) {\n    return e instanceof bt;\n}\nvar nm = {\n    findUnique: \"findUnique\",\n    findUniqueOrThrow: \"findUniqueOrThrow\",\n    findFirst: \"findFirst\",\n    findFirstOrThrow: \"findFirstOrThrow\",\n    findMany: \"findMany\",\n    count: \"aggregate\",\n    create: \"createOne\",\n    createMany: \"createMany\",\n    createManyAndReturn: \"createManyAndReturn\",\n    update: \"updateOne\",\n    updateMany: \"updateMany\",\n    updateManyAndReturn: \"updateManyAndReturn\",\n    upsert: \"upsertOne\",\n    delete: \"deleteOne\",\n    deleteMany: \"deleteMany\",\n    executeRaw: \"executeRaw\",\n    queryRaw: \"queryRaw\",\n    aggregate: \"aggregate\",\n    groupBy: \"groupBy\",\n    runCommandRaw: \"runCommandRaw\",\n    findRaw: \"findRaw\",\n    aggregateRaw: \"aggregateRaw\"\n}, Ia = \"explicitly `undefined` values are not allowed\";\nfunction Mn({ modelName: e, action: r, args: t, runtimeDataModel: n, extensions: i = Lr.empty(), callsite: o, clientMethod: s, errorFormat: a, clientVersion: l, previewFeatures: u, globalOmit: c }) {\n    let p = new eo({\n        runtimeDataModel: n,\n        modelName: e,\n        action: r,\n        rootArgs: t,\n        callsite: o,\n        extensions: i,\n        selectionPath: [],\n        argumentPath: [],\n        originalMethod: s,\n        errorFormat: a,\n        clientVersion: l,\n        previewFeatures: u,\n        globalOmit: c\n    });\n    return {\n        modelName: e,\n        action: nm[r],\n        query: Et(t, p)\n    };\n}\nfunction Et({ select: e, include: r, ...t } = {}, n) {\n    let i = t.omit;\n    return delete t.omit, {\n        arguments: Da(t, n),\n        selection: im(e, r, i, n)\n    };\n}\nfunction im(e, r, t, n) {\n    return e ? (r ? n.throwValidationError({\n        kind: \"MutuallyExclusiveFields\",\n        firstField: \"include\",\n        secondField: \"select\",\n        selectionPath: n.getSelectionPath()\n    }) : t && n.throwValidationError({\n        kind: \"MutuallyExclusiveFields\",\n        firstField: \"omit\",\n        secondField: \"select\",\n        selectionPath: n.getSelectionPath()\n    }), lm(e, n)) : om(n, r, t);\n}\nfunction om(e, r, t) {\n    let n = {};\n    return e.modelOrType && !e.isRawAction() && (n.$composites = !0, n.$scalars = !0), r && sm(n, r, e), am(n, t, e), n;\n}\nfunction sm(e, r, t) {\n    for (let [n, i] of Object.entries(r)){\n        if (Re(i)) continue;\n        let o = t.nestSelection(n);\n        if (ro(i, o), i === !1 || i === void 0) {\n            e[n] = !1;\n            continue;\n        }\n        let s = t.findField(n);\n        if (s && s.kind !== \"object\" && t.throwValidationError({\n            kind: \"IncludeOnScalar\",\n            selectionPath: t.getSelectionPath().concat(n),\n            outputType: t.getOutputTypeDescription()\n        }), s) {\n            e[n] = Et(i === !0 ? {} : i, o);\n            continue;\n        }\n        if (i === !0) {\n            e[n] = !0;\n            continue;\n        }\n        e[n] = Et(i, o);\n    }\n}\nfunction am(e, r, t) {\n    let n = t.getComputedFields(), i = {\n        ...t.getGlobalOmit(),\n        ...r\n    }, o = Sa(i, n);\n    for (let [s, a] of Object.entries(o)){\n        if (Re(a)) continue;\n        ro(a, t.nestSelection(s));\n        let l = t.findField(s);\n        n?.[s] && !l || (e[s] = !a);\n    }\n}\nfunction lm(e, r) {\n    let t = {}, n = r.getComputedFields(), i = Ta(e, n);\n    for (let [o, s] of Object.entries(i)){\n        if (Re(s)) continue;\n        let a = r.nestSelection(o);\n        ro(s, a);\n        let l = r.findField(o);\n        if (!(n?.[o] && !l)) {\n            if (s === !1 || s === void 0 || Re(s)) {\n                t[o] = !1;\n                continue;\n            }\n            if (s === !0) {\n                l?.kind === \"object\" ? t[o] = Et({}, a) : t[o] = !0;\n                continue;\n            }\n            t[o] = Et(s, a);\n        }\n    }\n    return t;\n}\nfunction ka(e, r) {\n    if (e === null) return null;\n    if (typeof e == \"string\" || typeof e == \"number\" || typeof e == \"boolean\") return e;\n    if (typeof e == \"bigint\") return {\n        $type: \"BigInt\",\n        value: String(e)\n    };\n    if (Sr(e)) {\n        if (wn(e)) return {\n            $type: \"DateTime\",\n            value: e.toISOString()\n        };\n        r.throwValidationError({\n            kind: \"InvalidArgumentValue\",\n            selectionPath: r.getSelectionPath(),\n            argumentPath: r.getArgumentPath(),\n            argument: {\n                name: r.getArgumentName(),\n                typeNames: [\n                    \"Date\"\n                ]\n            },\n            underlyingError: \"Provided Date object is invalid\"\n        });\n    }\n    if (Ra(e)) return {\n        $type: \"Param\",\n        value: e.name\n    };\n    if (_r(e)) return {\n        $type: \"FieldRef\",\n        value: {\n            _ref: e.name,\n            _container: e.modelName\n        }\n    };\n    if (Array.isArray(e)) return um(e, r);\n    if (ArrayBuffer.isView(e)) {\n        let { buffer: t, byteOffset: n, byteLength: i } = e;\n        return {\n            $type: \"Bytes\",\n            value: Buffer.from(t, n, i).toString(\"base64\")\n        };\n    }\n    if (cm(e)) return e.values;\n    if (Rr(e)) return {\n        $type: \"Decimal\",\n        value: e.toFixed()\n    };\n    if (e instanceof Me) {\n        if (e !== kn.instances[e._getName()]) throw new Error(\"Invalid ObjectEnumValue\");\n        return {\n            $type: \"Enum\",\n            value: e._getName()\n        };\n    }\n    if (pm(e)) return e.toJSON();\n    if (typeof e == \"object\") return Da(e, r);\n    r.throwValidationError({\n        kind: \"InvalidArgumentValue\",\n        selectionPath: r.getSelectionPath(),\n        argumentPath: r.getArgumentPath(),\n        argument: {\n            name: r.getArgumentName(),\n            typeNames: []\n        },\n        underlyingError: `We could not serialize ${Object.prototype.toString.call(e)} value. Serialize the object to JSON or implement a \".toJSON()\" method on it`\n    });\n}\nfunction Da(e, r) {\n    if (e.$type) return {\n        $type: \"Raw\",\n        value: e\n    };\n    let t = {};\n    for(let n in e){\n        let i = e[n], o = r.nestArgument(n);\n        Re(i) || (i !== void 0 ? t[n] = ka(i, o) : r.isPreviewFeatureOn(\"strictUndefinedChecks\") && r.throwValidationError({\n            kind: \"InvalidArgumentValue\",\n            argumentPath: o.getArgumentPath(),\n            selectionPath: r.getSelectionPath(),\n            argument: {\n                name: r.getArgumentName(),\n                typeNames: []\n            },\n            underlyingError: Ia\n        }));\n    }\n    return t;\n}\nfunction um(e, r) {\n    let t = [];\n    for(let n = 0; n < e.length; n++){\n        let i = r.nestArgument(String(n)), o = e[n];\n        if (o === void 0 || Re(o)) {\n            let s = o === void 0 ? \"undefined\" : \"Prisma.skip\";\n            r.throwValidationError({\n                kind: \"InvalidArgumentValue\",\n                selectionPath: i.getSelectionPath(),\n                argumentPath: i.getArgumentPath(),\n                argument: {\n                    name: `${r.getArgumentName()}[${n}]`,\n                    typeNames: []\n                },\n                underlyingError: `Can not use \\`${s}\\` value within array. Use \\`null\\` or filter out \\`${s}\\` values`\n            });\n        }\n        t.push(ka(o, i));\n    }\n    return t;\n}\nfunction cm(e) {\n    return typeof e == \"object\" && e !== null && e.__prismaRawParameters__ === !0;\n}\nfunction pm(e) {\n    return typeof e == \"object\" && e !== null && typeof e.toJSON == \"function\";\n}\nfunction ro(e, r) {\n    e === void 0 && r.isPreviewFeatureOn(\"strictUndefinedChecks\") && r.throwValidationError({\n        kind: \"InvalidSelectionValue\",\n        selectionPath: r.getSelectionPath(),\n        underlyingError: Ia\n    });\n}\nvar eo = class e {\n    constructor(r){\n        this.params = r;\n        this.params.modelName && (this.modelOrType = this.params.runtimeDataModel.models[this.params.modelName] ?? this.params.runtimeDataModel.types[this.params.modelName]);\n    }\n    throwValidationError(r) {\n        _n({\n            errors: [\n                r\n            ],\n            originalMethod: this.params.originalMethod,\n            args: this.params.rootArgs ?? {},\n            callsite: this.params.callsite,\n            errorFormat: this.params.errorFormat,\n            clientVersion: this.params.clientVersion,\n            globalOmit: this.params.globalOmit\n        });\n    }\n    getSelectionPath() {\n        return this.params.selectionPath;\n    }\n    getArgumentPath() {\n        return this.params.argumentPath;\n    }\n    getArgumentName() {\n        return this.params.argumentPath[this.params.argumentPath.length - 1];\n    }\n    getOutputTypeDescription() {\n        if (!(!this.params.modelName || !this.modelOrType)) return {\n            name: this.params.modelName,\n            fields: this.modelOrType.fields.map((r)=>({\n                    name: r.name,\n                    typeName: \"boolean\",\n                    isRelation: r.kind === \"object\"\n                }))\n        };\n    }\n    isRawAction() {\n        return [\n            \"executeRaw\",\n            \"queryRaw\",\n            \"runCommandRaw\",\n            \"findRaw\",\n            \"aggregateRaw\"\n        ].includes(this.params.action);\n    }\n    isPreviewFeatureOn(r) {\n        return this.params.previewFeatures.includes(r);\n    }\n    getComputedFields() {\n        if (this.params.modelName) return this.params.extensions.getAllComputedFields(this.params.modelName);\n    }\n    findField(r) {\n        return this.modelOrType?.fields.find((t)=>t.name === r);\n    }\n    nestSelection(r) {\n        let t = this.findField(r), n = t?.kind === \"object\" ? t.type : void 0;\n        return new e({\n            ...this.params,\n            modelName: n,\n            selectionPath: this.params.selectionPath.concat(r)\n        });\n    }\n    getGlobalOmit() {\n        return this.params.modelName && this.shouldApplyGlobalOmit() ? this.params.globalOmit?.[Ye(this.params.modelName)] ?? {} : {};\n    }\n    shouldApplyGlobalOmit() {\n        switch(this.params.action){\n            case \"findFirst\":\n            case \"findFirstOrThrow\":\n            case \"findUniqueOrThrow\":\n            case \"findMany\":\n            case \"upsert\":\n            case \"findUnique\":\n            case \"createManyAndReturn\":\n            case \"create\":\n            case \"update\":\n            case \"updateManyAndReturn\":\n            case \"delete\":\n                return !0;\n            case \"executeRaw\":\n            case \"aggregateRaw\":\n            case \"runCommandRaw\":\n            case \"findRaw\":\n            case \"createMany\":\n            case \"deleteMany\":\n            case \"groupBy\":\n            case \"updateMany\":\n            case \"count\":\n            case \"aggregate\":\n            case \"queryRaw\":\n                return !1;\n            default:\n                Ne(this.params.action, \"Unknown action\");\n        }\n    }\n    nestArgument(r) {\n        return new e({\n            ...this.params,\n            argumentPath: this.params.argumentPath.concat(r)\n        });\n    }\n};\nfunction Oa(e) {\n    if (!e._hasPreviewFlag(\"metrics\")) throw new Z(\"`metrics` preview feature must be enabled in order to access metrics API\", {\n        clientVersion: e._clientVersion\n    });\n}\nvar Fr = class {\n    constructor(r){\n        this._client = r;\n    }\n    prometheus(r) {\n        return Oa(this._client), this._client._engine.metrics({\n            format: \"prometheus\",\n            ...r\n        });\n    }\n    json(r) {\n        return Oa(this._client), this._client._engine.metrics({\n            format: \"json\",\n            ...r\n        });\n    }\n};\nfunction _a(e, r) {\n    let t = ut(()=>dm(r));\n    Object.defineProperty(e, \"dmmf\", {\n        get: ()=>t.get()\n    });\n}\nfunction dm(e) {\n    return {\n        datamodel: {\n            models: to(e.models),\n            enums: to(e.enums),\n            types: to(e.types)\n        }\n    };\n}\nfunction to(e) {\n    return Object.entries(e).map(([r, t])=>({\n            name: r,\n            ...t\n        }));\n}\nvar no = new WeakMap, $n = \"$$PrismaTypedSql\", wt = class {\n    constructor(r, t){\n        no.set(this, {\n            sql: r,\n            values: t\n        }), Object.defineProperty(this, $n, {\n            value: $n\n        });\n    }\n    get sql() {\n        return no.get(this).sql;\n    }\n    get values() {\n        return no.get(this).values;\n    }\n};\nfunction Na(e) {\n    return (...r)=>new wt(e, r);\n}\nfunction qn(e) {\n    return e != null && e[$n] === $n;\n}\nvar fu = C(Si());\nvar gu = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\"), hu = __webpack_require__(/*! node:events */ \"node:events\"), yu = C(__webpack_require__(/*! node:fs */ \"node:fs\")), ti = C(__webpack_require__(/*! node:path */ \"node:path\"));\nvar oe = class e {\n    constructor(r, t){\n        if (r.length - 1 !== t.length) throw r.length === 0 ? new TypeError(\"Expected at least 1 string\") : new TypeError(`Expected ${r.length} strings to have ${r.length - 1} values`);\n        let n = t.reduce((s, a)=>s + (a instanceof e ? a.values.length : 1), 0);\n        this.values = new Array(n), this.strings = new Array(n + 1), this.strings[0] = r[0];\n        let i = 0, o = 0;\n        for(; i < t.length;){\n            let s = t[i++], a = r[i];\n            if (s instanceof e) {\n                this.strings[o] += s.strings[0];\n                let l = 0;\n                for(; l < s.values.length;)this.values[o++] = s.values[l++], this.strings[o] = s.strings[l];\n                this.strings[o] += a;\n            } else this.values[o++] = s, this.strings[o] = a;\n        }\n    }\n    get sql() {\n        let r = this.strings.length, t = 1, n = this.strings[0];\n        for(; t < r;)n += `?${this.strings[t++]}`;\n        return n;\n    }\n    get statement() {\n        let r = this.strings.length, t = 1, n = this.strings[0];\n        for(; t < r;)n += `:${t}${this.strings[t++]}`;\n        return n;\n    }\n    get text() {\n        let r = this.strings.length, t = 1, n = this.strings[0];\n        for(; t < r;)n += `$${t}${this.strings[t++]}`;\n        return n;\n    }\n    inspect() {\n        return {\n            sql: this.sql,\n            statement: this.statement,\n            text: this.text,\n            values: this.values\n        };\n    }\n};\nfunction La(e, r = \",\", t = \"\", n = \"\") {\n    if (e.length === 0) throw new TypeError(\"Expected `join([])` to be called with an array of multiple elements, but got an empty array\");\n    return new oe([\n        t,\n        ...Array(e.length - 1).fill(r),\n        n\n    ], e);\n}\nfunction io(e) {\n    return new oe([\n        e\n    ], []);\n}\nvar Fa = io(\"\");\nfunction oo(e, ...r) {\n    return new oe(e, r);\n}\nfunction xt(e) {\n    return {\n        getKeys () {\n            return Object.keys(e);\n        },\n        getPropertyValue (r) {\n            return e[r];\n        }\n    };\n}\nfunction re(e, r) {\n    return {\n        getKeys () {\n            return [\n                e\n            ];\n        },\n        getPropertyValue () {\n            return r();\n        }\n    };\n}\nfunction lr(e) {\n    let r = new Pe;\n    return {\n        getKeys () {\n            return e.getKeys();\n        },\n        getPropertyValue (t) {\n            return r.getOrCreate(t, ()=>e.getPropertyValue(t));\n        },\n        getPropertyDescriptor (t) {\n            return e.getPropertyDescriptor?.(t);\n        }\n    };\n}\nvar jn = {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n};\nfunction Vn(e) {\n    let r = new Set(e);\n    return {\n        getPrototypeOf: ()=>Object.prototype,\n        getOwnPropertyDescriptor: ()=>jn,\n        has: (t, n)=>r.has(n),\n        set: (t, n, i)=>r.add(n) && Reflect.set(t, n, i),\n        ownKeys: ()=>[\n                ...r\n            ]\n    };\n}\nvar Ma = Symbol.for(\"nodejs.util.inspect.custom\");\nfunction he(e, r) {\n    let t = mm(r), n = new Set, i = new Proxy(e, {\n        get (o, s) {\n            if (n.has(s)) return o[s];\n            let a = t.get(s);\n            return a ? a.getPropertyValue(s) : o[s];\n        },\n        has (o, s) {\n            if (n.has(s)) return !0;\n            let a = t.get(s);\n            return a ? a.has?.(s) ?? !0 : Reflect.has(o, s);\n        },\n        ownKeys (o) {\n            let s = $a(Reflect.ownKeys(o), t), a = $a(Array.from(t.keys()), t);\n            return [\n                ...new Set([\n                    ...s,\n                    ...a,\n                    ...n\n                ])\n            ];\n        },\n        set (o, s, a) {\n            return t.get(s)?.getPropertyDescriptor?.(s)?.writable === !1 ? !1 : (n.add(s), Reflect.set(o, s, a));\n        },\n        getOwnPropertyDescriptor (o, s) {\n            let a = Reflect.getOwnPropertyDescriptor(o, s);\n            if (a && !a.configurable) return a;\n            let l = t.get(s);\n            return l ? l.getPropertyDescriptor ? {\n                ...jn,\n                ...l?.getPropertyDescriptor(s)\n            } : jn : a;\n        },\n        defineProperty (o, s, a) {\n            return n.add(s), Reflect.defineProperty(o, s, a);\n        },\n        getPrototypeOf: ()=>Object.prototype\n    });\n    return i[Ma] = function() {\n        let o = {\n            ...this\n        };\n        return delete o[Ma], o;\n    }, i;\n}\nfunction mm(e) {\n    let r = new Map;\n    for (let t of e){\n        let n = t.getKeys();\n        for (let i of n)r.set(i, t);\n    }\n    return r;\n}\nfunction $a(e, r) {\n    return e.filter((t)=>r.get(t)?.has?.(t) ?? !0);\n}\nfunction Mr(e) {\n    return {\n        getKeys () {\n            return e;\n        },\n        has () {\n            return !1;\n        },\n        getPropertyValue () {}\n    };\n}\nfunction $r(e, r) {\n    return {\n        batch: e,\n        transaction: r?.kind === \"batch\" ? {\n            isolationLevel: r.options.isolationLevel\n        } : void 0\n    };\n}\nfunction qa(e) {\n    if (e === void 0) return \"\";\n    let r = Nr(e);\n    return new Cr(0, {\n        colors: An\n    }).write(r).toString();\n}\nvar fm = \"P2037\";\nfunction qr({ error: e, user_facing_error: r }, t, n) {\n    return r.error_code ? new z(gm(r, n), {\n        code: r.error_code,\n        clientVersion: t,\n        meta: r.meta,\n        batchRequestIdx: r.batch_request_idx\n    }) : new j(e, {\n        clientVersion: t,\n        batchRequestIdx: r.batch_request_idx\n    });\n}\nfunction gm(e, r) {\n    let t = e.message;\n    return (r === \"postgresql\" || r === \"postgres\" || r === \"mysql\") && e.error_code === fm && (t += `\nPrisma Accelerate has built-in connection pooling to prevent such errors: https://pris.ly/client/error-accelerate`), t;\n}\nvar vt = \"<unknown>\";\nfunction ja(e) {\n    var r = e.split(`\n`);\n    return r.reduce(function(t, n) {\n        var i = bm(n) || wm(n) || Pm(n) || Am(n) || Sm(n);\n        return i && t.push(i), t;\n    }, []);\n}\nvar hm = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|webpack|rsc|<anonymous>|\\/|[a-z]:\\\\|\\\\\\\\).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i, ym = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\nfunction bm(e) {\n    var r = hm.exec(e);\n    if (!r) return null;\n    var t = r[2] && r[2].indexOf(\"native\") === 0, n = r[2] && r[2].indexOf(\"eval\") === 0, i = ym.exec(r[2]);\n    return n && i != null && (r[2] = i[1], r[3] = i[2], r[4] = i[3]), {\n        file: t ? null : r[2],\n        methodName: r[1] || vt,\n        arguments: t ? [\n            r[2]\n        ] : [],\n        lineNumber: r[3] ? +r[3] : null,\n        column: r[4] ? +r[4] : null\n    };\n}\nvar Em = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|rsc|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nfunction wm(e) {\n    var r = Em.exec(e);\n    return r ? {\n        file: r[2],\n        methodName: r[1] || vt,\n        arguments: [],\n        lineNumber: +r[3],\n        column: r[4] ? +r[4] : null\n    } : null;\n}\nvar xm = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|rsc|resource|\\[native).*?|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i, vm = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\nfunction Pm(e) {\n    var r = xm.exec(e);\n    if (!r) return null;\n    var t = r[3] && r[3].indexOf(\" > eval\") > -1, n = vm.exec(r[3]);\n    return t && n != null && (r[3] = n[1], r[4] = n[2], r[5] = null), {\n        file: r[3],\n        methodName: r[1] || vt,\n        arguments: r[2] ? r[2].split(\",\") : [],\n        lineNumber: r[4] ? +r[4] : null,\n        column: r[5] ? +r[5] : null\n    };\n}\nvar Tm = /^\\s*(?:([^@]*)(?:\\((.*?)\\))?@)?(\\S.*?):(\\d+)(?::(\\d+))?\\s*$/i;\nfunction Sm(e) {\n    var r = Tm.exec(e);\n    return r ? {\n        file: r[3],\n        methodName: r[1] || vt,\n        arguments: [],\n        lineNumber: +r[4],\n        column: r[5] ? +r[5] : null\n    } : null;\n}\nvar Rm = /^\\s*at (?:((?:\\[object object\\])?[^\\\\/]+(?: \\[as \\S+\\])?) )?\\(?(.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nfunction Am(e) {\n    var r = Rm.exec(e);\n    return r ? {\n        file: r[2],\n        methodName: r[1] || vt,\n        arguments: [],\n        lineNumber: +r[3],\n        column: r[4] ? +r[4] : null\n    } : null;\n}\nvar so = class {\n    getLocation() {\n        return null;\n    }\n}, ao = class {\n    constructor(){\n        this._error = new Error;\n    }\n    getLocation() {\n        let r = this._error.stack;\n        if (!r) return null;\n        let n = ja(r).find((i)=>{\n            if (!i.file) return !1;\n            let o = Fi(i.file);\n            return o !== \"<anonymous>\" && !o.includes(\"@prisma\") && !o.includes(\"/packages/client/src/runtime/\") && !o.endsWith(\"/runtime/binary.js\") && !o.endsWith(\"/runtime/library.js\") && !o.endsWith(\"/runtime/edge.js\") && !o.endsWith(\"/runtime/edge-esm.js\") && !o.startsWith(\"internal/\") && !i.methodName.includes(\"new \") && !i.methodName.includes(\"getCallSite\") && !i.methodName.includes(\"Proxy.\") && i.methodName.split(\".\").length < 4;\n        });\n        return !n || !n.file ? null : {\n            fileName: n.file,\n            lineNumber: n.lineNumber,\n            columnNumber: n.column\n        };\n    }\n};\nfunction Ze(e) {\n    return e === \"minimal\" ? typeof $EnabledCallSite == \"function\" && e !== \"minimal\" ? new $EnabledCallSite : new so : new ao;\n}\nvar Va = {\n    _avg: !0,\n    _count: !0,\n    _sum: !0,\n    _min: !0,\n    _max: !0\n};\nfunction jr(e = {}) {\n    let r = Im(e);\n    return Object.entries(r).reduce((n, [i, o])=>(Va[i] !== void 0 ? n.select[i] = {\n            select: o\n        } : n[i] = o, n), {\n        select: {}\n    });\n}\nfunction Im(e = {}) {\n    return typeof e._count == \"boolean\" ? {\n        ...e,\n        _count: {\n            _all: e._count\n        }\n    } : e;\n}\nfunction Bn(e = {}) {\n    return (r)=>(typeof e._count == \"boolean\" && (r._count = r._count._all), r);\n}\nfunction Ba(e, r) {\n    let t = Bn(e);\n    return r({\n        action: \"aggregate\",\n        unpacker: t,\n        argsMapper: jr\n    })(e);\n}\nfunction km(e = {}) {\n    let { select: r, ...t } = e;\n    return typeof r == \"object\" ? jr({\n        ...t,\n        _count: r\n    }) : jr({\n        ...t,\n        _count: {\n            _all: !0\n        }\n    });\n}\nfunction Dm(e = {}) {\n    return typeof e.select == \"object\" ? (r)=>Bn(e)(r)._count : (r)=>Bn(e)(r)._count._all;\n}\nfunction Ua(e, r) {\n    return r({\n        action: \"count\",\n        unpacker: Dm(e),\n        argsMapper: km\n    })(e);\n}\nfunction Om(e = {}) {\n    let r = jr(e);\n    if (Array.isArray(r.by)) for (let t of r.by)typeof t == \"string\" && (r.select[t] = !0);\n    else typeof r.by == \"string\" && (r.select[r.by] = !0);\n    return r;\n}\nfunction _m(e = {}) {\n    return (r)=>(typeof e?._count == \"boolean\" && r.forEach((t)=>{\n            t._count = t._count._all;\n        }), r);\n}\nfunction Ga(e, r) {\n    return r({\n        action: \"groupBy\",\n        unpacker: _m(e),\n        argsMapper: Om\n    })(e);\n}\nfunction Qa(e, r, t) {\n    if (r === \"aggregate\") return (n)=>Ba(n, t);\n    if (r === \"count\") return (n)=>Ua(n, t);\n    if (r === \"groupBy\") return (n)=>Ga(n, t);\n}\nfunction Wa(e, r) {\n    let t = r.fields.filter((i)=>!i.relationName), n = Zs(t, \"name\");\n    return new Proxy({}, {\n        get (i, o) {\n            if (o in i || typeof o == \"symbol\") return i[o];\n            let s = n[o];\n            if (s) return new mt(e, o, s.type, s.isList, s.kind === \"enum\");\n        },\n        ...Vn(Object.keys(n))\n    });\n}\nvar Ja = (e)=>Array.isArray(e) ? e : e.split(\".\"), lo = (e, r)=>Ja(r).reduce((t, n)=>t && t[n], e), Ha = (e, r, t)=>Ja(r).reduceRight((n, i, o, s)=>Object.assign({}, lo(e, s.slice(0, o)), {\n            [i]: n\n        }), t);\nfunction Nm(e, r) {\n    return e === void 0 || r === void 0 ? [] : [\n        ...r,\n        \"select\",\n        e\n    ];\n}\nfunction Lm(e, r, t) {\n    return r === void 0 ? e ?? {} : Ha(r, t, e || !0);\n}\nfunction uo(e, r, t, n, i, o) {\n    let a = e._runtimeDataModel.models[r].fields.reduce((l, u)=>({\n            ...l,\n            [u.name]: u\n        }), {});\n    return (l)=>{\n        let u = Ze(e._errorFormat), c = Nm(n, i), p = Lm(l, o, c), d = t({\n            dataPath: c,\n            callsite: u\n        })(p), f = Fm(e, r);\n        return new Proxy(d, {\n            get (h, g) {\n                if (!f.includes(g)) return h[g];\n                let P = [\n                    a[g].type,\n                    t,\n                    g\n                ], R = [\n                    c,\n                    p\n                ];\n                return uo(e, ...P, ...R);\n            },\n            ...Vn([\n                ...f,\n                ...Object.getOwnPropertyNames(d)\n            ])\n        });\n    };\n}\nfunction Fm(e, r) {\n    return e._runtimeDataModel.models[r].fields.filter((t)=>t.kind === \"object\").map((t)=>t.name);\n}\nvar Mm = [\n    \"findUnique\",\n    \"findUniqueOrThrow\",\n    \"findFirst\",\n    \"findFirstOrThrow\",\n    \"create\",\n    \"update\",\n    \"upsert\",\n    \"delete\"\n], $m = [\n    \"aggregate\",\n    \"count\",\n    \"groupBy\"\n];\nfunction co(e, r) {\n    let t = e._extensions.getAllModelExtensions(r) ?? {}, n = [\n        qm(e, r),\n        Vm(e, r),\n        xt(t),\n        re(\"name\", ()=>r),\n        re(\"$name\", ()=>r),\n        re(\"$parent\", ()=>e._appliedParent)\n    ];\n    return he({}, n);\n}\nfunction qm(e, r) {\n    let t = Se(r), n = Object.keys(Ar).concat(\"count\");\n    return {\n        getKeys () {\n            return n;\n        },\n        getPropertyValue (i) {\n            let o = i, s = (a)=>(l)=>{\n                    let u = Ze(e._errorFormat);\n                    return e._createPrismaPromise((c)=>{\n                        let p = {\n                            args: l,\n                            dataPath: [],\n                            action: o,\n                            model: r,\n                            clientMethod: `${t}.${i}`,\n                            jsModelName: t,\n                            transaction: c,\n                            callsite: u\n                        };\n                        return e._request({\n                            ...p,\n                            ...a\n                        });\n                    }, {\n                        action: o,\n                        args: l,\n                        model: r\n                    });\n                };\n            return Mm.includes(o) ? uo(e, r, s) : jm(i) ? Qa(e, i, s) : s({});\n        }\n    };\n}\nfunction jm(e) {\n    return $m.includes(e);\n}\nfunction Vm(e, r) {\n    return lr(re(\"fields\", ()=>{\n        let t = e._runtimeDataModel.models[r];\n        return Wa(r, t);\n    }));\n}\nfunction Ka(e) {\n    return e.replace(/^./, (r)=>r.toUpperCase());\n}\nvar po = Symbol();\nfunction Pt(e) {\n    let r = [\n        Bm(e),\n        Um(e),\n        re(po, ()=>e),\n        re(\"$parent\", ()=>e._appliedParent)\n    ], t = e._extensions.getAllClientExtensions();\n    return t && r.push(xt(t)), he(e, r);\n}\nfunction Bm(e) {\n    let r = Object.getPrototypeOf(e._originalClient), t = [\n        ...new Set(Object.getOwnPropertyNames(r))\n    ];\n    return {\n        getKeys () {\n            return t;\n        },\n        getPropertyValue (n) {\n            return e[n];\n        }\n    };\n}\nfunction Um(e) {\n    let r = Object.keys(e._runtimeDataModel.models), t = r.map(Se), n = [\n        ...new Set(r.concat(t))\n    ];\n    return lr({\n        getKeys () {\n            return n;\n        },\n        getPropertyValue (i) {\n            let o = Ka(i);\n            if (e._runtimeDataModel.models[o] !== void 0) return co(e, o);\n            if (e._runtimeDataModel.models[i] !== void 0) return co(e, i);\n        },\n        getPropertyDescriptor (i) {\n            if (!t.includes(i)) return {\n                enumerable: !1\n            };\n        }\n    });\n}\nfunction Ya(e) {\n    return e[po] ? e[po] : e;\n}\nfunction za(e) {\n    if (typeof e == \"function\") return e(this);\n    if (e.client?.__AccelerateEngine) {\n        let t = e.client.__AccelerateEngine;\n        this._originalClient._engine = new t(this._originalClient._accelerateEngineConfig);\n    }\n    let r = Object.create(this._originalClient, {\n        _extensions: {\n            value: this._extensions.append(e)\n        },\n        _appliedParent: {\n            value: this,\n            configurable: !0\n        },\n        $use: {\n            value: void 0\n        },\n        $on: {\n            value: void 0\n        }\n    });\n    return Pt(r);\n}\nfunction Za({ result: e, modelName: r, select: t, omit: n, extensions: i }) {\n    let o = i.getAllComputedFields(r);\n    if (!o) return e;\n    let s = [], a = [];\n    for (let l of Object.values(o)){\n        if (n) {\n            if (n[l.name]) continue;\n            let u = l.needs.filter((c)=>n[c]);\n            u.length > 0 && a.push(Mr(u));\n        } else if (t) {\n            if (!t[l.name]) continue;\n            let u = l.needs.filter((c)=>!t[c]);\n            u.length > 0 && a.push(Mr(u));\n        }\n        Gm(e, l.needs) && s.push(Qm(l, he(e, s)));\n    }\n    return s.length > 0 || a.length > 0 ? he(e, [\n        ...s,\n        ...a\n    ]) : e;\n}\nfunction Gm(e, r) {\n    return r.every((t)=>Vi(e, t));\n}\nfunction Qm(e, r) {\n    return lr(re(e.name, ()=>e.compute(r)));\n}\nfunction Un({ visitor: e, result: r, args: t, runtimeDataModel: n, modelName: i }) {\n    if (Array.isArray(r)) {\n        for(let s = 0; s < r.length; s++)r[s] = Un({\n            result: r[s],\n            args: t,\n            modelName: i,\n            runtimeDataModel: n,\n            visitor: e\n        });\n        return r;\n    }\n    let o = e(r, i, t) ?? r;\n    return t.include && Xa({\n        includeOrSelect: t.include,\n        result: o,\n        parentModelName: i,\n        runtimeDataModel: n,\n        visitor: e\n    }), t.select && Xa({\n        includeOrSelect: t.select,\n        result: o,\n        parentModelName: i,\n        runtimeDataModel: n,\n        visitor: e\n    }), o;\n}\nfunction Xa({ includeOrSelect: e, result: r, parentModelName: t, runtimeDataModel: n, visitor: i }) {\n    for (let [o, s] of Object.entries(e)){\n        if (!s || r[o] == null || Re(s)) continue;\n        let l = n.models[t].fields.find((c)=>c.name === o);\n        if (!l || l.kind !== \"object\" || !l.relationName) continue;\n        let u = typeof s == \"object\" ? s : {};\n        r[o] = Un({\n            visitor: i,\n            result: r[o],\n            args: u,\n            modelName: l.type,\n            runtimeDataModel: n\n        });\n    }\n}\nfunction el({ result: e, modelName: r, args: t, extensions: n, runtimeDataModel: i, globalOmit: o }) {\n    return n.isEmpty() || e == null || typeof e != \"object\" || !i.models[r] ? e : Un({\n        result: e,\n        args: t ?? {},\n        modelName: r,\n        runtimeDataModel: i,\n        visitor: (a, l, u)=>{\n            let c = Se(l);\n            return Za({\n                result: a,\n                modelName: c,\n                select: u.select,\n                omit: u.select ? void 0 : {\n                    ...o?.[c],\n                    ...u.omit\n                },\n                extensions: n\n            });\n        }\n    });\n}\nvar Wm = [\n    \"$connect\",\n    \"$disconnect\",\n    \"$on\",\n    \"$transaction\",\n    \"$use\",\n    \"$extends\"\n], rl = Wm;\nfunction tl(e) {\n    if (e instanceof oe) return Jm(e);\n    if (qn(e)) return Hm(e);\n    if (Array.isArray(e)) {\n        let t = [\n            e[0]\n        ];\n        for(let n = 1; n < e.length; n++)t[n] = Tt(e[n]);\n        return t;\n    }\n    let r = {};\n    for(let t in e)r[t] = Tt(e[t]);\n    return r;\n}\nfunction Jm(e) {\n    return new oe(e.strings, e.values);\n}\nfunction Hm(e) {\n    return new wt(e.sql, e.values);\n}\nfunction Tt(e) {\n    if (typeof e != \"object\" || e == null || e instanceof Me || _r(e)) return e;\n    if (Rr(e)) return new ve(e.toFixed());\n    if (Sr(e)) return new Date(+e);\n    if (ArrayBuffer.isView(e)) return e.slice(0);\n    if (Array.isArray(e)) {\n        let r = e.length, t;\n        for(t = Array(r); r--;)t[r] = Tt(e[r]);\n        return t;\n    }\n    if (typeof e == \"object\") {\n        let r = {};\n        for(let t in e)t === \"__proto__\" ? Object.defineProperty(r, t, {\n            value: Tt(e[t]),\n            configurable: !0,\n            enumerable: !0,\n            writable: !0\n        }) : r[t] = Tt(e[t]);\n        return r;\n    }\n    Ne(e, \"Unknown value\");\n}\nfunction il(e, r, t, n = 0) {\n    return e._createPrismaPromise((i)=>{\n        let o = r.customDataProxyFetch;\n        return \"transaction\" in r && i !== void 0 && (r.transaction?.kind === \"batch\" && r.transaction.lock.then(), r.transaction = i), n === t.length ? e._executeRequest(r) : t[n]({\n            model: r.model,\n            operation: r.model ? r.action : r.clientMethod,\n            args: tl(r.args ?? {}),\n            __internalParams: r,\n            query: (s, a = r)=>{\n                let l = a.customDataProxyFetch;\n                return a.customDataProxyFetch = ll(o, l), a.args = s, il(e, a, t, n + 1);\n            }\n        });\n    });\n}\nfunction ol(e, r) {\n    let { jsModelName: t, action: n, clientMethod: i } = r, o = t ? n : i;\n    if (e._extensions.isEmpty()) return e._executeRequest(r);\n    let s = e._extensions.getAllQueryCallbacks(t ?? \"$none\", o);\n    return il(e, r, s);\n}\nfunction sl(e) {\n    return (r)=>{\n        let t = {\n            requests: r\n        }, n = r[0].extensions.getAllBatchQueryCallbacks();\n        return n.length ? al(t, n, 0, e) : e(t);\n    };\n}\nfunction al(e, r, t, n) {\n    if (t === r.length) return n(e);\n    let i = e.customDataProxyFetch, o = e.requests[0].transaction;\n    return r[t]({\n        args: {\n            queries: e.requests.map((s)=>({\n                    model: s.modelName,\n                    operation: s.action,\n                    args: s.args\n                })),\n            transaction: o ? {\n                isolationLevel: o.kind === \"batch\" ? o.isolationLevel : void 0\n            } : void 0\n        },\n        __internalParams: e,\n        query (s, a = e) {\n            let l = a.customDataProxyFetch;\n            return a.customDataProxyFetch = ll(i, l), al(a, r, t + 1, n);\n        }\n    });\n}\nvar nl = (e)=>e;\nfunction ll(e = nl, r = nl) {\n    return (t)=>e(r(t));\n}\nvar ul = N(\"prisma:client\"), cl = {\n    Vercel: \"vercel\",\n    \"Netlify CI\": \"netlify\"\n};\nfunction pl({ postinstall: e, ciName: r, clientVersion: t }) {\n    if (ul(\"checkPlatformCaching:postinstall\", e), ul(\"checkPlatformCaching:ciName\", r), e === !0 && r && r in cl) {\n        let n = `Prisma has detected that this project was built on ${r}, which caches dependencies. This leads to an outdated Prisma Client because Prisma's auto-generation isn't triggered. To fix this, make sure to run the \\`prisma generate\\` command during the build process.\n\nLearn how: https://pris.ly/d/${cl[r]}-build`;\n        throw console.error(n), new T(n, t);\n    }\n}\nfunction dl(e, r) {\n    return e ? e.datasources ? e.datasources : e.datasourceUrl ? {\n        [r[0]]: {\n            url: e.datasourceUrl\n        }\n    } : {} : {};\n}\nvar Km = ()=>globalThis.process?.release?.name === \"node\", Ym = ()=>!!globalThis.Bun || !!globalThis.process?.versions?.bun, zm = ()=>!!globalThis.Deno, Zm = ()=>typeof globalThis.Netlify == \"object\", Xm = ()=>typeof globalThis.EdgeRuntime == \"object\", ef = ()=>globalThis.navigator?.userAgent === \"Cloudflare-Workers\";\nfunction rf() {\n    return [\n        [\n            Zm,\n            \"netlify\"\n        ],\n        [\n            Xm,\n            \"edge-light\"\n        ],\n        [\n            ef,\n            \"workerd\"\n        ],\n        [\n            zm,\n            \"deno\"\n        ],\n        [\n            Ym,\n            \"bun\"\n        ],\n        [\n            Km,\n            \"node\"\n        ]\n    ].flatMap((t)=>t[0]() ? [\n            t[1]\n        ] : []).at(0) ?? \"\";\n}\nvar tf = {\n    node: \"Node.js\",\n    workerd: \"Cloudflare Workers\",\n    deno: \"Deno and Deno Deploy\",\n    netlify: \"Netlify Edge Functions\",\n    \"edge-light\": \"Edge Runtime (Vercel Edge Functions, Vercel Edge Middleware, Next.js (Pages Router) Edge API Routes, Next.js (App Router) Edge Route Handlers or Next.js Middleware)\"\n};\nfunction Gn() {\n    let e = rf();\n    return {\n        id: e,\n        prettyName: tf[e] || e,\n        isEdge: [\n            \"workerd\",\n            \"deno\",\n            \"netlify\",\n            \"edge-light\"\n        ].includes(e)\n    };\n}\nvar yl = C(__webpack_require__(/*! node:fs */ \"node:fs\")), St = C(__webpack_require__(/*! node:path */ \"node:path\"));\nfunction Qn(e) {\n    let { runtimeBinaryTarget: r } = e;\n    return `Add \"${r}\" to \\`binaryTargets\\` in the \"schema.prisma\" file and run \\`prisma generate\\` after saving it:\n\n${nf(e)}`;\n}\nfunction nf(e) {\n    let { generator: r, generatorBinaryTargets: t, runtimeBinaryTarget: n } = e, i = {\n        fromEnvVar: null,\n        value: n\n    }, o = [\n        ...t,\n        i\n    ];\n    return _i({\n        ...r,\n        binaryTargets: o\n    });\n}\nfunction Xe(e) {\n    let { runtimeBinaryTarget: r } = e;\n    return `Prisma Client could not locate the Query Engine for runtime \"${r}\".`;\n}\nfunction er(e) {\n    let { searchedLocations: r } = e;\n    return `The following locations have been searched:\n${[\n        ...new Set(r)\n    ].map((i)=>`  ${i}`).join(`\n`)}`;\n}\nfunction ml(e) {\n    let { runtimeBinaryTarget: r } = e;\n    return `${Xe(e)}\n\nThis happened because \\`binaryTargets\\` have been pinned, but the actual deployment also required \"${r}\".\n${Qn(e)}\n\n${er(e)}`;\n}\nfunction Wn(e) {\n    return `We would appreciate if you could take the time to share some information with us.\nPlease help us by answering a few questions: https://pris.ly/${e}`;\n}\nfunction Jn(e) {\n    let { errorStack: r } = e;\n    return r?.match(/\\/\\.next|\\/next@|\\/next\\//) ? `\n\nWe detected that you are using Next.js, learn how to fix this: https://pris.ly/d/engine-not-found-nextjs.` : \"\";\n}\nfunction fl(e) {\n    let { queryEngineName: r } = e;\n    return `${Xe(e)}${Jn(e)}\n\nThis is likely caused by a bundler that has not copied \"${r}\" next to the resulting bundle.\nEnsure that \"${r}\" has been copied next to the bundle or in \"${e.expectedLocation}\".\n\n${Wn(\"engine-not-found-bundler-investigation\")}\n\n${er(e)}`;\n}\nfunction gl(e) {\n    let { runtimeBinaryTarget: r, generatorBinaryTargets: t } = e, n = t.find((i)=>i.native);\n    return `${Xe(e)}\n\nThis happened because Prisma Client was generated for \"${n?.value ?? \"unknown\"}\", but the actual deployment required \"${r}\".\n${Qn(e)}\n\n${er(e)}`;\n}\nfunction hl(e) {\n    let { queryEngineName: r } = e;\n    return `${Xe(e)}${Jn(e)}\n\nThis is likely caused by tooling that has not copied \"${r}\" to the deployment folder.\nEnsure that you ran \\`prisma generate\\` and that \"${r}\" has been copied to \"${e.expectedLocation}\".\n\n${Wn(\"engine-not-found-tooling-investigation\")}\n\n${er(e)}`;\n}\nvar of = N(\"prisma:client:engines:resolveEnginePath\"), sf = ()=>new RegExp(\"runtime[\\\\\\\\/]library\\\\.m?js$\");\nasync function bl(e, r) {\n    let t = {\n        binary: process.env.PRISMA_QUERY_ENGINE_BINARY,\n        library: process.env.PRISMA_QUERY_ENGINE_LIBRARY\n    }[e] ?? r.prismaPath;\n    if (t !== void 0) return t;\n    let { enginePath: n, searchedLocations: i } = await af(e, r);\n    if (of(\"enginePath\", n), n !== void 0 && e === \"binary\" && Ai(n), n !== void 0) return r.prismaPath = n;\n    let o = await ir(), s = r.generator?.binaryTargets ?? [], a = s.some((d)=>d.native), l = !s.some((d)=>d.value === o), u = __filename.match(sf()) === null, c = {\n        searchedLocations: i,\n        generatorBinaryTargets: s,\n        generator: r.generator,\n        runtimeBinaryTarget: o,\n        queryEngineName: El(e, o),\n        expectedLocation: St.default.relative(process.cwd(), r.dirname),\n        errorStack: new Error().stack\n    }, p;\n    throw a && l ? p = gl(c) : l ? p = ml(c) : u ? p = fl(c) : p = hl(c), new T(p, r.clientVersion);\n}\nasync function af(e, r) {\n    let t = await ir(), n = [], i = [\n        r.dirname,\n        St.default.resolve(__dirname, \"..\"),\n        r.generator?.output?.value ?? __dirname,\n        St.default.resolve(__dirname, \"../../../.prisma/client\"),\n        \"/tmp/prisma-engines\",\n        r.cwd\n    ];\n    __filename.includes(\"resolveEnginePath\") && i.push(gs());\n    for (let o of i){\n        let s = El(e, t), a = St.default.join(o, s);\n        if (n.push(o), yl.default.existsSync(a)) return {\n            enginePath: a,\n            searchedLocations: n\n        };\n    }\n    return {\n        enginePath: void 0,\n        searchedLocations: n\n    };\n}\nfunction El(e, r) {\n    return e === \"library\" ? Gt(r, \"fs\") : `query-engine-${r}${r === \"windows\" ? \".exe\" : \"\"}`;\n}\nvar mo = C(Li());\nfunction wl(e) {\n    return e ? e.replace(/\".*\"/g, '\"X\"').replace(/[\\s:\\[]([+-]?([0-9]*[.])?[0-9]+)/g, (r)=>`${r[0]}5`) : \"\";\n}\nfunction xl(e) {\n    return e.split(`\n`).map((r)=>r.replace(/^\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)\\s*/, \"\").replace(/\\+\\d+\\s*ms$/, \"\")).join(`\n`);\n}\nvar vl = C(Fs());\nfunction Pl({ title: e, user: r = \"prisma\", repo: t = \"prisma\", template: n = \"bug_report.yml\", body: i }) {\n    return (0, vl.default)({\n        user: r,\n        repo: t,\n        template: n,\n        title: e,\n        body: i\n    });\n}\nfunction Tl({ version: e, binaryTarget: r, title: t, description: n, engineVersion: i, database: o, query: s }) {\n    let a = Go(6e3 - (s?.length ?? 0)), l = xl((0, mo.default)(a)), u = n ? `# Description\n\\`\\`\\`\n${n}\n\\`\\`\\`` : \"\", c = (0, mo.default)(`Hi Prisma Team! My Prisma Client just crashed. This is the report:\n## Versions\n\n| Name            | Version            |\n|-----------------|--------------------|\n| Node            | ${process.version?.padEnd(19)}| \n| OS              | ${r?.padEnd(19)}|\n| Prisma Client   | ${e?.padEnd(19)}|\n| Query Engine    | ${i?.padEnd(19)}|\n| Database        | ${o?.padEnd(19)}|\n\n${u}\n\n## Logs\n\\`\\`\\`\n${l}\n\\`\\`\\`\n\n## Client Snippet\n\\`\\`\\`ts\n// PLEASE FILL YOUR CODE SNIPPET HERE\n\\`\\`\\`\n\n## Schema\n\\`\\`\\`prisma\n// PLEASE ADD YOUR SCHEMA HERE IF POSSIBLE\n\\`\\`\\`\n\n## Prisma Engine Query\n\\`\\`\\`\n${s ? wl(s) : \"\"}\n\\`\\`\\`\n`), p = Pl({\n        title: t,\n        body: c\n    });\n    return `${t}\n\nThis is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.\n\n${Y(p)}\n\nIf you want the Prisma team to look into it, please open the link above \\u{1F64F}\nTo increase the chance of success, please post your schema and a snippet of\nhow you used Prisma Client in the issue. \n`;\n}\nvar Sl = \"6.13.0\";\nfunction Vr({ inlineDatasources: e, overrideDatasources: r, env: t, clientVersion: n }) {\n    let i, o = Object.keys(e)[0], s = e[o]?.url, a = r[o]?.url;\n    if (o === void 0 ? i = void 0 : a ? i = a : s?.value ? i = s.value : s?.fromEnvVar && (i = t[s.fromEnvVar]), s?.fromEnvVar !== void 0 && i === void 0) throw new T(`error: Environment variable not found: ${s.fromEnvVar}.`, n);\n    if (i === void 0) throw new T(\"error: Missing URL environment variable, value, or override.\", n);\n    return i;\n}\nvar Hn = class extends Error {\n    constructor(r, t){\n        super(r), this.clientVersion = t.clientVersion, this.cause = t.cause;\n    }\n    get [Symbol.toStringTag]() {\n        return this.name;\n    }\n};\nvar se = class extends Hn {\n    constructor(r, t){\n        super(r, t), this.isRetryable = t.isRetryable ?? !0;\n    }\n};\nfunction A(e, r) {\n    return {\n        ...e,\n        isRetryable: r\n    };\n}\nvar ur = class extends se {\n    constructor(r, t){\n        super(r, A(t, !1)), this.name = \"InvalidDatasourceError\", this.code = \"P6001\";\n    }\n};\nx(ur, \"InvalidDatasourceError\");\nfunction Rl(e) {\n    let r = {\n        clientVersion: e.clientVersion\n    }, t = Object.keys(e.inlineDatasources)[0], n = Vr({\n        inlineDatasources: e.inlineDatasources,\n        overrideDatasources: e.overrideDatasources,\n        clientVersion: e.clientVersion,\n        env: {\n            ...e.env,\n            ...typeof process < \"u\" ? process.env : {}\n        }\n    }), i;\n    try {\n        i = new URL(n);\n    } catch  {\n        throw new ur(`Error validating datasource \\`${t}\\`: the URL must start with the protocol \\`prisma://\\``, r);\n    }\n    let { protocol: o, searchParams: s } = i;\n    if (o !== \"prisma:\" && o !== sn) throw new ur(`Error validating datasource \\`${t}\\`: the URL must start with the protocol \\`prisma://\\` or \\`prisma+postgres://\\``, r);\n    let a = s.get(\"api_key\");\n    if (a === null || a.length < 1) throw new ur(`Error validating datasource \\`${t}\\`: the URL must contain a valid API key`, r);\n    let l = ki(i) ? \"http:\" : \"https:\", u = new URL(i.href.replace(o, l));\n    return {\n        apiKey: a,\n        url: u\n    };\n}\nvar Al = C(on()), Kn = class {\n    constructor({ apiKey: r, tracingHelper: t, logLevel: n, logQueries: i, engineHash: o }){\n        this.apiKey = r, this.tracingHelper = t, this.logLevel = n, this.logQueries = i, this.engineHash = o;\n    }\n    build({ traceparent: r, transactionId: t } = {}) {\n        let n = {\n            Accept: \"application/json\",\n            Authorization: `Bearer ${this.apiKey}`,\n            \"Content-Type\": \"application/json\",\n            \"Prisma-Engine-Hash\": this.engineHash,\n            \"Prisma-Engine-Version\": Al.enginesVersion\n        };\n        this.tracingHelper.isEnabled() && (n.traceparent = r ?? this.tracingHelper.getTraceParent()), t && (n[\"X-Transaction-Id\"] = t);\n        let i = this.#e();\n        return i.length > 0 && (n[\"X-Capture-Telemetry\"] = i.join(\", \")), n;\n    }\n    #e() {\n        let r = [];\n        return this.tracingHelper.isEnabled() && r.push(\"tracing\"), this.logLevel && r.push(this.logLevel), this.logQueries && r.push(\"query\"), r;\n    }\n};\nfunction uf(e) {\n    return e[0] * 1e3 + e[1] / 1e6;\n}\nfunction fo(e) {\n    return new Date(uf(e));\n}\nvar Br = class extends se {\n    constructor(r){\n        super(\"This request must be retried\", A(r, !0)), this.name = \"ForcedRetryError\", this.code = \"P5001\";\n    }\n};\nx(Br, \"ForcedRetryError\");\nvar cr = class extends se {\n    constructor(r, t){\n        super(r, A(t, !1)), this.name = \"NotImplementedYetError\", this.code = \"P5004\";\n    }\n};\nx(cr, \"NotImplementedYetError\");\nvar $ = class extends se {\n    constructor(r, t){\n        super(r, t), this.response = t.response;\n        let n = this.response.headers.get(\"prisma-request-id\");\n        if (n) {\n            let i = `(The request id was: ${n})`;\n            this.message = this.message + \" \" + i;\n        }\n    }\n};\nvar pr = class extends $ {\n    constructor(r){\n        super(\"Schema needs to be uploaded\", A(r, !0)), this.name = \"SchemaMissingError\", this.code = \"P5005\";\n    }\n};\nx(pr, \"SchemaMissingError\");\nvar go = \"This request could not be understood by the server\", Rt = class extends $ {\n    constructor(r, t, n){\n        super(t || go, A(r, !1)), this.name = \"BadRequestError\", this.code = \"P5000\", n && (this.code = n);\n    }\n};\nx(Rt, \"BadRequestError\");\nvar At = class extends $ {\n    constructor(r, t){\n        super(\"Engine not started: healthcheck timeout\", A(r, !0)), this.name = \"HealthcheckTimeoutError\", this.code = \"P5013\", this.logs = t;\n    }\n};\nx(At, \"HealthcheckTimeoutError\");\nvar Ct = class extends $ {\n    constructor(r, t, n){\n        super(t, A(r, !0)), this.name = \"EngineStartupError\", this.code = \"P5014\", this.logs = n;\n    }\n};\nx(Ct, \"EngineStartupError\");\nvar It = class extends $ {\n    constructor(r){\n        super(\"Engine version is not supported\", A(r, !1)), this.name = \"EngineVersionNotSupportedError\", this.code = \"P5012\";\n    }\n};\nx(It, \"EngineVersionNotSupportedError\");\nvar ho = \"Request timed out\", kt = class extends $ {\n    constructor(r, t = ho){\n        super(t, A(r, !1)), this.name = \"GatewayTimeoutError\", this.code = \"P5009\";\n    }\n};\nx(kt, \"GatewayTimeoutError\");\nvar cf = \"Interactive transaction error\", Dt = class extends $ {\n    constructor(r, t = cf){\n        super(t, A(r, !1)), this.name = \"InteractiveTransactionError\", this.code = \"P5015\";\n    }\n};\nx(Dt, \"InteractiveTransactionError\");\nvar pf = \"Request parameters are invalid\", Ot = class extends $ {\n    constructor(r, t = pf){\n        super(t, A(r, !1)), this.name = \"InvalidRequestError\", this.code = \"P5011\";\n    }\n};\nx(Ot, \"InvalidRequestError\");\nvar yo = \"Requested resource does not exist\", _t = class extends $ {\n    constructor(r, t = yo){\n        super(t, A(r, !1)), this.name = \"NotFoundError\", this.code = \"P5003\";\n    }\n};\nx(_t, \"NotFoundError\");\nvar bo = \"Unknown server error\", Ur = class extends $ {\n    constructor(r, t, n){\n        super(t || bo, A(r, !0)), this.name = \"ServerError\", this.code = \"P5006\", this.logs = n;\n    }\n};\nx(Ur, \"ServerError\");\nvar Eo = \"Unauthorized, check your connection string\", Nt = class extends $ {\n    constructor(r, t = Eo){\n        super(t, A(r, !1)), this.name = \"UnauthorizedError\", this.code = \"P5007\";\n    }\n};\nx(Nt, \"UnauthorizedError\");\nvar wo = \"Usage exceeded, retry again later\", Lt = class extends $ {\n    constructor(r, t = wo){\n        super(t, A(r, !0)), this.name = \"UsageExceededError\", this.code = \"P5008\";\n    }\n};\nx(Lt, \"UsageExceededError\");\nasync function df(e) {\n    let r;\n    try {\n        r = await e.text();\n    } catch  {\n        return {\n            type: \"EmptyError\"\n        };\n    }\n    try {\n        let t = JSON.parse(r);\n        if (typeof t == \"string\") switch(t){\n            case \"InternalDataProxyError\":\n                return {\n                    type: \"DataProxyError\",\n                    body: t\n                };\n            default:\n                return {\n                    type: \"UnknownTextError\",\n                    body: t\n                };\n        }\n        if (typeof t == \"object\" && t !== null) {\n            if (\"is_panic\" in t && \"message\" in t && \"error_code\" in t) return {\n                type: \"QueryEngineError\",\n                body: t\n            };\n            if (\"EngineNotStarted\" in t || \"InteractiveTransactionMisrouted\" in t || \"InvalidRequestError\" in t) {\n                let n = Object.values(t)[0].reason;\n                return typeof n == \"string\" && ![\n                    \"SchemaMissing\",\n                    \"EngineVersionNotSupported\"\n                ].includes(n) ? {\n                    type: \"UnknownJsonError\",\n                    body: t\n                } : {\n                    type: \"DataProxyError\",\n                    body: t\n                };\n            }\n        }\n        return {\n            type: \"UnknownJsonError\",\n            body: t\n        };\n    } catch  {\n        return r === \"\" ? {\n            type: \"EmptyError\"\n        } : {\n            type: \"UnknownTextError\",\n            body: r\n        };\n    }\n}\nasync function Ft(e, r) {\n    if (e.ok) return;\n    let t = {\n        clientVersion: r,\n        response: e\n    }, n = await df(e);\n    if (n.type === \"QueryEngineError\") throw new z(n.body.message, {\n        code: n.body.error_code,\n        clientVersion: r\n    });\n    if (n.type === \"DataProxyError\") {\n        if (n.body === \"InternalDataProxyError\") throw new Ur(t, \"Internal Data Proxy error\");\n        if (\"EngineNotStarted\" in n.body) {\n            if (n.body.EngineNotStarted.reason === \"SchemaMissing\") return new pr(t);\n            if (n.body.EngineNotStarted.reason === \"EngineVersionNotSupported\") throw new It(t);\n            if (\"EngineStartupError\" in n.body.EngineNotStarted.reason) {\n                let { msg: i, logs: o } = n.body.EngineNotStarted.reason.EngineStartupError;\n                throw new Ct(t, i, o);\n            }\n            if (\"KnownEngineStartupError\" in n.body.EngineNotStarted.reason) {\n                let { msg: i, error_code: o } = n.body.EngineNotStarted.reason.KnownEngineStartupError;\n                throw new T(i, r, o);\n            }\n            if (\"HealthcheckTimeout\" in n.body.EngineNotStarted.reason) {\n                let { logs: i } = n.body.EngineNotStarted.reason.HealthcheckTimeout;\n                throw new At(t, i);\n            }\n        }\n        if (\"InteractiveTransactionMisrouted\" in n.body) {\n            let i = {\n                IDParseError: \"Could not parse interactive transaction ID\",\n                NoQueryEngineFoundError: \"Could not find Query Engine for the specified host and transaction ID\",\n                TransactionStartError: \"Could not start interactive transaction\"\n            };\n            throw new Dt(t, i[n.body.InteractiveTransactionMisrouted.reason]);\n        }\n        if (\"InvalidRequestError\" in n.body) throw new Ot(t, n.body.InvalidRequestError.reason);\n    }\n    if (e.status === 401 || e.status === 403) throw new Nt(t, Gr(Eo, n));\n    if (e.status === 404) return new _t(t, Gr(yo, n));\n    if (e.status === 429) throw new Lt(t, Gr(wo, n));\n    if (e.status === 504) throw new kt(t, Gr(ho, n));\n    if (e.status >= 500) throw new Ur(t, Gr(bo, n));\n    if (e.status >= 400) throw new Rt(t, Gr(go, n));\n}\nfunction Gr(e, r) {\n    return r.type === \"EmptyError\" ? e : `${e}: ${JSON.stringify(r)}`;\n}\nfunction Cl(e) {\n    let r = Math.pow(2, e) * 50, t = Math.ceil(Math.random() * r) - Math.ceil(r / 2), n = r + t;\n    return new Promise((i)=>setTimeout(()=>i(n), n));\n}\nvar $e = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nfunction Il(e) {\n    let r = new TextEncoder().encode(e), t = \"\", n = r.byteLength, i = n % 3, o = n - i, s, a, l, u, c;\n    for(let p = 0; p < o; p = p + 3)c = r[p] << 16 | r[p + 1] << 8 | r[p + 2], s = (c & 16515072) >> 18, a = (c & 258048) >> 12, l = (c & 4032) >> 6, u = c & 63, t += $e[s] + $e[a] + $e[l] + $e[u];\n    return i == 1 ? (c = r[o], s = (c & 252) >> 2, a = (c & 3) << 4, t += $e[s] + $e[a] + \"==\") : i == 2 && (c = r[o] << 8 | r[o + 1], s = (c & 64512) >> 10, a = (c & 1008) >> 4, l = (c & 15) << 2, t += $e[s] + $e[a] + $e[l] + \"=\"), t;\n}\nfunction kl(e) {\n    if (!!e.generator?.previewFeatures.some((t)=>t.toLowerCase().includes(\"metrics\"))) throw new T(\"The `metrics` preview feature is not yet available with Accelerate.\\nPlease remove `metrics` from the `previewFeatures` in your schema.\\n\\nMore information about Accelerate: https://pris.ly/d/accelerate\", e.clientVersion);\n}\nvar Dl = {\n    \"@prisma/debug\": \"workspace:*\",\n    \"@prisma/engines-version\": \"6.13.0-35.361e86d0ea4987e9f53a565309b3eed797a6bcbd\",\n    \"@prisma/fetch-engine\": \"workspace:*\",\n    \"@prisma/get-platform\": \"workspace:*\"\n};\nvar Mt = class extends se {\n    constructor(r, t){\n        super(`Cannot fetch data from service:\n${r}`, A(t, !0)), this.name = \"RequestError\", this.code = \"P5010\";\n    }\n};\nx(Mt, \"RequestError\");\nasync function dr(e, r, t = (n)=>n) {\n    let { clientVersion: n, ...i } = r, o = t(fetch);\n    try {\n        return await o(e, i);\n    } catch (s) {\n        let a = s.message ?? \"Unknown error\";\n        throw new Mt(a, {\n            clientVersion: n,\n            cause: s\n        });\n    }\n}\nvar ff = /^[1-9][0-9]*\\.[0-9]+\\.[0-9]+$/, Ol = N(\"prisma:client:dataproxyEngine\");\nasync function gf(e, r) {\n    let t = Dl[\"@prisma/engines-version\"], n = r.clientVersion ?? \"unknown\";\n    if (process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION || globalThis.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION) return process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION || globalThis.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION;\n    if (e.includes(\"accelerate\") && n !== \"0.0.0\" && n !== \"in-memory\") return n;\n    let [i, o] = n?.split(\"-\") ?? [];\n    if (o === void 0 && ff.test(i)) return i;\n    if (o !== void 0 || n === \"0.0.0\" || n === \"in-memory\") {\n        let [s] = t.split(\"-\") ?? [], [a, l, u] = s.split(\".\"), c = hf(`<=${a}.${l}.${u}`), p = await dr(c, {\n            clientVersion: n\n        });\n        if (!p.ok) throw new Error(`Failed to fetch stable Prisma version, unpkg.com status ${p.status} ${p.statusText}, response body: ${await p.text() || \"<empty body>\"}`);\n        let d = await p.text();\n        Ol(\"length of body fetched from unpkg.com\", d.length);\n        let f;\n        try {\n            f = JSON.parse(d);\n        } catch (h) {\n            throw console.error(\"JSON.parse error: body fetched from unpkg.com: \", d), h;\n        }\n        return f.version;\n    }\n    throw new cr(\"Only `major.minor.patch` versions are supported by Accelerate.\", {\n        clientVersion: n\n    });\n}\nasync function _l(e, r) {\n    let t = await gf(e, r);\n    return Ol(\"version\", t), t;\n}\nfunction hf(e) {\n    return encodeURI(`https://unpkg.com/prisma@${e}/package.json`);\n}\nvar Nl = 3, $t = N(\"prisma:client:dataproxyEngine\"), qt = class {\n    constructor(r){\n        this.name = \"DataProxyEngine\";\n        kl(r), this.config = r, this.env = r.env, this.inlineSchema = Il(r.inlineSchema), this.inlineDatasources = r.inlineDatasources, this.inlineSchemaHash = r.inlineSchemaHash, this.clientVersion = r.clientVersion, this.engineHash = r.engineVersion, this.logEmitter = r.logEmitter, this.tracingHelper = r.tracingHelper;\n    }\n    apiKey() {\n        return this.headerBuilder.apiKey;\n    }\n    version() {\n        return this.engineHash;\n    }\n    async start() {\n        this.startPromise !== void 0 && await this.startPromise, this.startPromise = (async ()=>{\n            let { apiKey: r, url: t } = this.getURLAndAPIKey();\n            this.host = t.host, this.protocol = t.protocol, this.headerBuilder = new Kn({\n                apiKey: r,\n                tracingHelper: this.tracingHelper,\n                logLevel: this.config.logLevel ?? \"error\",\n                logQueries: this.config.logQueries,\n                engineHash: this.engineHash\n            }), this.remoteClientVersion = await _l(this.host, this.config), $t(\"host\", this.host), $t(\"protocol\", this.protocol);\n        })(), await this.startPromise;\n    }\n    async stop() {}\n    propagateResponseExtensions(r) {\n        r?.logs?.length && r.logs.forEach((t)=>{\n            switch(t.level){\n                case \"debug\":\n                case \"trace\":\n                    $t(t);\n                    break;\n                case \"error\":\n                case \"warn\":\n                case \"info\":\n                    {\n                        this.logEmitter.emit(t.level, {\n                            timestamp: fo(t.timestamp),\n                            message: t.attributes.message ?? \"\",\n                            target: t.target\n                        });\n                        break;\n                    }\n                case \"query\":\n                    {\n                        this.logEmitter.emit(\"query\", {\n                            query: t.attributes.query ?? \"\",\n                            timestamp: fo(t.timestamp),\n                            duration: t.attributes.duration_ms ?? 0,\n                            params: t.attributes.params ?? \"\",\n                            target: t.target\n                        });\n                        break;\n                    }\n                default:\n                    t.level;\n            }\n        }), r?.traces?.length && this.tracingHelper.dispatchEngineSpans(r.traces);\n    }\n    onBeforeExit() {\n        throw new Error('\"beforeExit\" hook is not applicable to the remote query engine');\n    }\n    async url(r) {\n        return await this.start(), `${this.protocol}//${this.host}/${this.remoteClientVersion}/${this.inlineSchemaHash}/${r}`;\n    }\n    async uploadSchema() {\n        let r = {\n            name: \"schemaUpload\",\n            internal: !0\n        };\n        return this.tracingHelper.runInChildSpan(r, async ()=>{\n            let t = await dr(await this.url(\"schema\"), {\n                method: \"PUT\",\n                headers: this.headerBuilder.build(),\n                body: this.inlineSchema,\n                clientVersion: this.clientVersion\n            });\n            t.ok || $t(\"schema response status\", t.status);\n            let n = await Ft(t, this.clientVersion);\n            if (n) throw this.logEmitter.emit(\"warn\", {\n                message: `Error while uploading schema: ${n.message}`,\n                timestamp: new Date,\n                target: \"\"\n            }), n;\n            this.logEmitter.emit(\"info\", {\n                message: `Schema (re)uploaded (hash: ${this.inlineSchemaHash})`,\n                timestamp: new Date,\n                target: \"\"\n            });\n        });\n    }\n    request(r, { traceparent: t, interactiveTransaction: n, customDataProxyFetch: i }) {\n        return this.requestInternal({\n            body: r,\n            traceparent: t,\n            interactiveTransaction: n,\n            customDataProxyFetch: i\n        });\n    }\n    async requestBatch(r, { traceparent: t, transaction: n, customDataProxyFetch: i }) {\n        let o = n?.kind === \"itx\" ? n.options : void 0, s = $r(r, n);\n        return (await this.requestInternal({\n            body: s,\n            customDataProxyFetch: i,\n            interactiveTransaction: o,\n            traceparent: t\n        })).map((l)=>(l.extensions && this.propagateResponseExtensions(l.extensions), \"errors\" in l ? this.convertProtocolErrorsToClientError(l.errors) : l));\n    }\n    requestInternal({ body: r, traceparent: t, customDataProxyFetch: n, interactiveTransaction: i }) {\n        return this.withRetry({\n            actionGerund: \"querying\",\n            callback: async ({ logHttpCall: o })=>{\n                let s = i ? `${i.payload.endpoint}/graphql` : await this.url(\"graphql\");\n                o(s);\n                let a = await dr(s, {\n                    method: \"POST\",\n                    headers: this.headerBuilder.build({\n                        traceparent: t,\n                        transactionId: i?.id\n                    }),\n                    body: JSON.stringify(r),\n                    clientVersion: this.clientVersion\n                }, n);\n                a.ok || $t(\"graphql response status\", a.status), await this.handleError(await Ft(a, this.clientVersion));\n                let l = await a.json();\n                if (l.extensions && this.propagateResponseExtensions(l.extensions), \"errors\" in l) throw this.convertProtocolErrorsToClientError(l.errors);\n                return \"batchResult\" in l ? l.batchResult : l;\n            }\n        });\n    }\n    async transaction(r, t, n) {\n        let i = {\n            start: \"starting\",\n            commit: \"committing\",\n            rollback: \"rolling back\"\n        };\n        return this.withRetry({\n            actionGerund: `${i[r]} transaction`,\n            callback: async ({ logHttpCall: o })=>{\n                if (r === \"start\") {\n                    let s = JSON.stringify({\n                        max_wait: n.maxWait,\n                        timeout: n.timeout,\n                        isolation_level: n.isolationLevel\n                    }), a = await this.url(\"transaction/start\");\n                    o(a);\n                    let l = await dr(a, {\n                        method: \"POST\",\n                        headers: this.headerBuilder.build({\n                            traceparent: t.traceparent\n                        }),\n                        body: s,\n                        clientVersion: this.clientVersion\n                    });\n                    await this.handleError(await Ft(l, this.clientVersion));\n                    let u = await l.json(), { extensions: c } = u;\n                    c && this.propagateResponseExtensions(c);\n                    let p = u.id, d = u[\"data-proxy\"].endpoint;\n                    return {\n                        id: p,\n                        payload: {\n                            endpoint: d\n                        }\n                    };\n                } else {\n                    let s = `${n.payload.endpoint}/${r}`;\n                    o(s);\n                    let a = await dr(s, {\n                        method: \"POST\",\n                        headers: this.headerBuilder.build({\n                            traceparent: t.traceparent\n                        }),\n                        clientVersion: this.clientVersion\n                    });\n                    await this.handleError(await Ft(a, this.clientVersion));\n                    let l = await a.json(), { extensions: u } = l;\n                    u && this.propagateResponseExtensions(u);\n                    return;\n                }\n            }\n        });\n    }\n    getURLAndAPIKey() {\n        return Rl({\n            clientVersion: this.clientVersion,\n            env: this.env,\n            inlineDatasources: this.inlineDatasources,\n            overrideDatasources: this.config.overrideDatasources\n        });\n    }\n    metrics() {\n        throw new cr(\"Metrics are not yet supported for Accelerate\", {\n            clientVersion: this.clientVersion\n        });\n    }\n    async withRetry(r) {\n        for(let t = 0;; t++){\n            let n = (i)=>{\n                this.logEmitter.emit(\"info\", {\n                    message: `Calling ${i} (n=${t})`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n            };\n            try {\n                return await r.callback({\n                    logHttpCall: n\n                });\n            } catch (i) {\n                if (!(i instanceof se) || !i.isRetryable) throw i;\n                if (t >= Nl) throw i instanceof Br ? i.cause : i;\n                this.logEmitter.emit(\"warn\", {\n                    message: `Attempt ${t + 1}/${Nl} failed for ${r.actionGerund}: ${i.message ?? \"(unknown)\"}`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n                let o = await Cl(t);\n                this.logEmitter.emit(\"warn\", {\n                    message: `Retrying after ${o}ms`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n            }\n        }\n    }\n    async handleError(r) {\n        if (r instanceof pr) throw await this.uploadSchema(), new Br({\n            clientVersion: this.clientVersion,\n            cause: r\n        });\n        if (r) throw r;\n    }\n    convertProtocolErrorsToClientError(r) {\n        return r.length === 1 ? qr(r[0], this.config.clientVersion, this.config.activeProvider) : new j(JSON.stringify(r), {\n            clientVersion: this.config.clientVersion\n        });\n    }\n    applyPendingMigrations() {\n        throw new Error(\"Method not implemented.\");\n    }\n};\nfunction Ll(e) {\n    if (e?.kind === \"itx\") return e.options.id;\n}\nvar vo = C(__webpack_require__(/*! node:os */ \"node:os\")), Fl = C(__webpack_require__(/*! node:path */ \"node:path\"));\nvar xo = Symbol(\"PrismaLibraryEngineCache\");\nfunction yf() {\n    let e = globalThis;\n    return e[xo] === void 0 && (e[xo] = {}), e[xo];\n}\nfunction bf(e) {\n    let r = yf();\n    if (r[e] !== void 0) return r[e];\n    let t = Fl.default.toNamespacedPath(e), n = {\n        exports: {}\n    }, i = 0;\n    return process.platform !== \"win32\" && (i = vo.default.constants.dlopen.RTLD_LAZY | vo.default.constants.dlopen.RTLD_DEEPBIND), process.dlopen(n, t, i), r[e] = n.exports, n.exports;\n}\nvar Ml = {\n    async loadLibrary (e) {\n        let r = await gi(), t = await bl(\"library\", e);\n        try {\n            return e.tracingHelper.runInChildSpan({\n                name: \"loadLibrary\",\n                internal: !0\n            }, ()=>bf(t));\n        } catch (n) {\n            let i = Ci({\n                e: n,\n                platformInfo: r,\n                id: t\n            });\n            throw new T(i, e.clientVersion);\n        }\n    }\n};\nvar Po, $l = {\n    async loadLibrary (e) {\n        let { clientVersion: r, adapter: t, engineWasm: n } = e;\n        if (t === void 0) throw new T(`The \\`adapter\\` option for \\`PrismaClient\\` is required in this context (${Gn().prettyName})`, r);\n        if (n === void 0) throw new T(\"WASM engine was unexpectedly `undefined`\", r);\n        Po === void 0 && (Po = (async ()=>{\n            let o = await n.getRuntime(), s = await n.getQueryEngineWasmModule();\n            if (s == null) throw new T(\"The loaded wasm module was unexpectedly `undefined` or `null` once loaded\", r);\n            let a = {\n                \"./query_engine_bg.js\": o\n            }, l = new WebAssembly.Instance(s, a), u = l.exports.__wbindgen_start;\n            return o.__wbg_set_wasm(l.exports), u(), o.QueryEngine;\n        })());\n        let i = await Po;\n        return {\n            debugPanic () {\n                return Promise.reject(\"{}\");\n            },\n            dmmf () {\n                return Promise.resolve(\"{}\");\n            },\n            version () {\n                return {\n                    commit: \"unknown\",\n                    version: \"unknown\"\n                };\n            },\n            QueryEngine: i\n        };\n    }\n};\nvar Ef = \"P2036\", Ae = N(\"prisma:client:libraryEngine\");\nfunction wf(e) {\n    return e.item_type === \"query\" && \"query\" in e;\n}\nfunction xf(e) {\n    return \"level\" in e ? e.level === \"error\" && e.message === \"PANIC\" : !1;\n}\nvar ql = [\n    ...ui,\n    \"native\"\n], vf = 0xffffffffffffffffn, To = 1n;\nfunction Pf() {\n    let e = To++;\n    return To > vf && (To = 1n), e;\n}\nvar Qr = class {\n    constructor(r, t){\n        this.name = \"LibraryEngine\";\n        this.libraryLoader = t ?? Ml, r.engineWasm !== void 0 && (this.libraryLoader = t ?? $l), this.config = r, this.libraryStarted = !1, this.logQueries = r.logQueries ?? !1, this.logLevel = r.logLevel ?? \"error\", this.logEmitter = r.logEmitter, this.datamodel = r.inlineSchema, this.tracingHelper = r.tracingHelper, r.enableDebugLogs && (this.logLevel = \"debug\");\n        let n = Object.keys(r.overrideDatasources)[0], i = r.overrideDatasources[n]?.url;\n        n !== void 0 && i !== void 0 && (this.datasourceOverrides = {\n            [n]: i\n        }), this.libraryInstantiationPromise = this.instantiateLibrary();\n    }\n    wrapEngine(r) {\n        return {\n            applyPendingMigrations: r.applyPendingMigrations?.bind(r),\n            commitTransaction: this.withRequestId(r.commitTransaction.bind(r)),\n            connect: this.withRequestId(r.connect.bind(r)),\n            disconnect: this.withRequestId(r.disconnect.bind(r)),\n            metrics: r.metrics?.bind(r),\n            query: this.withRequestId(r.query.bind(r)),\n            rollbackTransaction: this.withRequestId(r.rollbackTransaction.bind(r)),\n            sdlSchema: r.sdlSchema?.bind(r),\n            startTransaction: this.withRequestId(r.startTransaction.bind(r)),\n            trace: r.trace.bind(r),\n            free: r.free?.bind(r)\n        };\n    }\n    withRequestId(r) {\n        return async (...t)=>{\n            let n = Pf().toString();\n            try {\n                return await r(...t, n);\n            } finally{\n                if (this.tracingHelper.isEnabled()) {\n                    let i = await this.engine?.trace(n);\n                    if (i) {\n                        let o = JSON.parse(i);\n                        this.tracingHelper.dispatchEngineSpans(o.spans);\n                    }\n                }\n            }\n        };\n    }\n    async applyPendingMigrations() {\n        throw new Error(\"Cannot call this method from this type of engine instance\");\n    }\n    async transaction(r, t, n) {\n        await this.start();\n        let i = await this.adapterPromise, o = JSON.stringify(t), s;\n        if (r === \"start\") {\n            let l = JSON.stringify({\n                max_wait: n.maxWait,\n                timeout: n.timeout,\n                isolation_level: n.isolationLevel\n            });\n            s = await this.engine?.startTransaction(l, o);\n        } else r === \"commit\" ? s = await this.engine?.commitTransaction(n.id, o) : r === \"rollback\" && (s = await this.engine?.rollbackTransaction(n.id, o));\n        let a = this.parseEngineResponse(s);\n        if (Tf(a)) {\n            let l = this.getExternalAdapterError(a, i?.errorRegistry);\n            throw l ? l.error : new z(a.message, {\n                code: a.error_code,\n                clientVersion: this.config.clientVersion,\n                meta: a.meta\n            });\n        } else if (typeof a.message == \"string\") throw new j(a.message, {\n            clientVersion: this.config.clientVersion\n        });\n        return a;\n    }\n    async instantiateLibrary() {\n        if (Ae(\"internalSetup\"), this.libraryInstantiationPromise) return this.libraryInstantiationPromise;\n        li(), this.binaryTarget = await this.getCurrentBinaryTarget(), await this.tracingHelper.runInChildSpan(\"load_engine\", ()=>this.loadEngine()), this.version();\n    }\n    async getCurrentBinaryTarget() {\n        {\n            if (this.binaryTarget) return this.binaryTarget;\n            let r = await this.tracingHelper.runInChildSpan(\"detect_platform\", ()=>ir());\n            if (!ql.includes(r)) throw new T(`Unknown ${ce(\"PRISMA_QUERY_ENGINE_LIBRARY\")} ${ce(W(r))}. Possible binaryTargets: ${qe(ql.join(\", \"))} or a path to the query engine library.\nYou may have to run ${qe(\"prisma generate\")} for your changes to take effect.`, this.config.clientVersion);\n            return r;\n        }\n    }\n    parseEngineResponse(r) {\n        if (!r) throw new j(\"Response from the Engine was empty\", {\n            clientVersion: this.config.clientVersion\n        });\n        try {\n            return JSON.parse(r);\n        } catch  {\n            throw new j(\"Unable to JSON.parse response from engine\", {\n                clientVersion: this.config.clientVersion\n            });\n        }\n    }\n    async loadEngine() {\n        if (!this.engine) {\n            this.QueryEngineConstructor || (this.library = await this.libraryLoader.loadLibrary(this.config), this.QueryEngineConstructor = this.library.QueryEngine);\n            try {\n                let r = new WeakRef(this);\n                this.adapterPromise || (this.adapterPromise = this.config.adapter?.connect()?.then(tn));\n                let t = await this.adapterPromise;\n                t && Ae(\"Using driver adapter: %O\", t), this.engine = this.wrapEngine(new this.QueryEngineConstructor({\n                    datamodel: this.datamodel,\n                    env: process.env,\n                    logQueries: this.config.logQueries ?? !1,\n                    ignoreEnvVarErrors: !0,\n                    datasourceOverrides: this.datasourceOverrides ?? {},\n                    logLevel: this.logLevel,\n                    configDir: this.config.cwd,\n                    engineProtocol: \"json\",\n                    enableTracing: this.tracingHelper.isEnabled()\n                }, (n)=>{\n                    r.deref()?.logger(n);\n                }, t));\n            } catch (r) {\n                let t = r, n = this.parseInitError(t.message);\n                throw typeof n == \"string\" ? t : new T(n.message, this.config.clientVersion, n.error_code);\n            }\n        }\n    }\n    logger(r) {\n        let t = this.parseEngineResponse(r);\n        t && (t.level = t?.level.toLowerCase() ?? \"unknown\", wf(t) ? this.logEmitter.emit(\"query\", {\n            timestamp: new Date,\n            query: t.query,\n            params: t.params,\n            duration: Number(t.duration_ms),\n            target: t.module_path\n        }) : xf(t) ? this.loggerRustPanic = new le(So(this, `${t.message}: ${t.reason} in ${t.file}:${t.line}:${t.column}`), this.config.clientVersion) : this.logEmitter.emit(t.level, {\n            timestamp: new Date,\n            message: t.message,\n            target: t.module_path\n        }));\n    }\n    parseInitError(r) {\n        try {\n            return JSON.parse(r);\n        } catch  {}\n        return r;\n    }\n    parseRequestError(r) {\n        try {\n            return JSON.parse(r);\n        } catch  {}\n        return r;\n    }\n    onBeforeExit() {\n        throw new Error('\"beforeExit\" hook is not applicable to the library engine since Prisma 5.0.0, it is only relevant and implemented for the binary engine. Please add your event listener to the `process` object directly instead.');\n    }\n    async start() {\n        if (this.libraryInstantiationPromise || (this.libraryInstantiationPromise = this.instantiateLibrary()), await this.libraryInstantiationPromise, await this.libraryStoppingPromise, this.libraryStartingPromise) return Ae(`library already starting, this.libraryStarted: ${this.libraryStarted}`), this.libraryStartingPromise;\n        if (this.libraryStarted) return;\n        let r = async ()=>{\n            Ae(\"library starting\");\n            try {\n                let t = {\n                    traceparent: this.tracingHelper.getTraceParent()\n                };\n                await this.engine?.connect(JSON.stringify(t)), this.libraryStarted = !0, this.adapterPromise || (this.adapterPromise = this.config.adapter?.connect()?.then(tn)), await this.adapterPromise, Ae(\"library started\");\n            } catch (t) {\n                let n = this.parseInitError(t.message);\n                throw typeof n == \"string\" ? t : new T(n.message, this.config.clientVersion, n.error_code);\n            } finally{\n                this.libraryStartingPromise = void 0;\n            }\n        };\n        return this.libraryStartingPromise = this.tracingHelper.runInChildSpan(\"connect\", r), this.libraryStartingPromise;\n    }\n    async stop() {\n        if (await this.libraryInstantiationPromise, await this.libraryStartingPromise, await this.executingQueryPromise, this.libraryStoppingPromise) return Ae(\"library is already stopping\"), this.libraryStoppingPromise;\n        if (!this.libraryStarted) {\n            await (await this.adapterPromise)?.dispose(), this.adapterPromise = void 0;\n            return;\n        }\n        let r = async ()=>{\n            await new Promise((n)=>setImmediate(n)), Ae(\"library stopping\");\n            let t = {\n                traceparent: this.tracingHelper.getTraceParent()\n            };\n            await this.engine?.disconnect(JSON.stringify(t)), this.engine?.free && this.engine.free(), this.engine = void 0, this.libraryStarted = !1, this.libraryStoppingPromise = void 0, this.libraryInstantiationPromise = void 0, await (await this.adapterPromise)?.dispose(), this.adapterPromise = void 0, Ae(\"library stopped\");\n        };\n        return this.libraryStoppingPromise = this.tracingHelper.runInChildSpan(\"disconnect\", r), this.libraryStoppingPromise;\n    }\n    version() {\n        return this.versionInfo = this.library?.version(), this.versionInfo?.version ?? \"unknown\";\n    }\n    debugPanic(r) {\n        return this.library?.debugPanic(r);\n    }\n    async request(r, { traceparent: t, interactiveTransaction: n }) {\n        Ae(`sending request, this.libraryStarted: ${this.libraryStarted}`);\n        let i = JSON.stringify({\n            traceparent: t\n        }), o = JSON.stringify(r);\n        try {\n            await this.start();\n            let s = await this.adapterPromise;\n            this.executingQueryPromise = this.engine?.query(o, i, n?.id), this.lastQuery = o;\n            let a = this.parseEngineResponse(await this.executingQueryPromise);\n            if (a.errors) throw a.errors.length === 1 ? this.buildQueryError(a.errors[0], s?.errorRegistry) : new j(JSON.stringify(a.errors), {\n                clientVersion: this.config.clientVersion\n            });\n            if (this.loggerRustPanic) throw this.loggerRustPanic;\n            return {\n                data: a\n            };\n        } catch (s) {\n            if (s instanceof T) throw s;\n            if (s.code === \"GenericFailure\" && s.message?.startsWith(\"PANIC:\")) throw new le(So(this, s.message), this.config.clientVersion);\n            let a = this.parseRequestError(s.message);\n            throw typeof a == \"string\" ? s : new j(`${a.message}\n${a.backtrace}`, {\n                clientVersion: this.config.clientVersion\n            });\n        }\n    }\n    async requestBatch(r, { transaction: t, traceparent: n }) {\n        Ae(\"requestBatch\");\n        let i = $r(r, t);\n        await this.start();\n        let o = await this.adapterPromise;\n        this.lastQuery = JSON.stringify(i), this.executingQueryPromise = this.engine?.query(this.lastQuery, JSON.stringify({\n            traceparent: n\n        }), Ll(t));\n        let s = await this.executingQueryPromise, a = this.parseEngineResponse(s);\n        if (a.errors) throw a.errors.length === 1 ? this.buildQueryError(a.errors[0], o?.errorRegistry) : new j(JSON.stringify(a.errors), {\n            clientVersion: this.config.clientVersion\n        });\n        let { batchResult: l, errors: u } = a;\n        if (Array.isArray(l)) return l.map((c)=>c.errors && c.errors.length > 0 ? this.loggerRustPanic ?? this.buildQueryError(c.errors[0], o?.errorRegistry) : {\n                data: c\n            });\n        throw u && u.length === 1 ? new Error(u[0].error) : new Error(JSON.stringify(a));\n    }\n    buildQueryError(r, t) {\n        if (r.user_facing_error.is_panic) return new le(So(this, r.user_facing_error.message), this.config.clientVersion);\n        let n = this.getExternalAdapterError(r.user_facing_error, t);\n        return n ? n.error : qr(r, this.config.clientVersion, this.config.activeProvider);\n    }\n    getExternalAdapterError(r, t) {\n        if (r.error_code === Ef && t) {\n            let n = r.meta?.id;\n            ln(typeof n == \"number\", \"Malformed external JS error received from the engine\");\n            let i = t.consumeError(n);\n            return ln(i, \"External error with reported id was not registered\"), i;\n        }\n    }\n    async metrics(r) {\n        await this.start();\n        let t = await this.engine.metrics(JSON.stringify(r));\n        return r.format === \"prometheus\" ? t : this.parseEngineResponse(t);\n    }\n};\nfunction Tf(e) {\n    return typeof e == \"object\" && e !== null && e.error_code !== void 0;\n}\nfunction So(e, r) {\n    return Tl({\n        binaryTarget: e.binaryTarget,\n        title: r,\n        version: e.config.clientVersion,\n        engineVersion: e.versionInfo?.commit,\n        database: e.config.activeProvider,\n        query: e.lastQuery\n    });\n}\nfunction jl({ url: e, adapter: r, copyEngine: t, targetBuildType: n }) {\n    let i = [], o = [], s = (g)=>{\n        i.push({\n            _tag: \"warning\",\n            value: g\n        });\n    }, a = (g)=>{\n        let S = g.join(`\n`);\n        o.push({\n            _tag: \"error\",\n            value: S\n        });\n    }, l = !!e?.startsWith(\"prisma://\"), u = an(e), c = !!r, p = l || u;\n    !c && t && p && s([\n        \"recommend--no-engine\",\n        \"In production, we recommend using `prisma generate --no-engine` (See: `prisma generate --help`)\"\n    ]);\n    let d = p || !t;\n    c && (d || n === \"edge\") && (n === \"edge\" ? a([\n        \"Prisma Client was configured to use the `adapter` option but it was imported via its `/edge` endpoint.\",\n        \"Please either remove the `/edge` endpoint or remove the `adapter` from the Prisma Client constructor.\"\n    ]) : t ? l && a([\n        \"Prisma Client was configured to use the `adapter` option but the URL was a `prisma://` URL.\",\n        \"Please either use the `prisma://` URL or remove the `adapter` from the Prisma Client constructor.\"\n    ]) : a([\n        \"Prisma Client was configured to use the `adapter` option but `prisma generate` was run with `--no-engine`.\",\n        \"Please run `prisma generate` without `--no-engine` to be able to use Prisma Client with the adapter.\"\n    ]));\n    let f = {\n        accelerate: d,\n        ppg: u,\n        driverAdapters: c\n    };\n    function h(g) {\n        return g.length > 0;\n    }\n    return h(o) ? {\n        ok: !1,\n        diagnostics: {\n            warnings: i,\n            errors: o\n        },\n        isUsing: f\n    } : {\n        ok: !0,\n        diagnostics: {\n            warnings: i\n        },\n        isUsing: f\n    };\n}\nfunction Vl({ copyEngine: e = !0 }, r) {\n    let t;\n    try {\n        t = Vr({\n            inlineDatasources: r.inlineDatasources,\n            overrideDatasources: r.overrideDatasources,\n            env: {\n                ...r.env,\n                ...process.env\n            },\n            clientVersion: r.clientVersion\n        });\n    } catch  {}\n    let { ok: n, isUsing: i, diagnostics: o } = jl({\n        url: t,\n        adapter: r.adapter,\n        copyEngine: e,\n        targetBuildType: \"library\"\n    });\n    for (let p of o.warnings)at(...p.value);\n    if (!n) {\n        let p = o.errors[0];\n        throw new Z(p.value, {\n            clientVersion: r.clientVersion\n        });\n    }\n    let s = Er(r.generator), a = s === \"library\", l = s === \"binary\", u = s === \"client\", c = (i.accelerate || i.ppg) && !i.driverAdapters;\n    return i.accelerate ? new qt(r) : (i.driverAdapters, a ? new Qr(r) : (i.accelerate, new Qr(r)));\n}\nfunction Yn({ generator: e }) {\n    return e?.previewFeatures ?? [];\n}\nvar Bl = (e)=>({\n        command: e\n    });\nvar Ul = (e)=>e.strings.reduce((r, t, n)=>`${r}@P${n}${t}`);\nfunction Wr(e) {\n    try {\n        return Gl(e, \"fast\");\n    } catch  {\n        return Gl(e, \"slow\");\n    }\n}\nfunction Gl(e, r) {\n    return JSON.stringify(e.map((t)=>Wl(t, r)));\n}\nfunction Wl(e, r) {\n    if (Array.isArray(e)) return e.map((t)=>Wl(t, r));\n    if (typeof e == \"bigint\") return {\n        prisma__type: \"bigint\",\n        prisma__value: e.toString()\n    };\n    if (Sr(e)) return {\n        prisma__type: \"date\",\n        prisma__value: e.toJSON()\n    };\n    if (ve.isDecimal(e)) return {\n        prisma__type: \"decimal\",\n        prisma__value: e.toJSON()\n    };\n    if (Buffer.isBuffer(e)) return {\n        prisma__type: \"bytes\",\n        prisma__value: e.toString(\"base64\")\n    };\n    if (Sf(e)) return {\n        prisma__type: \"bytes\",\n        prisma__value: Buffer.from(e).toString(\"base64\")\n    };\n    if (ArrayBuffer.isView(e)) {\n        let { buffer: t, byteOffset: n, byteLength: i } = e;\n        return {\n            prisma__type: \"bytes\",\n            prisma__value: Buffer.from(t, n, i).toString(\"base64\")\n        };\n    }\n    return typeof e == \"object\" && r === \"slow\" ? Jl(e) : e;\n}\nfunction Sf(e) {\n    return e instanceof ArrayBuffer || e instanceof SharedArrayBuffer ? !0 : typeof e == \"object\" && e !== null ? e[Symbol.toStringTag] === \"ArrayBuffer\" || e[Symbol.toStringTag] === \"SharedArrayBuffer\" : !1;\n}\nfunction Jl(e) {\n    if (typeof e != \"object\" || e === null) return e;\n    if (typeof e.toJSON == \"function\") return e.toJSON();\n    if (Array.isArray(e)) return e.map(Ql);\n    let r = {};\n    for (let t of Object.keys(e))r[t] = Ql(e[t]);\n    return r;\n}\nfunction Ql(e) {\n    return typeof e == \"bigint\" ? e.toString() : Jl(e);\n}\nvar Rf = /^(\\s*alter\\s)/i, Hl = N(\"prisma:client\");\nfunction Ro(e, r, t, n) {\n    if (!(e !== \"postgresql\" && e !== \"cockroachdb\") && t.length > 0 && Rf.exec(r)) throw new Error(`Running ALTER using ${n} is not supported\nUsing the example below you can still execute your query with Prisma, but please note that it is vulnerable to SQL injection attacks and requires you to take care of input sanitization.\n\nExample:\n  await prisma.$executeRawUnsafe(\\`ALTER USER prisma WITH PASSWORD '\\${password}'\\`)\n\nMore Information: https://pris.ly/d/execute-raw\n`);\n}\nvar Ao = ({ clientMethod: e, activeProvider: r })=>(t)=>{\n        let n = \"\", i;\n        if (qn(t)) n = t.sql, i = {\n            values: Wr(t.values),\n            __prismaRawParameters__: !0\n        };\n        else if (Array.isArray(t)) {\n            let [o, ...s] = t;\n            n = o, i = {\n                values: Wr(s || []),\n                __prismaRawParameters__: !0\n            };\n        } else switch(r){\n            case \"sqlite\":\n            case \"mysql\":\n                {\n                    n = t.sql, i = {\n                        values: Wr(t.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            case \"cockroachdb\":\n            case \"postgresql\":\n            case \"postgres\":\n                {\n                    n = t.text, i = {\n                        values: Wr(t.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            case \"sqlserver\":\n                {\n                    n = Ul(t), i = {\n                        values: Wr(t.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            default:\n                throw new Error(`The ${r} provider does not support ${e}`);\n        }\n        return i?.values ? Hl(`prisma.${e}(${n}, ${i.values})`) : Hl(`prisma.${e}(${n})`), {\n            query: n,\n            parameters: i\n        };\n    }, Kl = {\n    requestArgsToMiddlewareArgs (e) {\n        return [\n            e.strings,\n            ...e.values\n        ];\n    },\n    middlewareArgsToRequestArgs (e) {\n        let [r, ...t] = e;\n        return new oe(r, t);\n    }\n}, Yl = {\n    requestArgsToMiddlewareArgs (e) {\n        return [\n            e\n        ];\n    },\n    middlewareArgsToRequestArgs (e) {\n        return e[0];\n    }\n};\nfunction Co(e) {\n    return function(t, n) {\n        let i, o = (s = e)=>{\n            try {\n                return s === void 0 || s?.kind === \"itx\" ? i ??= zl(t(s)) : zl(t(s));\n            } catch (a) {\n                return Promise.reject(a);\n            }\n        };\n        return {\n            get spec () {\n                return n;\n            },\n            then (s, a) {\n                return o().then(s, a);\n            },\n            catch (s) {\n                return o().catch(s);\n            },\n            finally (s) {\n                return o().finally(s);\n            },\n            requestTransaction (s) {\n                let a = o(s);\n                return a.requestTransaction ? a.requestTransaction(s) : a;\n            },\n            [Symbol.toStringTag]: \"PrismaPromise\"\n        };\n    };\n}\nfunction zl(e) {\n    return typeof e.then == \"function\" ? e : Promise.resolve(e);\n}\nvar Af = vi.split(\".\")[0], Cf = {\n    isEnabled () {\n        return !1;\n    },\n    getTraceParent () {\n        return \"00-10-10-00\";\n    },\n    dispatchEngineSpans () {},\n    getActiveContext () {},\n    runInChildSpan (e, r) {\n        return r();\n    }\n}, Io = class {\n    isEnabled() {\n        return this.getGlobalTracingHelper().isEnabled();\n    }\n    getTraceParent(r) {\n        return this.getGlobalTracingHelper().getTraceParent(r);\n    }\n    dispatchEngineSpans(r) {\n        return this.getGlobalTracingHelper().dispatchEngineSpans(r);\n    }\n    getActiveContext() {\n        return this.getGlobalTracingHelper().getActiveContext();\n    }\n    runInChildSpan(r, t) {\n        return this.getGlobalTracingHelper().runInChildSpan(r, t);\n    }\n    getGlobalTracingHelper() {\n        let r = globalThis[`V${Af}_PRISMA_INSTRUMENTATION`], t = globalThis.PRISMA_INSTRUMENTATION;\n        return r?.helper ?? t?.helper ?? Cf;\n    }\n};\nfunction Zl() {\n    return new Io;\n}\nfunction Xl(e, r = ()=>{}) {\n    let t, n = new Promise((i)=>t = i);\n    return {\n        then (i) {\n            return --e === 0 && t(r()), i?.(n);\n        }\n    };\n}\nfunction eu(e) {\n    return typeof e == \"string\" ? e : e.reduce((r, t)=>{\n        let n = typeof t == \"string\" ? t : t.level;\n        return n === \"query\" ? r : r && (t === \"info\" || r === \"info\") ? \"info\" : n;\n    }, void 0);\n}\nvar zn = class {\n    use(r) {\n        this._middlewares.push(r);\n    }\n    get(r) {\n        return this._middlewares[r];\n    }\n    has(r) {\n        return !!this._middlewares[r];\n    }\n    length() {\n        return this._middlewares.length;\n    }\n    constructor(){\n        this._middlewares = [];\n    }\n};\nvar tu = C(Li());\nfunction Zn(e) {\n    return typeof e.batchRequestIdx == \"number\";\n}\nfunction ru(e) {\n    if (e.action !== \"findUnique\" && e.action !== \"findUniqueOrThrow\") return;\n    let r = [];\n    return e.modelName && r.push(e.modelName), e.query.arguments && r.push(ko(e.query.arguments)), r.push(ko(e.query.selection)), r.join(\"\");\n}\nfunction ko(e) {\n    return `(${Object.keys(e).sort().map((t)=>{\n        let n = e[t];\n        return typeof n == \"object\" && n !== null ? `(${t} ${ko(n)})` : t;\n    }).join(\" \")})`;\n}\nvar If = {\n    aggregate: !1,\n    aggregateRaw: !1,\n    createMany: !0,\n    createManyAndReturn: !0,\n    createOne: !0,\n    deleteMany: !0,\n    deleteOne: !0,\n    executeRaw: !0,\n    findFirst: !1,\n    findFirstOrThrow: !1,\n    findMany: !1,\n    findRaw: !1,\n    findUnique: !1,\n    findUniqueOrThrow: !1,\n    groupBy: !1,\n    queryRaw: !1,\n    runCommandRaw: !0,\n    updateMany: !0,\n    updateManyAndReturn: !0,\n    updateOne: !0,\n    upsertOne: !0\n};\nfunction Do(e) {\n    return If[e];\n}\nvar Xn = class {\n    constructor(r){\n        this.tickActive = !1;\n        this.options = r;\n        this.batches = {};\n    }\n    request(r) {\n        let t = this.options.batchBy(r);\n        return t ? (this.batches[t] || (this.batches[t] = [], this.tickActive || (this.tickActive = !0, process.nextTick(()=>{\n            this.dispatchBatches(), this.tickActive = !1;\n        }))), new Promise((n, i)=>{\n            this.batches[t].push({\n                request: r,\n                resolve: n,\n                reject: i\n            });\n        })) : this.options.singleLoader(r);\n    }\n    dispatchBatches() {\n        for(let r in this.batches){\n            let t = this.batches[r];\n            delete this.batches[r], t.length === 1 ? this.options.singleLoader(t[0].request).then((n)=>{\n                n instanceof Error ? t[0].reject(n) : t[0].resolve(n);\n            }).catch((n)=>{\n                t[0].reject(n);\n            }) : (t.sort((n, i)=>this.options.batchOrder(n.request, i.request)), this.options.batchLoader(t.map((n)=>n.request)).then((n)=>{\n                if (n instanceof Error) for(let i = 0; i < t.length; i++)t[i].reject(n);\n                else for(let i = 0; i < t.length; i++){\n                    let o = n[i];\n                    o instanceof Error ? t[i].reject(o) : t[i].resolve(o);\n                }\n            }).catch((n)=>{\n                for(let i = 0; i < t.length; i++)t[i].reject(n);\n            }));\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return \"DataLoader\";\n    }\n};\nfunction mr(e, r) {\n    if (r === null) return r;\n    switch(e){\n        case \"bigint\":\n            return BigInt(r);\n        case \"bytes\":\n            {\n                let { buffer: t, byteOffset: n, byteLength: i } = Buffer.from(r, \"base64\");\n                return new Uint8Array(t, n, i);\n            }\n        case \"decimal\":\n            return new ve(r);\n        case \"datetime\":\n        case \"date\":\n            return new Date(r);\n        case \"time\":\n            return new Date(`1970-01-01T${r}Z`);\n        case \"bigint-array\":\n            return r.map((t)=>mr(\"bigint\", t));\n        case \"bytes-array\":\n            return r.map((t)=>mr(\"bytes\", t));\n        case \"decimal-array\":\n            return r.map((t)=>mr(\"decimal\", t));\n        case \"datetime-array\":\n            return r.map((t)=>mr(\"datetime\", t));\n        case \"date-array\":\n            return r.map((t)=>mr(\"date\", t));\n        case \"time-array\":\n            return r.map((t)=>mr(\"time\", t));\n        default:\n            return r;\n    }\n}\nfunction ei(e) {\n    let r = [], t = kf(e);\n    for(let n = 0; n < e.rows.length; n++){\n        let i = e.rows[n], o = {\n            ...t\n        };\n        for(let s = 0; s < i.length; s++)o[e.columns[s]] = mr(e.types[s], i[s]);\n        r.push(o);\n    }\n    return r;\n}\nfunction kf(e) {\n    let r = {};\n    for(let t = 0; t < e.columns.length; t++)r[e.columns[t]] = null;\n    return r;\n}\nvar Df = N(\"prisma:client:request_handler\"), ri = class {\n    constructor(r, t){\n        this.logEmitter = t, this.client = r, this.dataloader = new Xn({\n            batchLoader: sl(async ({ requests: n, customDataProxyFetch: i })=>{\n                let { transaction: o, otelParentCtx: s } = n[0], a = n.map((p)=>p.protocolQuery), l = this.client._tracingHelper.getTraceParent(s), u = n.some((p)=>Do(p.protocolQuery.action));\n                return (await this.client._engine.requestBatch(a, {\n                    traceparent: l,\n                    transaction: Of(o),\n                    containsWrite: u,\n                    customDataProxyFetch: i\n                })).map((p, d)=>{\n                    if (p instanceof Error) return p;\n                    try {\n                        return this.mapQueryEngineResult(n[d], p);\n                    } catch (f) {\n                        return f;\n                    }\n                });\n            }),\n            singleLoader: async (n)=>{\n                let i = n.transaction?.kind === \"itx\" ? nu(n.transaction) : void 0, o = await this.client._engine.request(n.protocolQuery, {\n                    traceparent: this.client._tracingHelper.getTraceParent(),\n                    interactiveTransaction: i,\n                    isWrite: Do(n.protocolQuery.action),\n                    customDataProxyFetch: n.customDataProxyFetch\n                });\n                return this.mapQueryEngineResult(n, o);\n            },\n            batchBy: (n)=>n.transaction?.id ? `transaction-${n.transaction.id}` : ru(n.protocolQuery),\n            batchOrder (n, i) {\n                return n.transaction?.kind === \"batch\" && i.transaction?.kind === \"batch\" ? n.transaction.index - i.transaction.index : 0;\n            }\n        });\n    }\n    async request(r) {\n        try {\n            return await this.dataloader.request(r);\n        } catch (t) {\n            let { clientMethod: n, callsite: i, transaction: o, args: s, modelName: a } = r;\n            this.handleAndLogRequestError({\n                error: t,\n                clientMethod: n,\n                callsite: i,\n                transaction: o,\n                args: s,\n                modelName: a,\n                globalOmit: r.globalOmit\n            });\n        }\n    }\n    mapQueryEngineResult({ dataPath: r, unpacker: t }, n) {\n        let i = n?.data, o = this.unpack(i, r, t);\n        return process.env.PRISMA_CLIENT_GET_TIME ? {\n            data: o\n        } : o;\n    }\n    handleAndLogRequestError(r) {\n        try {\n            this.handleRequestError(r);\n        } catch (t) {\n            throw this.logEmitter && this.logEmitter.emit(\"error\", {\n                message: t.message,\n                target: r.clientMethod,\n                timestamp: new Date\n            }), t;\n        }\n    }\n    handleRequestError({ error: r, clientMethod: t, callsite: n, transaction: i, args: o, modelName: s, globalOmit: a }) {\n        if (Df(r), _f(r, i)) throw r;\n        if (r instanceof z && Nf(r)) {\n            let u = iu(r.meta);\n            _n({\n                args: o,\n                errors: [\n                    u\n                ],\n                callsite: n,\n                errorFormat: this.client._errorFormat,\n                originalMethod: t,\n                clientVersion: this.client._clientVersion,\n                globalOmit: a\n            });\n        }\n        let l = r.message;\n        if (n && (l = Pn({\n            callsite: n,\n            originalMethod: t,\n            isPanic: r.isPanic,\n            showColors: this.client._errorFormat === \"pretty\",\n            message: l\n        })), l = this.sanitizeMessage(l), r.code) {\n            let u = s ? {\n                modelName: s,\n                ...r.meta\n            } : r.meta;\n            throw new z(l, {\n                code: r.code,\n                clientVersion: this.client._clientVersion,\n                meta: u,\n                batchRequestIdx: r.batchRequestIdx\n            });\n        } else {\n            if (r.isPanic) throw new le(l, this.client._clientVersion);\n            if (r instanceof j) throw new j(l, {\n                clientVersion: this.client._clientVersion,\n                batchRequestIdx: r.batchRequestIdx\n            });\n            if (r instanceof T) throw new T(l, this.client._clientVersion);\n            if (r instanceof le) throw new le(l, this.client._clientVersion);\n        }\n        throw r.clientVersion = this.client._clientVersion, r;\n    }\n    sanitizeMessage(r) {\n        return this.client._errorFormat && this.client._errorFormat !== \"pretty\" ? (0, tu.default)(r) : r;\n    }\n    unpack(r, t, n) {\n        if (!r || (r.data && (r = r.data), !r)) return r;\n        let i = Object.keys(r)[0], o = Object.values(r)[0], s = t.filter((u)=>u !== \"select\" && u !== \"include\"), a = lo(o, s), l = i === \"queryRaw\" ? ei(a) : Tr(a);\n        return n ? n(l) : l;\n    }\n    get [Symbol.toStringTag]() {\n        return \"RequestHandler\";\n    }\n};\nfunction Of(e) {\n    if (e) {\n        if (e.kind === \"batch\") return {\n            kind: \"batch\",\n            options: {\n                isolationLevel: e.isolationLevel\n            }\n        };\n        if (e.kind === \"itx\") return {\n            kind: \"itx\",\n            options: nu(e)\n        };\n        Ne(e, \"Unknown transaction kind\");\n    }\n}\nfunction nu(e) {\n    return {\n        id: e.id,\n        payload: e.payload\n    };\n}\nfunction _f(e, r) {\n    return Zn(e) && r?.kind === \"batch\" && e.batchRequestIdx !== r.index;\n}\nfunction Nf(e) {\n    return e.code === \"P2009\" || e.code === \"P2012\";\n}\nfunction iu(e) {\n    if (e.kind === \"Union\") return {\n        kind: \"Union\",\n        errors: e.errors.map(iu)\n    };\n    if (Array.isArray(e.selectionPath)) {\n        let [, ...r] = e.selectionPath;\n        return {\n            ...e,\n            selectionPath: r\n        };\n    }\n    return e;\n}\nvar ou = Sl;\nvar cu = C(Ki());\nvar O = class extends Error {\n    constructor(r){\n        super(r + `\nRead more at https://pris.ly/d/client-constructor`), this.name = \"PrismaClientConstructorValidationError\";\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientConstructorValidationError\";\n    }\n};\nx(O, \"PrismaClientConstructorValidationError\");\nvar su = [\n    \"datasources\",\n    \"datasourceUrl\",\n    \"errorFormat\",\n    \"adapter\",\n    \"log\",\n    \"transactionOptions\",\n    \"omit\",\n    \"__internal\"\n], au = [\n    \"pretty\",\n    \"colorless\",\n    \"minimal\"\n], lu = [\n    \"info\",\n    \"query\",\n    \"warn\",\n    \"error\"\n], Lf = {\n    datasources: (e, { datasourceNames: r })=>{\n        if (e) {\n            if (typeof e != \"object\" || Array.isArray(e)) throw new O(`Invalid value ${JSON.stringify(e)} for \"datasources\" provided to PrismaClient constructor`);\n            for (let [t, n] of Object.entries(e)){\n                if (!r.includes(t)) {\n                    let i = Jr(t, r) || ` Available datasources: ${r.join(\", \")}`;\n                    throw new O(`Unknown datasource ${t} provided to PrismaClient constructor.${i}`);\n                }\n                if (typeof n != \"object\" || Array.isArray(n)) throw new O(`Invalid value ${JSON.stringify(e)} for datasource \"${t}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                if (n && typeof n == \"object\") for (let [i, o] of Object.entries(n)){\n                    if (i !== \"url\") throw new O(`Invalid value ${JSON.stringify(e)} for datasource \"${t}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                    if (typeof o != \"string\") throw new O(`Invalid value ${JSON.stringify(o)} for datasource \"${t}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                }\n            }\n        }\n    },\n    adapter: (e, r)=>{\n        if (!e && Er(r.generator) === \"client\") throw new O('Using engine type \"client\" requires a driver adapter to be provided to PrismaClient constructor.');\n        if (e === null) return;\n        if (e === void 0) throw new O('\"adapter\" property must not be undefined, use null to conditionally disable driver adapters.');\n        if (!Yn(r).includes(\"driverAdapters\")) throw new O('\"adapter\" property can only be provided to PrismaClient constructor when \"driverAdapters\" preview feature is enabled.');\n        if (Er(r.generator) === \"binary\") throw new O('Cannot use a driver adapter with the \"binary\" Query Engine. Please use the \"library\" Query Engine.');\n    },\n    datasourceUrl: (e)=>{\n        if (typeof e < \"u\" && typeof e != \"string\") throw new O(`Invalid value ${JSON.stringify(e)} for \"datasourceUrl\" provided to PrismaClient constructor.\nExpected string or undefined.`);\n    },\n    errorFormat: (e)=>{\n        if (e) {\n            if (typeof e != \"string\") throw new O(`Invalid value ${JSON.stringify(e)} for \"errorFormat\" provided to PrismaClient constructor.`);\n            if (!au.includes(e)) {\n                let r = Jr(e, au);\n                throw new O(`Invalid errorFormat ${e} provided to PrismaClient constructor.${r}`);\n            }\n        }\n    },\n    log: (e)=>{\n        if (!e) return;\n        if (!Array.isArray(e)) throw new O(`Invalid value ${JSON.stringify(e)} for \"log\" provided to PrismaClient constructor.`);\n        function r(t) {\n            if (typeof t == \"string\" && !lu.includes(t)) {\n                let n = Jr(t, lu);\n                throw new O(`Invalid log level \"${t}\" provided to PrismaClient constructor.${n}`);\n            }\n        }\n        for (let t of e){\n            r(t);\n            let n = {\n                level: r,\n                emit: (i)=>{\n                    let o = [\n                        \"stdout\",\n                        \"event\"\n                    ];\n                    if (!o.includes(i)) {\n                        let s = Jr(i, o);\n                        throw new O(`Invalid value ${JSON.stringify(i)} for \"emit\" in logLevel provided to PrismaClient constructor.${s}`);\n                    }\n                }\n            };\n            if (t && typeof t == \"object\") for (let [i, o] of Object.entries(t))if (n[i]) n[i](o);\n            else throw new O(`Invalid property ${i} for \"log\" provided to PrismaClient constructor`);\n        }\n    },\n    transactionOptions: (e)=>{\n        if (!e) return;\n        let r = e.maxWait;\n        if (r != null && r <= 0) throw new O(`Invalid value ${r} for maxWait in \"transactionOptions\" provided to PrismaClient constructor. maxWait needs to be greater than 0`);\n        let t = e.timeout;\n        if (t != null && t <= 0) throw new O(`Invalid value ${t} for timeout in \"transactionOptions\" provided to PrismaClient constructor. timeout needs to be greater than 0`);\n    },\n    omit: (e, r)=>{\n        if (typeof e != \"object\") throw new O('\"omit\" option is expected to be an object.');\n        if (e === null) throw new O('\"omit\" option can not be `null`');\n        let t = [];\n        for (let [n, i] of Object.entries(e)){\n            let o = Mf(n, r.runtimeDataModel);\n            if (!o) {\n                t.push({\n                    kind: \"UnknownModel\",\n                    modelKey: n\n                });\n                continue;\n            }\n            for (let [s, a] of Object.entries(i)){\n                let l = o.fields.find((u)=>u.name === s);\n                if (!l) {\n                    t.push({\n                        kind: \"UnknownField\",\n                        modelKey: n,\n                        fieldName: s\n                    });\n                    continue;\n                }\n                if (l.relationName) {\n                    t.push({\n                        kind: \"RelationInOmit\",\n                        modelKey: n,\n                        fieldName: s\n                    });\n                    continue;\n                }\n                typeof a != \"boolean\" && t.push({\n                    kind: \"InvalidFieldValue\",\n                    modelKey: n,\n                    fieldName: s\n                });\n            }\n        }\n        if (t.length > 0) throw new O($f(e, t));\n    },\n    __internal: (e)=>{\n        if (!e) return;\n        let r = [\n            \"debug\",\n            \"engine\",\n            \"configOverride\"\n        ];\n        if (typeof e != \"object\") throw new O(`Invalid value ${JSON.stringify(e)} for \"__internal\" to PrismaClient constructor`);\n        for (let [t] of Object.entries(e))if (!r.includes(t)) {\n            let n = Jr(t, r);\n            throw new O(`Invalid property ${JSON.stringify(t)} for \"__internal\" provided to PrismaClient constructor.${n}`);\n        }\n    }\n};\nfunction pu(e, r) {\n    for (let [t, n] of Object.entries(e)){\n        if (!su.includes(t)) {\n            let i = Jr(t, su);\n            throw new O(`Unknown property ${t} provided to PrismaClient constructor.${i}`);\n        }\n        Lf[t](n, r);\n    }\n    if (e.datasourceUrl && e.datasources) throw new O('Can not use \"datasourceUrl\" and \"datasources\" options at the same time. Pick one of them');\n}\nfunction Jr(e, r) {\n    if (r.length === 0 || typeof e != \"string\") return \"\";\n    let t = Ff(e, r);\n    return t ? ` Did you mean \"${t}\"?` : \"\";\n}\nfunction Ff(e, r) {\n    if (r.length === 0) return null;\n    let t = r.map((i)=>({\n            value: i,\n            distance: (0, cu.default)(e, i)\n        }));\n    t.sort((i, o)=>i.distance < o.distance ? -1 : 1);\n    let n = t[0];\n    return n.distance < 3 ? n.value : null;\n}\nfunction Mf(e, r) {\n    return uu(r.models, e) ?? uu(r.types, e);\n}\nfunction uu(e, r) {\n    let t = Object.keys(e).find((n)=>Ye(n) === r);\n    if (t) return e[t];\n}\nfunction $f(e, r) {\n    let t = Nr(e);\n    for (let o of r)switch(o.kind){\n        case \"UnknownModel\":\n            t.arguments.getField(o.modelKey)?.markAsError(), t.addErrorMessage(()=>`Unknown model name: ${o.modelKey}.`);\n            break;\n        case \"UnknownField\":\n            t.arguments.getDeepField([\n                o.modelKey,\n                o.fieldName\n            ])?.markAsError(), t.addErrorMessage(()=>`Model \"${o.modelKey}\" does not have a field named \"${o.fieldName}\".`);\n            break;\n        case \"RelationInOmit\":\n            t.arguments.getDeepField([\n                o.modelKey,\n                o.fieldName\n            ])?.markAsError(), t.addErrorMessage(()=>'Relations are already excluded by default and can not be specified in \"omit\".');\n            break;\n        case \"InvalidFieldValue\":\n            t.arguments.getDeepFieldValue([\n                o.modelKey,\n                o.fieldName\n            ])?.markAsError(), t.addErrorMessage(()=>\"Omit field option value must be a boolean.\");\n            break;\n    }\n    let { message: n, args: i } = On(t, \"colorless\");\n    return `Error validating \"omit\" option:\n\n${i}\n\n${n}`;\n}\nfunction du(e) {\n    return e.length === 0 ? Promise.resolve([]) : new Promise((r, t)=>{\n        let n = new Array(e.length), i = null, o = !1, s = 0, a = ()=>{\n            o || (s++, s === e.length && (o = !0, i ? t(i) : r(n)));\n        }, l = (u)=>{\n            o || (o = !0, t(u));\n        };\n        for(let u = 0; u < e.length; u++)e[u].then((c)=>{\n            n[u] = c, a();\n        }, (c)=>{\n            if (!Zn(c)) {\n                l(c);\n                return;\n            }\n            c.batchRequestIdx === u ? l(c) : (i || (i = c), a());\n        });\n    });\n}\nvar rr = N(\"prisma:client\");\ntypeof globalThis == \"object\" && (globalThis.NODE_CLIENT = !0);\nvar qf = {\n    requestArgsToMiddlewareArgs: (e)=>e,\n    middlewareArgsToRequestArgs: (e)=>e\n}, jf = Symbol.for(\"prisma.client.transaction.id\"), Vf = {\n    id: 0,\n    nextId () {\n        return ++this.id;\n    }\n};\nfunction bu(e) {\n    class r {\n        constructor(n){\n            this._originalClient = this;\n            this._middlewares = new zn;\n            this._createPrismaPromise = Co();\n            this.$metrics = new Fr(this);\n            this.$extends = za;\n            e = n?.__internal?.configOverride?.(e) ?? e, pl(e), n && pu(n, e);\n            let i = new hu.EventEmitter().on(\"error\", ()=>{});\n            this._extensions = Lr.empty(), this._previewFeatures = Yn(e), this._clientVersion = e.clientVersion ?? ou, this._activeProvider = e.activeProvider, this._globalOmit = n?.omit, this._tracingHelper = Zl();\n            let o = e.relativeEnvPaths && {\n                rootEnvPath: e.relativeEnvPaths.rootEnvPath && ti.default.resolve(e.dirname, e.relativeEnvPaths.rootEnvPath),\n                schemaEnvPath: e.relativeEnvPaths.schemaEnvPath && ti.default.resolve(e.dirname, e.relativeEnvPaths.schemaEnvPath)\n            }, s;\n            if (n?.adapter) {\n                s = n.adapter;\n                let l = e.activeProvider === \"postgresql\" || e.activeProvider === \"cockroachdb\" ? \"postgres\" : e.activeProvider;\n                if (s.provider !== l) throw new T(`The Driver Adapter \\`${s.adapterName}\\`, based on \\`${s.provider}\\`, is not compatible with the provider \\`${l}\\` specified in the Prisma schema.`, this._clientVersion);\n                if (n.datasources || n.datasourceUrl !== void 0) throw new T(\"Custom datasource configuration is not compatible with Prisma Driver Adapters. Please define the database connection string directly in the Driver Adapter configuration.\", this._clientVersion);\n            }\n            let a = !s && o && st(o, {\n                conflictCheck: \"none\"\n            }) || e.injectableEdgeEnv?.();\n            try {\n                let l = n ?? {}, u = l.__internal ?? {}, c = u.debug === !0;\n                c && N.enable(\"prisma:client\");\n                let p = ti.default.resolve(e.dirname, e.relativePath);\n                yu.default.existsSync(p) || (p = e.dirname), rr(\"dirname\", e.dirname), rr(\"relativePath\", e.relativePath), rr(\"cwd\", p);\n                let d = u.engine || {};\n                if (l.errorFormat ? this._errorFormat = l.errorFormat :  false ? 0 : process.env.NO_COLOR ? this._errorFormat = \"colorless\" : this._errorFormat = \"colorless\", this._runtimeDataModel = e.runtimeDataModel, this._engineConfig = {\n                    cwd: p,\n                    dirname: e.dirname,\n                    enableDebugLogs: c,\n                    allowTriggerPanic: d.allowTriggerPanic,\n                    prismaPath: d.binaryPath ?? void 0,\n                    engineEndpoint: d.endpoint,\n                    generator: e.generator,\n                    showColors: this._errorFormat === \"pretty\",\n                    logLevel: l.log && eu(l.log),\n                    logQueries: l.log && !!(typeof l.log == \"string\" ? l.log === \"query\" : l.log.find((f)=>typeof f == \"string\" ? f === \"query\" : f.level === \"query\")),\n                    env: a?.parsed ?? {},\n                    flags: [],\n                    engineWasm: e.engineWasm,\n                    compilerWasm: e.compilerWasm,\n                    clientVersion: e.clientVersion,\n                    engineVersion: e.engineVersion,\n                    previewFeatures: this._previewFeatures,\n                    activeProvider: e.activeProvider,\n                    inlineSchema: e.inlineSchema,\n                    overrideDatasources: dl(l, e.datasourceNames),\n                    inlineDatasources: e.inlineDatasources,\n                    inlineSchemaHash: e.inlineSchemaHash,\n                    tracingHelper: this._tracingHelper,\n                    transactionOptions: {\n                        maxWait: l.transactionOptions?.maxWait ?? 2e3,\n                        timeout: l.transactionOptions?.timeout ?? 5e3,\n                        isolationLevel: l.transactionOptions?.isolationLevel\n                    },\n                    logEmitter: i,\n                    isBundled: e.isBundled,\n                    adapter: s\n                }, this._accelerateEngineConfig = {\n                    ...this._engineConfig,\n                    accelerateUtils: {\n                        resolveDatasourceUrl: Vr,\n                        getBatchRequestPayload: $r,\n                        prismaGraphQLToJSError: qr,\n                        PrismaClientUnknownRequestError: j,\n                        PrismaClientInitializationError: T,\n                        PrismaClientKnownRequestError: z,\n                        debug: N(\"prisma:client:accelerateEngine\"),\n                        engineVersion: fu.version,\n                        clientVersion: e.clientVersion\n                    }\n                }, rr(\"clientVersion\", e.clientVersion), this._engine = Vl(e, this._engineConfig), this._requestHandler = new ri(this, i), l.log) for (let f of l.log){\n                    let h = typeof f == \"string\" ? f : f.emit === \"stdout\" ? f.level : null;\n                    h && this.$on(h, (g)=>{\n                        nt.log(`${nt.tags[h] ?? \"\"}`, g.message || g.query);\n                    });\n                }\n            } catch (l) {\n                throw l.clientVersion = this._clientVersion, l;\n            }\n            return this._appliedParent = Pt(this);\n        }\n        get [Symbol.toStringTag]() {\n            return \"PrismaClient\";\n        }\n        $use(n) {\n            this._middlewares.use(n);\n        }\n        $on(n, i) {\n            return n === \"beforeExit\" ? this._engine.onBeforeExit(i) : n && this._engineConfig.logEmitter.on(n, i), this;\n        }\n        $connect() {\n            try {\n                return this._engine.start();\n            } catch (n) {\n                throw n.clientVersion = this._clientVersion, n;\n            }\n        }\n        async $disconnect() {\n            try {\n                await this._engine.stop();\n            } catch (n) {\n                throw n.clientVersion = this._clientVersion, n;\n            } finally{\n                Qo();\n            }\n        }\n        $executeRawInternal(n, i, o, s) {\n            let a = this._activeProvider;\n            return this._request({\n                action: \"executeRaw\",\n                args: o,\n                transaction: n,\n                clientMethod: i,\n                argsMapper: Ao({\n                    clientMethod: i,\n                    activeProvider: a\n                }),\n                callsite: Ze(this._errorFormat),\n                dataPath: [],\n                middlewareArgsMapper: s\n            });\n        }\n        $executeRaw(n, ...i) {\n            return this._createPrismaPromise((o)=>{\n                if (n.raw !== void 0 || n.sql !== void 0) {\n                    let [s, a] = mu(n, i);\n                    return Ro(this._activeProvider, s.text, s.values, Array.isArray(n) ? \"prisma.$executeRaw`<SQL>`\" : \"prisma.$executeRaw(sql`<SQL>`)\"), this.$executeRawInternal(o, \"$executeRaw\", s, a);\n                }\n                throw new Z(\"`$executeRaw` is a tag function, please use it like the following:\\n```\\nconst result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`\\n```\\n\\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#executeraw\\n\", {\n                    clientVersion: this._clientVersion\n                });\n            });\n        }\n        $executeRawUnsafe(n, ...i) {\n            return this._createPrismaPromise((o)=>(Ro(this._activeProvider, n, i, \"prisma.$executeRawUnsafe(<SQL>, [...values])\"), this.$executeRawInternal(o, \"$executeRawUnsafe\", [\n                    n,\n                    ...i\n                ])));\n        }\n        $runCommandRaw(n) {\n            if (e.activeProvider !== \"mongodb\") throw new Z(`The ${e.activeProvider} provider does not support $runCommandRaw. Use the mongodb provider.`, {\n                clientVersion: this._clientVersion\n            });\n            return this._createPrismaPromise((i)=>this._request({\n                    args: n,\n                    clientMethod: \"$runCommandRaw\",\n                    dataPath: [],\n                    action: \"runCommandRaw\",\n                    argsMapper: Bl,\n                    callsite: Ze(this._errorFormat),\n                    transaction: i\n                }));\n        }\n        async $queryRawInternal(n, i, o, s) {\n            let a = this._activeProvider;\n            return this._request({\n                action: \"queryRaw\",\n                args: o,\n                transaction: n,\n                clientMethod: i,\n                argsMapper: Ao({\n                    clientMethod: i,\n                    activeProvider: a\n                }),\n                callsite: Ze(this._errorFormat),\n                dataPath: [],\n                middlewareArgsMapper: s\n            });\n        }\n        $queryRaw(n, ...i) {\n            return this._createPrismaPromise((o)=>{\n                if (n.raw !== void 0 || n.sql !== void 0) return this.$queryRawInternal(o, \"$queryRaw\", ...mu(n, i));\n                throw new Z(\"`$queryRaw` is a tag function, please use it like the following:\\n```\\nconst result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`\\n```\\n\\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw\\n\", {\n                    clientVersion: this._clientVersion\n                });\n            });\n        }\n        $queryRawTyped(n) {\n            return this._createPrismaPromise((i)=>{\n                if (!this._hasPreviewFlag(\"typedSql\")) throw new Z(\"`typedSql` preview feature must be enabled in order to access $queryRawTyped API\", {\n                    clientVersion: this._clientVersion\n                });\n                return this.$queryRawInternal(i, \"$queryRawTyped\", n);\n            });\n        }\n        $queryRawUnsafe(n, ...i) {\n            return this._createPrismaPromise((o)=>this.$queryRawInternal(o, \"$queryRawUnsafe\", [\n                    n,\n                    ...i\n                ]));\n        }\n        _transactionWithArray({ promises: n, options: i }) {\n            let o = Vf.nextId(), s = Xl(n.length), a = n.map((l, u)=>{\n                if (l?.[Symbol.toStringTag] !== \"PrismaPromise\") throw new Error(\"All elements of the array need to be Prisma Client promises. Hint: Please make sure you are not awaiting the Prisma client calls you intended to pass in the $transaction function.\");\n                let c = i?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel, p = {\n                    kind: \"batch\",\n                    id: o,\n                    index: u,\n                    isolationLevel: c,\n                    lock: s\n                };\n                return l.requestTransaction?.(p) ?? l;\n            });\n            return du(a);\n        }\n        async _transactionWithCallback({ callback: n, options: i }) {\n            let o = {\n                traceparent: this._tracingHelper.getTraceParent()\n            }, s = {\n                maxWait: i?.maxWait ?? this._engineConfig.transactionOptions.maxWait,\n                timeout: i?.timeout ?? this._engineConfig.transactionOptions.timeout,\n                isolationLevel: i?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel\n            }, a = await this._engine.transaction(\"start\", o, s), l;\n            try {\n                let u = {\n                    kind: \"itx\",\n                    ...a\n                };\n                l = await n(this._createItxClient(u)), await this._engine.transaction(\"commit\", o, a);\n            } catch (u) {\n                throw await this._engine.transaction(\"rollback\", o, a).catch(()=>{}), u;\n            }\n            return l;\n        }\n        _createItxClient(n) {\n            return he(Pt(he(Ya(this), [\n                re(\"_appliedParent\", ()=>this._appliedParent._createItxClient(n)),\n                re(\"_createPrismaPromise\", ()=>Co(n)),\n                re(jf, ()=>n.id)\n            ])), [\n                Mr(rl)\n            ]);\n        }\n        $transaction(n, i) {\n            let o;\n            typeof n == \"function\" ? this._engineConfig.adapter?.adapterName === \"@prisma/adapter-d1\" ? o = ()=>{\n                throw new Error(\"Cloudflare D1 does not support interactive transactions. We recommend you to refactor your queries with that limitation in mind, and use batch transactions with `prisma.$transactions([])` where applicable.\");\n            } : o = ()=>this._transactionWithCallback({\n                    callback: n,\n                    options: i\n                }) : o = ()=>this._transactionWithArray({\n                    promises: n,\n                    options: i\n                });\n            let s = {\n                name: \"transaction\",\n                attributes: {\n                    method: \"$transaction\"\n                }\n            };\n            return this._tracingHelper.runInChildSpan(s, o);\n        }\n        _request(n) {\n            n.otelParentCtx = this._tracingHelper.getActiveContext();\n            let i = n.middlewareArgsMapper ?? qf, o = {\n                args: i.requestArgsToMiddlewareArgs(n.args),\n                dataPath: n.dataPath,\n                runInTransaction: !!n.transaction,\n                action: n.action,\n                model: n.model\n            }, s = {\n                middleware: {\n                    name: \"middleware\",\n                    middleware: !0,\n                    attributes: {\n                        method: \"$use\"\n                    },\n                    active: !1\n                },\n                operation: {\n                    name: \"operation\",\n                    attributes: {\n                        method: o.action,\n                        model: o.model,\n                        name: o.model ? `${o.model}.${o.action}` : o.action\n                    }\n                }\n            }, a = -1, l = async (u)=>{\n                let c = this._middlewares.get(++a);\n                if (c) return this._tracingHelper.runInChildSpan(s.middleware, (S)=>c(u, (P)=>(S?.end(), l(P))));\n                let { runInTransaction: p, args: d, ...f } = u, h = {\n                    ...n,\n                    ...f\n                };\n                d && (h.args = i.middlewareArgsToRequestArgs(d)), n.transaction !== void 0 && p === !1 && delete h.transaction;\n                let g = await ol(this, h);\n                return h.model ? el({\n                    result: g,\n                    modelName: h.model,\n                    args: h.args,\n                    extensions: this._extensions,\n                    runtimeDataModel: this._runtimeDataModel,\n                    globalOmit: this._globalOmit\n                }) : g;\n            };\n            return this._tracingHelper.runInChildSpan(s.operation, ()=>new gu.AsyncResource(\"prisma-client-request\").runInAsyncScope(()=>l(o)));\n        }\n        async _executeRequest({ args: n, clientMethod: i, dataPath: o, callsite: s, action: a, model: l, argsMapper: u, transaction: c, unpacker: p, otelParentCtx: d, customDataProxyFetch: f }) {\n            try {\n                n = u ? u(n) : n;\n                let h = {\n                    name: \"serialize\"\n                }, g = this._tracingHelper.runInChildSpan(h, ()=>Mn({\n                        modelName: l,\n                        runtimeDataModel: this._runtimeDataModel,\n                        action: a,\n                        args: n,\n                        clientMethod: i,\n                        callsite: s,\n                        extensions: this._extensions,\n                        errorFormat: this._errorFormat,\n                        clientVersion: this._clientVersion,\n                        previewFeatures: this._previewFeatures,\n                        globalOmit: this._globalOmit\n                    }));\n                return N.enabled(\"prisma:client\") && (rr(\"Prisma Client call:\"), rr(`prisma.${i}(${qa(n)})`), rr(\"Generated request:\"), rr(JSON.stringify(g, null, 2) + `\n`)), c?.kind === \"batch\" && await c.lock, this._requestHandler.request({\n                    protocolQuery: g,\n                    modelName: l,\n                    action: a,\n                    clientMethod: i,\n                    dataPath: o,\n                    callsite: s,\n                    args: n,\n                    extensions: this._extensions,\n                    transaction: c,\n                    unpacker: p,\n                    otelParentCtx: d,\n                    otelChildCtx: this._tracingHelper.getActiveContext(),\n                    globalOmit: this._globalOmit,\n                    customDataProxyFetch: f\n                });\n            } catch (h) {\n                throw h.clientVersion = this._clientVersion, h;\n            }\n        }\n        _hasPreviewFlag(n) {\n            return !!this._engineConfig.previewFeatures?.includes(n);\n        }\n        $applyPendingMigrations() {\n            return this._engine.applyPendingMigrations();\n        }\n    }\n    return r;\n}\nfunction mu(e, r) {\n    return Bf(e) ? [\n        new oe(e, r),\n        Kl\n    ] : [\n        e,\n        Yl\n    ];\n}\nfunction Bf(e) {\n    return Array.isArray(e) && Array.isArray(e.raw);\n}\nvar Uf = new Set([\n    \"toJSON\",\n    \"$$typeof\",\n    \"asymmetricMatch\",\n    Symbol.iterator,\n    Symbol.toStringTag,\n    Symbol.isConcatSpreadable,\n    Symbol.toPrimitive\n]);\nfunction Eu(e) {\n    return new Proxy(e, {\n        get (r, t) {\n            if (t in r) return r[t];\n            if (!Uf.has(t)) throw new TypeError(`Invalid enum value: ${String(t)}`);\n        }\n    });\n}\nfunction wu(e) {\n    st(e, {\n        conflictCheck: \"warn\"\n    });\n}\n0 && (0); /*! Bundled license information:\n\ndecimal.js/decimal.mjs:\n  (*!\n   *  decimal.js v10.5.0\n   *  An arbitrary-precision Decimal type for JavaScript.\n   *  https://github.com/MikeMcl/decimal.js\n   *  Copyright (c) 2025 Michael Mclaughlin <M8ch88l@gmail.com>\n   *  MIT Licence\n   *)\n*/  //# sourceMappingURL=library.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvZ2VuZXJhdGVkL3ByaXNtYS9ydW50aW1lL2xpYnJhcnkuanMiLCJtYXBwaW5ncyI6IkFBQ0E7a0JBQ2tCLEdBQ0w7QUFBQSxJQUFJQSxLQUFHQyxPQUFPQyxNQUFNO0FBQUMsSUFBSUMsS0FBR0YsT0FBT0csY0FBYztBQUFDLElBQUlDLEtBQUdKLE9BQU9LLHdCQUF3QjtBQUFDLElBQUlDLEtBQUdOLE9BQU9PLG1CQUFtQjtBQUFDLElBQUlDLEtBQUdSLE9BQU9TLGNBQWMsRUFBQ0MsS0FBR1YsT0FBT1csU0FBUyxDQUFDQyxjQUFjO0FBQUMsSUFBSUMsS0FBRyxDQUFDQyxHQUFFQyxJQUFJLElBQUtELENBQUFBLEtBQUlDLENBQUFBLElBQUVELEVBQUVBLElBQUUsRUFBQyxHQUFHQyxDQUFBQTtBQUFHLElBQUlDLEtBQUcsQ0FBQ0YsR0FBRUMsSUFBSSxJQUFLQSxDQUFBQSxLQUFHRCxFQUFFLENBQUNDLElBQUU7WUFBQ0UsU0FBUSxDQUFDO1FBQUMsR0FBR0EsT0FBTyxFQUFDRixJQUFHQSxFQUFFRSxPQUFPLEdBQUVDLEtBQUcsQ0FBQ0osR0FBRUM7SUFBSyxJQUFJLElBQUlJLEtBQUtKLEVBQUViLEdBQUdZLEdBQUVLLEdBQUU7UUFBQ0MsS0FBSUwsQ0FBQyxDQUFDSSxFQUFFO1FBQUNFLFlBQVcsQ0FBQztJQUFDO0FBQUUsR0FBRUMsS0FBRyxDQUFDUixHQUFFQyxHQUFFSSxHQUFFSTtJQUFLLElBQUdSLEtBQUcsT0FBT0EsS0FBRyxZQUFVLE9BQU9BLEtBQUcsWUFBVyxLQUFJLElBQUlTLEtBQUtsQixHQUFHUyxHQUFHLENBQUNMLEdBQUdlLElBQUksQ0FBQ1gsR0FBRVUsTUFBSUEsTUFBSUwsS0FBR2pCLEdBQUdZLEdBQUVVLEdBQUU7UUFBQ0osS0FBSSxJQUFJTCxDQUFDLENBQUNTLEVBQUU7UUFBQ0gsWUFBVyxDQUFFRSxDQUFBQSxJQUFFbkIsR0FBR1csR0FBRVMsRUFBQyxLQUFJRCxFQUFFRixVQUFVO0lBQUE7SUFBRyxPQUFP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QUFBRSxTQUFTNXFELEdBQUd4VCxDQUFDO0lBQUUsT0FBTyxJQUFJdWEsTUFBTXZhLEdBQUU7UUFBQ00sS0FBSUwsQ0FBQyxFQUFDSSxDQUFDO1lBQUUsSUFBR0EsS0FBS0osR0FBRSxPQUFPQSxDQUFDLENBQUNJLEVBQUU7WUFBQyxJQUFHLENBQUM0OUQsR0FBR3RqRCxHQUFHLENBQUN0YSxJQUFHLE1BQU0sSUFBSTBJLFVBQVUsQ0FBQyxvQkFBb0IsRUFBRWdsQixPQUFPMXRCLElBQUk7UUFBQztJQUFDO0FBQUU7QUFBQyxTQUFTaVUsR0FBR3RVLENBQUM7SUFBRW13QixHQUFHbndCLEdBQUU7UUFBQ3N3QixlQUFjO0lBQU07QUFBRTtBQUFDLEtBQUk3YixDQUFBQSxDQUF1ZCxHQUNqOEM7Ozs7Ozs7Ozs7QUFVQSxJQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsiRTpcXEFJIFdvcmtcXFdvcmtcXFByb2ZcXGhhbmdlci1vblxcbGliXFxnZW5lcmF0ZWRcXHByaXNtYVxccnVudGltZVxcbGlicmFyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qICEhISBUaGlzIGlzIGNvZGUgZ2VuZXJhdGVkIGJ5IFByaXNtYS4gRG8gbm90IGVkaXQgZGlyZWN0bHkuICEhIVxuLyogZXNsaW50LWRpc2FibGUgKi9cblwidXNlIHN0cmljdFwiO3ZhciB4dT1PYmplY3QuY3JlYXRlO3ZhciBWdD1PYmplY3QuZGVmaW5lUHJvcGVydHk7dmFyIHZ1PU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7dmFyIFB1PU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO3ZhciBUdT1PYmplY3QuZ2V0UHJvdG90eXBlT2YsU3U9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTt2YXIgT289KGUscik9PigpPT4oZSYmKHI9ZShlPTApKSxyKTt2YXIgbmU9KGUscik9PigpPT4ocnx8ZSgocj17ZXhwb3J0czp7fX0pLmV4cG9ydHMsciksci5leHBvcnRzKSx0cj0oZSxyKT0+e2Zvcih2YXIgdCBpbiByKVZ0KGUsdCx7Z2V0OnJbdF0sZW51bWVyYWJsZTohMH0pfSxfbz0oZSxyLHQsbik9PntpZihyJiZ0eXBlb2Ygcj09XCJvYmplY3RcInx8dHlwZW9mIHI9PVwiZnVuY3Rpb25cIilmb3IobGV0IGkgb2YgUHUocikpIVN1LmNhbGwoZSxpKSYmaSE9PXQmJlZ0KGUsaSx7Z2V0OigpPT5yW2ldLGVudW1lcmFibGU6IShuPXZ1KHIsaSkpfHxuLmVudW1lcmFibGV9KTtyZXR1cm4gZX07dmFyIEM9KGUscix0KT0+KHQ9ZSE9bnVsbD94dShUdShlKSk6e30sX28ocnx8IWV8fCFlLl9fZXNNb2R1bGU/VnQodCxcImRlZmF1bHRcIix7dmFsdWU6ZSxlbnVtZXJhYmxlOiEwfSk6dCxlKSksUnU9ZT0+X28oVnQoe30sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZSk7dmFyIHlpPW5lKChGZyxzcyk9PntcInVzZSBzdHJpY3RcIjtzcy5leHBvcnRzPShlLHI9cHJvY2Vzcy5hcmd2KT0+e2xldCB0PWUuc3RhcnRzV2l0aChcIi1cIik/XCJcIjplLmxlbmd0aD09PTE/XCItXCI6XCItLVwiLG49ci5pbmRleE9mKHQrZSksaT1yLmluZGV4T2YoXCItLVwiKTtyZXR1cm4gbiE9PS0xJiYoaT09PS0xfHxuPGkpfX0pO3ZhciB1cz1uZSgoTWcsbHMpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIGpjPXJlcXVpcmUoXCJub2RlOm9zXCIpLGFzPXJlcXVpcmUoXCJub2RlOnR0eVwiKSxkZT15aSgpLHtlbnY6R309cHJvY2VzcyxRZTtkZShcIm5vLWNvbG9yXCIpfHxkZShcIm5vLWNvbG9yc1wiKXx8ZGUoXCJjb2xvcj1mYWxzZVwiKXx8ZGUoXCJjb2xvcj1uZXZlclwiKT9RZT0wOihkZShcImNvbG9yXCIpfHxkZShcImNvbG9yc1wiKXx8ZGUoXCJjb2xvcj10cnVlXCIpfHxkZShcImNvbG9yPWFsd2F5c1wiKSkmJihRZT0xKTtcIkZPUkNFX0NPTE9SXCJpbiBHJiYoRy5GT1JDRV9DT0xPUj09PVwidHJ1ZVwiP1FlPTE6Ry5GT1JDRV9DT0xPUj09PVwiZmFsc2VcIj9RZT0wOlFlPUcuRk9SQ0VfQ09MT1IubGVuZ3RoPT09MD8xOk1hdGgubWluKHBhcnNlSW50KEcuRk9SQ0VfQ09MT1IsMTApLDMpKTtmdW5jdGlvbiBiaShlKXtyZXR1cm4gZT09PTA/ITE6e2xldmVsOmUsaGFzQmFzaWM6ITAsaGFzMjU2OmU+PTIsaGFzMTZtOmU+PTN9fWZ1bmN0aW9uIEVpKGUscil7aWYoUWU9PT0wKXJldHVybiAwO2lmKGRlKFwiY29sb3I9MTZtXCIpfHxkZShcImNvbG9yPWZ1bGxcIil8fGRlKFwiY29sb3I9dHJ1ZWNvbG9yXCIpKXJldHVybiAzO2lmKGRlKFwiY29sb3I9MjU2XCIpKXJldHVybiAyO2lmKGUmJiFyJiZRZT09PXZvaWQgMClyZXR1cm4gMDtsZXQgdD1RZXx8MDtpZihHLlRFUk09PT1cImR1bWJcIilyZXR1cm4gdDtpZihwcm9jZXNzLnBsYXRmb3JtPT09XCJ3aW4zMlwiKXtsZXQgbj1qYy5yZWxlYXNlKCkuc3BsaXQoXCIuXCIpO3JldHVybiBOdW1iZXIoblswXSk+PTEwJiZOdW1iZXIoblsyXSk+PTEwNTg2P051bWJlcihuWzJdKT49MTQ5MzE/MzoyOjF9aWYoXCJDSVwiaW4gRylyZXR1cm5bXCJUUkFWSVNcIixcIkNJUkNMRUNJXCIsXCJBUFBWRVlPUlwiLFwiR0lUTEFCX0NJXCIsXCJHSVRIVUJfQUNUSU9OU1wiLFwiQlVJTERLSVRFXCJdLnNvbWUobj0+biBpbiBHKXx8Ry5DSV9OQU1FPT09XCJjb2Rlc2hpcFwiPzE6dDtpZihcIlRFQU1DSVRZX1ZFUlNJT05cImluIEcpcmV0dXJuL14oOVxcLigwKlsxLTldXFxkKilcXC58XFxkezIsfVxcLikvLnRlc3QoRy5URUFNQ0lUWV9WRVJTSU9OKT8xOjA7aWYoRy5DT0xPUlRFUk09PT1cInRydWVjb2xvclwiKXJldHVybiAzO2lmKFwiVEVSTV9QUk9HUkFNXCJpbiBHKXtsZXQgbj1wYXJzZUludCgoRy5URVJNX1BST0dSQU1fVkVSU0lPTnx8XCJcIikuc3BsaXQoXCIuXCIpWzBdLDEwKTtzd2l0Y2goRy5URVJNX1BST0dSQU0pe2Nhc2VcImlUZXJtLmFwcFwiOnJldHVybiBuPj0zPzM6MjtjYXNlXCJBcHBsZV9UZXJtaW5hbFwiOnJldHVybiAyfX1yZXR1cm4vLTI1Nihjb2xvcik/JC9pLnRlc3QoRy5URVJNKT8yOi9ec2NyZWVufF54dGVybXxednQxMDB8XnZ0MjIwfF5yeHZ0fGNvbG9yfGFuc2l8Y3lnd2lufGxpbnV4L2kudGVzdChHLlRFUk0pfHxcIkNPTE9SVEVSTVwiaW4gRz8xOnR9ZnVuY3Rpb24gVmMoZSl7bGV0IHI9RWkoZSxlJiZlLmlzVFRZKTtyZXR1cm4gYmkocil9bHMuZXhwb3J0cz17c3VwcG9ydHNDb2xvcjpWYyxzdGRvdXQ6YmkoRWkoITAsYXMuaXNhdHR5KDEpKSksc3RkZXJyOmJpKEVpKCEwLGFzLmlzYXR0eSgyKSkpfX0pO3ZhciBkcz1uZSgoJGcscHMpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIEJjPXVzKCksYnI9eWkoKTtmdW5jdGlvbiBjcyhlKXtpZigvXlxcZHszLDR9JC8udGVzdChlKSl7bGV0IHQ9LyhcXGR7MSwyfSkoXFxkezJ9KS8uZXhlYyhlKXx8W107cmV0dXJue21ham9yOjAsbWlub3I6cGFyc2VJbnQodFsxXSwxMCkscGF0Y2g6cGFyc2VJbnQodFsyXSwxMCl9fWxldCByPShlfHxcIlwiKS5zcGxpdChcIi5cIikubWFwKHQ9PnBhcnNlSW50KHQsMTApKTtyZXR1cm57bWFqb3I6clswXSxtaW5vcjpyWzFdLHBhdGNoOnJbMl19fWZ1bmN0aW9uIHdpKGUpe2xldHtDSTpyLEZPUkNFX0hZUEVSTElOSzp0LE5FVExJRlk6bixURUFNQ0lUWV9WRVJTSU9OOmksVEVSTV9QUk9HUkFNOm8sVEVSTV9QUk9HUkFNX1ZFUlNJT046cyxWVEVfVkVSU0lPTjphLFRFUk06bH09cHJvY2Vzcy5lbnY7aWYodClyZXR1cm4hKHQubGVuZ3RoPjAmJnBhcnNlSW50KHQsMTApPT09MCk7aWYoYnIoXCJuby1oeXBlcmxpbmtcIil8fGJyKFwibm8taHlwZXJsaW5rc1wiKXx8YnIoXCJoeXBlcmxpbms9ZmFsc2VcIil8fGJyKFwiaHlwZXJsaW5rPW5ldmVyXCIpKXJldHVybiExO2lmKGJyKFwiaHlwZXJsaW5rPXRydWVcIil8fGJyKFwiaHlwZXJsaW5rPWFsd2F5c1wiKXx8bilyZXR1cm4hMDtpZighQmMuc3VwcG9ydHNDb2xvcihlKXx8ZSYmIWUuaXNUVFkpcmV0dXJuITE7aWYoXCJXVF9TRVNTSU9OXCJpbiBwcm9jZXNzLmVudilyZXR1cm4hMDtpZihwcm9jZXNzLnBsYXRmb3JtPT09XCJ3aW4zMlwifHxyfHxpKXJldHVybiExO2lmKG8pe2xldCB1PWNzKHN8fFwiXCIpO3N3aXRjaChvKXtjYXNlXCJpVGVybS5hcHBcIjpyZXR1cm4gdS5tYWpvcj09PTM/dS5taW5vcj49MTp1Lm1ham9yPjM7Y2FzZVwiV2V6VGVybVwiOnJldHVybiB1Lm1ham9yPj0yMDIwMDYyMDtjYXNlXCJ2c2NvZGVcIjpyZXR1cm4gdS5tYWpvcj4xfHx1Lm1ham9yPT09MSYmdS5taW5vcj49NzI7Y2FzZVwiZ2hvc3R0eVwiOnJldHVybiEwfX1pZihhKXtpZihhPT09XCIwLjUwLjBcIilyZXR1cm4hMTtsZXQgdT1jcyhhKTtyZXR1cm4gdS5tYWpvcj4wfHx1Lm1pbm9yPj01MH1zd2l0Y2gobCl7Y2FzZVwiYWxhY3JpdHR5XCI6cmV0dXJuITB9cmV0dXJuITF9cHMuZXhwb3J0cz17c3VwcG9ydHNIeXBlcmxpbms6d2ksc3Rkb3V0OndpKHByb2Nlc3Muc3Rkb3V0KSxzdGRlcnI6d2kocHJvY2Vzcy5zdGRlcnIpfX0pO3ZhciBtcz1uZSgoemcsVWMpPT57VWMuZXhwb3J0cz17bmFtZTpcIkBwcmlzbWEvaW50ZXJuYWxzXCIsdmVyc2lvbjpcIjYuMTMuMFwiLGRlc2NyaXB0aW9uOlwiVGhpcyBwYWNrYWdlIGlzIGludGVuZGVkIGZvciBQcmlzbWEncyBpbnRlcm5hbCB1c2VcIixtYWluOlwiZGlzdC9pbmRleC5qc1wiLHR5cGVzOlwiZGlzdC9pbmRleC5kLnRzXCIscmVwb3NpdG9yeTp7dHlwZTpcImdpdFwiLHVybDpcImh0dHBzOi8vZ2l0aHViLmNvbS9wcmlzbWEvcHJpc21hLmdpdFwiLGRpcmVjdG9yeTpcInBhY2thZ2VzL2ludGVybmFsc1wifSxob21lcGFnZTpcImh0dHBzOi8vd3d3LnByaXNtYS5pb1wiLGF1dGhvcjpcIlRpbSBTdWNoYW5layA8c3VjaGFuZWtAcHJpc21hLmlvPlwiLGJ1Z3M6XCJodHRwczovL2dpdGh1Yi5jb20vcHJpc21hL3ByaXNtYS9pc3N1ZXNcIixsaWNlbnNlOlwiQXBhY2hlLTIuMFwiLHNjcmlwdHM6e2RldjpcIkRFVj10cnVlIHRzeCBoZWxwZXJzL2J1aWxkLnRzXCIsYnVpbGQ6XCJ0c3ggaGVscGVycy9idWlsZC50c1wiLHRlc3Q6XCJkb3RlbnYgLWUgLi4vLi4vLmRiLmVudiAtLSBqZXN0IC0tc2lsZW50XCIscHJlcHVibGlzaE9ubHk6XCJwbnBtIHJ1biBidWlsZFwifSxmaWxlczpbXCJSRUFETUUubWRcIixcImRpc3RcIixcIiEqKi9saWJxdWVyeV9lbmdpbmUqXCIsXCIhZGlzdC9nZXQtZ2VuZXJhdG9ycy9lbmdpbmVzLypcIixcInNjcmlwdHNcIl0sZGV2RGVwZW5kZW5jaWVzOntcIkBiYWJlbC9oZWxwZXItdmFsaWRhdG9yLWlkZW50aWZpZXJcIjpcIjcuMjUuOVwiLFwiQG9wZW50ZWxlbWV0cnkvYXBpXCI6XCIxLjkuMFwiLFwiQHN3Yy9jb3JlXCI6XCIxLjExLjVcIixcIkBzd2MvamVzdFwiOlwiMC4yLjM3XCIsXCJAdHlwZXMvYmFiZWxfX2hlbHBlci12YWxpZGF0b3ItaWRlbnRpZmllclwiOlwiNy4xNS4yXCIsXCJAdHlwZXMvamVzdFwiOlwiMjkuNS4xNFwiLFwiQHR5cGVzL25vZGVcIjpcIjE4LjE5Ljc2XCIsXCJAdHlwZXMvcmVzb2x2ZVwiOlwiMS4yMC42XCIsYXJjaGl2ZXI6XCI2LjAuMlwiLFwiY2hlY2twb2ludC1jbGllbnRcIjpcIjEuMS4zM1wiLFwiY2xpLXRydW5jYXRlXCI6XCI0LjAuMFwiLGRvdGVudjpcIjE2LjUuMFwiLGVzYnVpbGQ6XCIwLjI1LjVcIixcImVzY2FwZS1zdHJpbmctcmVnZXhwXCI6XCI1LjAuMFwiLGV4ZWNhOlwiNS4xLjFcIixcImZhc3QtZ2xvYlwiOlwiMy4zLjNcIixcImZpbmQtdXBcIjpcIjcuMC4wXCIsXCJmcC10c1wiOlwiMi4xNi45XCIsXCJmcy1leHRyYVwiOlwiMTEuMy4wXCIsXCJmcy1qZXRwYWNrXCI6XCI1LjEuMFwiLFwiZ2xvYmFsLWRpcnNcIjpcIjQuMC4wXCIsZ2xvYmJ5OlwiMTEuMS4wXCIsXCJpZGVudGlmaWVyLXJlZ2V4XCI6XCIxLjAuMFwiLFwiaW5kZW50LXN0cmluZ1wiOlwiNC4wLjBcIixcImlzLXdpbmRvd3NcIjpcIjEuMC4yXCIsXCJpcy13c2xcIjpcIjMuMS4wXCIsamVzdDpcIjI5LjcuMFwiLFwiamVzdC1qdW5pdFwiOlwiMTYuMC4wXCIsa2xldXI6XCI0LjEuNVwiLFwibW9jay1zdGRpblwiOlwiMS4wLjBcIixcIm5ldy1naXRodWItaXNzdWUtdXJsXCI6XCIwLjIuMVwiLFwibm9kZS1mZXRjaFwiOlwiMy4zLjJcIixcIm5wbS1wYWNrbGlzdFwiOlwiNS4xLjNcIixvcGVuOlwiNy40LjJcIixcInAtbWFwXCI6XCI0LjAuMFwiLFwicmVhZC1wYWNrYWdlLXVwXCI6XCIxMS4wLjBcIixyZXNvbHZlOlwiMS4yMi4xMFwiLFwic3RyaW5nLXdpZHRoXCI6XCI3LjIuMFwiLFwic3RyaXAtYW5zaVwiOlwiNi4wLjFcIixcInN0cmlwLWluZGVudFwiOlwiNC4wLjBcIixcInRlbXAtZGlyXCI6XCIyLjAuMFwiLHRlbXB5OlwiMS4wLjFcIixcInRlcm1pbmFsLWxpbmtcIjpcIjQuMC4wXCIsdG1wOlwiMC4yLjNcIixcInRzLW5vZGVcIjpcIjEwLjkuMlwiLFwidHMtcGF0dGVyblwiOlwiNS42LjJcIixcInRzLXRvb2xiZWx0XCI6XCI5LjYuMFwiLHR5cGVzY3JpcHQ6XCI1LjQuNVwiLHlhcm46XCIxLjIyLjIyXCJ9LGRlcGVuZGVuY2llczp7XCJAcHJpc21hL2NvbmZpZ1wiOlwid29ya3NwYWNlOipcIixcIkBwcmlzbWEvZGVidWdcIjpcIndvcmtzcGFjZToqXCIsXCJAcHJpc21hL2RtbWZcIjpcIndvcmtzcGFjZToqXCIsXCJAcHJpc21hL2RyaXZlci1hZGFwdGVyLXV0aWxzXCI6XCJ3b3Jrc3BhY2U6KlwiLFwiQHByaXNtYS9lbmdpbmVzXCI6XCJ3b3Jrc3BhY2U6KlwiLFwiQHByaXNtYS9mZXRjaC1lbmdpbmVcIjpcIndvcmtzcGFjZToqXCIsXCJAcHJpc21hL2dlbmVyYXRvclwiOlwid29ya3NwYWNlOipcIixcIkBwcmlzbWEvZ2VuZXJhdG9yLWhlbHBlclwiOlwid29ya3NwYWNlOipcIixcIkBwcmlzbWEvZ2V0LXBsYXRmb3JtXCI6XCJ3b3Jrc3BhY2U6KlwiLFwiQHByaXNtYS9wcmlzbWEtc2NoZW1hLXdhc21cIjpcIjYuMTMuMC0zNS4zNjFlODZkMGVhNDk4N2U5ZjUzYTU2NTMwOWIzZWVkNzk3YTZiY2JkXCIsXCJAcHJpc21hL3NjaGVtYS1lbmdpbmUtd2FzbVwiOlwiNi4xMy4wLTM1LjM2MWU4NmQwZWE0OTg3ZTlmNTNhNTY1MzA5YjNlZWQ3OTdhNmJjYmRcIixcIkBwcmlzbWEvc2NoZW1hLWZpbGVzLWxvYWRlclwiOlwid29ya3NwYWNlOipcIixhcmc6XCI1LjAuMlwiLHByb21wdHM6XCIyLjQuMlwifSxwZWVyRGVwZW5kZW5jaWVzOnt0eXBlc2NyaXB0OlwiPj01LjEuMFwifSxwZWVyRGVwZW5kZW5jaWVzTWV0YTp7dHlwZXNjcmlwdDp7b3B0aW9uYWw6ITB9fSxzaWRlRWZmZWN0czohMX19KTt2YXIgU2k9bmUoKGJoLEtjKT0+e0tjLmV4cG9ydHM9e25hbWU6XCJAcHJpc21hL2VuZ2luZXMtdmVyc2lvblwiLHZlcnNpb246XCI2LjEzLjAtMzUuMzYxZTg2ZDBlYTQ5ODdlOWY1M2E1NjUzMDliM2VlZDc5N2E2YmNiZFwiLG1haW46XCJpbmRleC5qc1wiLHR5cGVzOlwiaW5kZXguZC50c1wiLGxpY2Vuc2U6XCJBcGFjaGUtMi4wXCIsYXV0aG9yOlwiVGltIFN1Y2hhbmVrIDxzdWNoYW5la0BwcmlzbWEuaW8+XCIscHJpc21hOntlbmdpbmVzVmVyc2lvbjpcIjM2MWU4NmQwZWE0OTg3ZTlmNTNhNTY1MzA5YjNlZWQ3OTdhNmJjYmRcIn0scmVwb3NpdG9yeTp7dHlwZTpcImdpdFwiLHVybDpcImh0dHBzOi8vZ2l0aHViLmNvbS9wcmlzbWEvZW5naW5lcy13cmFwcGVyLmdpdFwiLGRpcmVjdG9yeTpcInBhY2thZ2VzL2VuZ2luZXMtdmVyc2lvblwifSxkZXZEZXBlbmRlbmNpZXM6e1wiQHR5cGVzL25vZGVcIjpcIjE4LjE5Ljc2XCIsdHlwZXNjcmlwdDpcIjQuOS41XCJ9LGZpbGVzOltcImluZGV4LmpzXCIsXCJpbmRleC5kLnRzXCJdLHNjcmlwdHM6e2J1aWxkOlwidHNjIC1kXCJ9fX0pO3ZhciBvbj1uZShubj0+e1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShubixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtubi5lbmdpbmVzVmVyc2lvbj12b2lkIDA7bm4uZW5naW5lc1ZlcnNpb249U2koKS5wcmlzbWEuZW5naW5lc1ZlcnNpb259KTt2YXIgYnM9bmUoKE9oLHlzKT0+e1widXNlIHN0cmljdFwiO3lzLmV4cG9ydHM9ZT0+e2xldCByPWUubWF0Y2goL15bIFxcdF0qKD89XFxTKS9nbSk7cmV0dXJuIHI/ci5yZWR1Y2UoKHQsbik9Pk1hdGgubWluKHQsbi5sZW5ndGgpLDEvMCk6MH19KTt2YXIgRGk9bmUoKExoLHhzKT0+e1widXNlIHN0cmljdFwiO3hzLmV4cG9ydHM9KGUscj0xLHQpPT57aWYodD17aW5kZW50OlwiIFwiLGluY2x1ZGVFbXB0eUxpbmVzOiExLC4uLnR9LHR5cGVvZiBlIT1cInN0cmluZ1wiKXRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIFxcYGlucHV0XFxgIHRvIGJlIGEgXFxgc3RyaW5nXFxgLCBnb3QgXFxgJHt0eXBlb2YgZX1cXGBgKTtpZih0eXBlb2YgciE9XCJudW1iZXJcIil0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBcXGBjb3VudFxcYCB0byBiZSBhIFxcYG51bWJlclxcYCwgZ290IFxcYCR7dHlwZW9mIHJ9XFxgYCk7aWYodHlwZW9mIHQuaW5kZW50IT1cInN0cmluZ1wiKXRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIFxcYG9wdGlvbnMuaW5kZW50XFxgIHRvIGJlIGEgXFxgc3RyaW5nXFxgLCBnb3QgXFxgJHt0eXBlb2YgdC5pbmRlbnR9XFxgYCk7aWYocj09PTApcmV0dXJuIGU7bGV0IG49dC5pbmNsdWRlRW1wdHlMaW5lcz8vXi9nbTovXig/IVxccyokKS9nbTtyZXR1cm4gZS5yZXBsYWNlKG4sdC5pbmRlbnQucmVwZWF0KHIpKX19KTt2YXIgU3M9bmUoKCRoLFRzKT0+e1widXNlIHN0cmljdFwiO1RzLmV4cG9ydHM9KHtvbmx5Rmlyc3Q6ZT0hMX09e30pPT57bGV0IHI9W1wiW1xcXFx1MDAxQlxcXFx1MDA5Ql1bW1xcXFxdKCkjOz9dKig/Oig/Oig/Oig/OjtbLWEtekEtWlxcXFxkXFxcXC8jJi46PT8lQH5fXSspKnxbYS16QS1aXFxcXGRdKyg/OjtbLWEtekEtWlxcXFxkXFxcXC8jJi46PT8lQH5fXSopKik/XFxcXHUwMDA3KVwiLFwiKD86KD86XFxcXGR7MSw0fSg/OjtcXFxcZHswLDR9KSopP1tcXFxcZEEtUFItVFpjZi1udHFyeT0+PH5dKSlcIl0uam9pbihcInxcIik7cmV0dXJuIG5ldyBSZWdFeHAocixlP3ZvaWQgMDpcImdcIil9fSk7dmFyIExpPW5lKChxaCxScyk9PntcInVzZSBzdHJpY3RcIjt2YXIgb3A9U3MoKTtScy5leHBvcnRzPWU9PnR5cGVvZiBlPT1cInN0cmluZ1wiP2UucmVwbGFjZShvcCgpLFwiXCIpOmV9KTt2YXIgQXM9bmUoKFVoLHNwKT0+e3NwLmV4cG9ydHM9e25hbWU6XCJkb3RlbnZcIix2ZXJzaW9uOlwiMTYuNS4wXCIsZGVzY3JpcHRpb246XCJMb2FkcyBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZnJvbSAuZW52IGZpbGVcIixtYWluOlwibGliL21haW4uanNcIix0eXBlczpcImxpYi9tYWluLmQudHNcIixleHBvcnRzOntcIi5cIjp7dHlwZXM6XCIuL2xpYi9tYWluLmQudHNcIixyZXF1aXJlOlwiLi9saWIvbWFpbi5qc1wiLGRlZmF1bHQ6XCIuL2xpYi9tYWluLmpzXCJ9LFwiLi9jb25maWdcIjpcIi4vY29uZmlnLmpzXCIsXCIuL2NvbmZpZy5qc1wiOlwiLi9jb25maWcuanNcIixcIi4vbGliL2Vudi1vcHRpb25zXCI6XCIuL2xpYi9lbnYtb3B0aW9ucy5qc1wiLFwiLi9saWIvZW52LW9wdGlvbnMuanNcIjpcIi4vbGliL2Vudi1vcHRpb25zLmpzXCIsXCIuL2xpYi9jbGktb3B0aW9uc1wiOlwiLi9saWIvY2xpLW9wdGlvbnMuanNcIixcIi4vbGliL2NsaS1vcHRpb25zLmpzXCI6XCIuL2xpYi9jbGktb3B0aW9ucy5qc1wiLFwiLi9wYWNrYWdlLmpzb25cIjpcIi4vcGFja2FnZS5qc29uXCJ9LHNjcmlwdHM6e1wiZHRzLWNoZWNrXCI6XCJ0c2MgLS1wcm9qZWN0IHRlc3RzL3R5cGVzL3RzY29uZmlnLmpzb25cIixsaW50Olwic3RhbmRhcmRcIixwcmV0ZXN0OlwibnBtIHJ1biBsaW50ICYmIG5wbSBydW4gZHRzLWNoZWNrXCIsdGVzdDpcInRhcCBydW4gLS1hbGxvdy1lbXB0eS1jb3ZlcmFnZSAtLWRpc2FibGUtY292ZXJhZ2UgLS10aW1lb3V0PTYwMDAwXCIsXCJ0ZXN0OmNvdmVyYWdlXCI6XCJ0YXAgcnVuIC0tc2hvdy1mdWxsLWNvdmVyYWdlIC0tdGltZW91dD02MDAwMCAtLWNvdmVyYWdlLXJlcG9ydD1sY292XCIscHJlcmVsZWFzZTpcIm5wbSB0ZXN0XCIscmVsZWFzZTpcInN0YW5kYXJkLXZlcnNpb25cIn0scmVwb3NpdG9yeTp7dHlwZTpcImdpdFwiLHVybDpcImdpdDovL2dpdGh1Yi5jb20vbW90ZG90bGEvZG90ZW52LmdpdFwifSxob21lcGFnZTpcImh0dHBzOi8vZ2l0aHViLmNvbS9tb3Rkb3RsYS9kb3RlbnYjcmVhZG1lXCIsZnVuZGluZzpcImh0dHBzOi8vZG90ZW52eC5jb21cIixrZXl3b3JkczpbXCJkb3RlbnZcIixcImVudlwiLFwiLmVudlwiLFwiZW52aXJvbm1lbnRcIixcInZhcmlhYmxlc1wiLFwiY29uZmlnXCIsXCJzZXR0aW5nc1wiXSxyZWFkbWVGaWxlbmFtZTpcIlJFQURNRS5tZFwiLGxpY2Vuc2U6XCJCU0QtMi1DbGF1c2VcIixkZXZEZXBlbmRlbmNpZXM6e1wiQHR5cGVzL25vZGVcIjpcIl4xOC4xMS4zXCIsZGVjYWNoZTpcIl40LjYuMlwiLHNpbm9uOlwiXjE0LjAuMVwiLHN0YW5kYXJkOlwiXjE3LjAuMFwiLFwic3RhbmRhcmQtdmVyc2lvblwiOlwiXjkuNS4wXCIsdGFwOlwiXjE5LjIuMFwiLHR5cGVzY3JpcHQ6XCJeNC44LjRcIn0sZW5naW5lczp7bm9kZTpcIj49MTJcIn0sYnJvd3Nlcjp7ZnM6ITF9fX0pO3ZhciBPcz1uZSgoR2gsTGUpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIE1pPXJlcXVpcmUoXCJub2RlOmZzXCIpLCRpPXJlcXVpcmUoXCJub2RlOnBhdGhcIiksYXA9cmVxdWlyZShcIm5vZGU6b3NcIiksbHA9cmVxdWlyZShcIm5vZGU6Y3J5cHRvXCIpLHVwPUFzKCksSXM9dXAudmVyc2lvbixjcD0vKD86XnxeKVxccyooPzpleHBvcnRcXHMrKT8oW1xcdy4tXSspKD86XFxzKj1cXHMqP3w6XFxzKz8pKFxccyonKD86XFxcXCd8W14nXSkqJ3xcXHMqXCIoPzpcXFxcXCJ8W15cIl0pKlwifFxccypgKD86XFxcXGB8W15gXSkqYHxbXiNcXHJcXG5dKyk/XFxzKig/OiMuKik/KD86JHwkKS9tZztmdW5jdGlvbiBwcChlKXtsZXQgcj17fSx0PWUudG9TdHJpbmcoKTt0PXQucmVwbGFjZSgvXFxyXFxuPy9tZyxgXG5gKTtsZXQgbjtmb3IoOyhuPWNwLmV4ZWModCkpIT1udWxsOyl7bGV0IGk9blsxXSxvPW5bMl18fFwiXCI7bz1vLnRyaW0oKTtsZXQgcz1vWzBdO289by5yZXBsYWNlKC9eKFsnXCJgXSkoW1xcc1xcU10qKVxcMSQvbWcsXCIkMlwiKSxzPT09J1wiJyYmKG89by5yZXBsYWNlKC9cXFxcbi9nLGBcbmApLG89by5yZXBsYWNlKC9cXFxcci9nLFwiXFxyXCIpKSxyW2ldPW99cmV0dXJuIHJ9ZnVuY3Rpb24gZHAoZSl7bGV0IHI9RHMoZSksdD1CLmNvbmZpZ0RvdGVudih7cGF0aDpyfSk7aWYoIXQucGFyc2VkKXtsZXQgcz1uZXcgRXJyb3IoYE1JU1NJTkdfREFUQTogQ2Fubm90IHBhcnNlICR7cn0gZm9yIGFuIHVua25vd24gcmVhc29uYCk7dGhyb3cgcy5jb2RlPVwiTUlTU0lOR19EQVRBXCIsc31sZXQgbj1rcyhlKS5zcGxpdChcIixcIiksaT1uLmxlbmd0aCxvO2ZvcihsZXQgcz0wO3M8aTtzKyspdHJ5e2xldCBhPW5bc10udHJpbSgpLGw9ZnAodCxhKTtvPUIuZGVjcnlwdChsLmNpcGhlcnRleHQsbC5rZXkpO2JyZWFrfWNhdGNoKGEpe2lmKHMrMT49aSl0aHJvdyBhfXJldHVybiBCLnBhcnNlKG8pfWZ1bmN0aW9uIG1wKGUpe2NvbnNvbGUubG9nKGBbZG90ZW52QCR7SXN9XVtXQVJOXSAke2V9YCl9ZnVuY3Rpb24gb3QoZSl7Y29uc29sZS5sb2coYFtkb3RlbnZAJHtJc31dW0RFQlVHXSAke2V9YCl9ZnVuY3Rpb24ga3MoZSl7cmV0dXJuIGUmJmUuRE9URU5WX0tFWSYmZS5ET1RFTlZfS0VZLmxlbmd0aD4wP2UuRE9URU5WX0tFWTpwcm9jZXNzLmVudi5ET1RFTlZfS0VZJiZwcm9jZXNzLmVudi5ET1RFTlZfS0VZLmxlbmd0aD4wP3Byb2Nlc3MuZW52LkRPVEVOVl9LRVk6XCJcIn1mdW5jdGlvbiBmcChlLHIpe2xldCB0O3RyeXt0PW5ldyBVUkwocil9Y2F0Y2goYSl7aWYoYS5jb2RlPT09XCJFUlJfSU5WQUxJRF9VUkxcIil7bGV0IGw9bmV3IEVycm9yKFwiSU5WQUxJRF9ET1RFTlZfS0VZOiBXcm9uZyBmb3JtYXQuIE11c3QgYmUgaW4gdmFsaWQgdXJpIGZvcm1hdCBsaWtlIGRvdGVudjovLzprZXlfMTIzNEBkb3RlbnZ4LmNvbS92YXVsdC8uZW52LnZhdWx0P2Vudmlyb25tZW50PWRldmVsb3BtZW50XCIpO3Rocm93IGwuY29kZT1cIklOVkFMSURfRE9URU5WX0tFWVwiLGx9dGhyb3cgYX1sZXQgbj10LnBhc3N3b3JkO2lmKCFuKXtsZXQgYT1uZXcgRXJyb3IoXCJJTlZBTElEX0RPVEVOVl9LRVk6IE1pc3Npbmcga2V5IHBhcnRcIik7dGhyb3cgYS5jb2RlPVwiSU5WQUxJRF9ET1RFTlZfS0VZXCIsYX1sZXQgaT10LnNlYXJjaFBhcmFtcy5nZXQoXCJlbnZpcm9ubWVudFwiKTtpZighaSl7bGV0IGE9bmV3IEVycm9yKFwiSU5WQUxJRF9ET1RFTlZfS0VZOiBNaXNzaW5nIGVudmlyb25tZW50IHBhcnRcIik7dGhyb3cgYS5jb2RlPVwiSU5WQUxJRF9ET1RFTlZfS0VZXCIsYX1sZXQgbz1gRE9URU5WX1ZBVUxUXyR7aS50b1VwcGVyQ2FzZSgpfWAscz1lLnBhcnNlZFtvXTtpZighcyl7bGV0IGE9bmV3IEVycm9yKGBOT1RfRk9VTkRfRE9URU5WX0VOVklST05NRU5UOiBDYW5ub3QgbG9jYXRlIGVudmlyb25tZW50ICR7b30gaW4geW91ciAuZW52LnZhdWx0IGZpbGUuYCk7dGhyb3cgYS5jb2RlPVwiTk9UX0ZPVU5EX0RPVEVOVl9FTlZJUk9OTUVOVFwiLGF9cmV0dXJue2NpcGhlcnRleHQ6cyxrZXk6bn19ZnVuY3Rpb24gRHMoZSl7bGV0IHI9bnVsbDtpZihlJiZlLnBhdGgmJmUucGF0aC5sZW5ndGg+MClpZihBcnJheS5pc0FycmF5KGUucGF0aCkpZm9yKGxldCB0IG9mIGUucGF0aClNaS5leGlzdHNTeW5jKHQpJiYocj10LmVuZHNXaXRoKFwiLnZhdWx0XCIpP3Q6YCR7dH0udmF1bHRgKTtlbHNlIHI9ZS5wYXRoLmVuZHNXaXRoKFwiLnZhdWx0XCIpP2UucGF0aDpgJHtlLnBhdGh9LnZhdWx0YDtlbHNlIHI9JGkucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLFwiLmVudi52YXVsdFwiKTtyZXR1cm4gTWkuZXhpc3RzU3luYyhyKT9yOm51bGx9ZnVuY3Rpb24gQ3MoZSl7cmV0dXJuIGVbMF09PT1cIn5cIj8kaS5qb2luKGFwLmhvbWVkaXIoKSxlLnNsaWNlKDEpKTplfWZ1bmN0aW9uIGdwKGUpeyEhKGUmJmUuZGVidWcpJiZvdChcIkxvYWRpbmcgZW52IGZyb20gZW5jcnlwdGVkIC5lbnYudmF1bHRcIik7bGV0IHQ9Qi5fcGFyc2VWYXVsdChlKSxuPXByb2Nlc3MuZW52O3JldHVybiBlJiZlLnByb2Nlc3NFbnYhPW51bGwmJihuPWUucHJvY2Vzc0VudiksQi5wb3B1bGF0ZShuLHQsZSkse3BhcnNlZDp0fX1mdW5jdGlvbiBocChlKXtsZXQgcj0kaS5yZXNvbHZlKHByb2Nlc3MuY3dkKCksXCIuZW52XCIpLHQ9XCJ1dGY4XCIsbj0hIShlJiZlLmRlYnVnKTtlJiZlLmVuY29kaW5nP3Q9ZS5lbmNvZGluZzpuJiZvdChcIk5vIGVuY29kaW5nIGlzIHNwZWNpZmllZC4gVVRGLTggaXMgdXNlZCBieSBkZWZhdWx0XCIpO2xldCBpPVtyXTtpZihlJiZlLnBhdGgpaWYoIUFycmF5LmlzQXJyYXkoZS5wYXRoKSlpPVtDcyhlLnBhdGgpXTtlbHNle2k9W107Zm9yKGxldCBsIG9mIGUucGF0aClpLnB1c2goQ3MobCkpfWxldCBvLHM9e307Zm9yKGxldCBsIG9mIGkpdHJ5e2xldCB1PUIucGFyc2UoTWkucmVhZEZpbGVTeW5jKGwse2VuY29kaW5nOnR9KSk7Qi5wb3B1bGF0ZShzLHUsZSl9Y2F0Y2godSl7biYmb3QoYEZhaWxlZCB0byBsb2FkICR7bH0gJHt1Lm1lc3NhZ2V9YCksbz11fWxldCBhPXByb2Nlc3MuZW52O3JldHVybiBlJiZlLnByb2Nlc3NFbnYhPW51bGwmJihhPWUucHJvY2Vzc0VudiksQi5wb3B1bGF0ZShhLHMsZSksbz97cGFyc2VkOnMsZXJyb3I6b306e3BhcnNlZDpzfX1mdW5jdGlvbiB5cChlKXtpZihrcyhlKS5sZW5ndGg9PT0wKXJldHVybiBCLmNvbmZpZ0RvdGVudihlKTtsZXQgcj1EcyhlKTtyZXR1cm4gcj9CLl9jb25maWdWYXVsdChlKToobXAoYFlvdSBzZXQgRE9URU5WX0tFWSBidXQgeW91IGFyZSBtaXNzaW5nIGEgLmVudi52YXVsdCBmaWxlIGF0ICR7cn0uIERpZCB5b3UgZm9yZ2V0IHRvIGJ1aWxkIGl0P2ApLEIuY29uZmlnRG90ZW52KGUpKX1mdW5jdGlvbiBicChlLHIpe2xldCB0PUJ1ZmZlci5mcm9tKHIuc2xpY2UoLTY0KSxcImhleFwiKSxuPUJ1ZmZlci5mcm9tKGUsXCJiYXNlNjRcIiksaT1uLnN1YmFycmF5KDAsMTIpLG89bi5zdWJhcnJheSgtMTYpO249bi5zdWJhcnJheSgxMiwtMTYpO3RyeXtsZXQgcz1scC5jcmVhdGVEZWNpcGhlcml2KFwiYWVzLTI1Ni1nY21cIix0LGkpO3JldHVybiBzLnNldEF1dGhUYWcobyksYCR7cy51cGRhdGUobil9JHtzLmZpbmFsKCl9YH1jYXRjaChzKXtsZXQgYT1zIGluc3RhbmNlb2YgUmFuZ2VFcnJvcixsPXMubWVzc2FnZT09PVwiSW52YWxpZCBrZXkgbGVuZ3RoXCIsdT1zLm1lc3NhZ2U9PT1cIlVuc3VwcG9ydGVkIHN0YXRlIG9yIHVuYWJsZSB0byBhdXRoZW50aWNhdGUgZGF0YVwiO2lmKGF8fGwpe2xldCBjPW5ldyBFcnJvcihcIklOVkFMSURfRE9URU5WX0tFWTogSXQgbXVzdCBiZSA2NCBjaGFyYWN0ZXJzIGxvbmcgKG9yIG1vcmUpXCIpO3Rocm93IGMuY29kZT1cIklOVkFMSURfRE9URU5WX0tFWVwiLGN9ZWxzZSBpZih1KXtsZXQgYz1uZXcgRXJyb3IoXCJERUNSWVBUSU9OX0ZBSUxFRDogUGxlYXNlIGNoZWNrIHlvdXIgRE9URU5WX0tFWVwiKTt0aHJvdyBjLmNvZGU9XCJERUNSWVBUSU9OX0ZBSUxFRFwiLGN9ZWxzZSB0aHJvdyBzfX1mdW5jdGlvbiBFcChlLHIsdD17fSl7bGV0IG49ISEodCYmdC5kZWJ1ZyksaT0hISh0JiZ0Lm92ZXJyaWRlKTtpZih0eXBlb2YgciE9XCJvYmplY3RcIil7bGV0IG89bmV3IEVycm9yKFwiT0JKRUNUX1JFUVVJUkVEOiBQbGVhc2UgY2hlY2sgdGhlIHByb2Nlc3NFbnYgYXJndW1lbnQgYmVpbmcgcGFzc2VkIHRvIHBvcHVsYXRlXCIpO3Rocm93IG8uY29kZT1cIk9CSkVDVF9SRVFVSVJFRFwiLG99Zm9yKGxldCBvIG9mIE9iamVjdC5rZXlzKHIpKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG8pPyhpPT09ITAmJihlW29dPXJbb10pLG4mJm90KGk9PT0hMD9gXCIke299XCIgaXMgYWxyZWFkeSBkZWZpbmVkIGFuZCBXQVMgb3ZlcndyaXR0ZW5gOmBcIiR7b31cIiBpcyBhbHJlYWR5IGRlZmluZWQgYW5kIHdhcyBOT1Qgb3ZlcndyaXR0ZW5gKSk6ZVtvXT1yW29dfXZhciBCPXtjb25maWdEb3RlbnY6aHAsX2NvbmZpZ1ZhdWx0OmdwLF9wYXJzZVZhdWx0OmRwLGNvbmZpZzp5cCxkZWNyeXB0OmJwLHBhcnNlOnBwLHBvcHVsYXRlOkVwfTtMZS5leHBvcnRzLmNvbmZpZ0RvdGVudj1CLmNvbmZpZ0RvdGVudjtMZS5leHBvcnRzLl9jb25maWdWYXVsdD1CLl9jb25maWdWYXVsdDtMZS5leHBvcnRzLl9wYXJzZVZhdWx0PUIuX3BhcnNlVmF1bHQ7TGUuZXhwb3J0cy5jb25maWc9Qi5jb25maWc7TGUuZXhwb3J0cy5kZWNyeXB0PUIuZGVjcnlwdDtMZS5leHBvcnRzLnBhcnNlPUIucGFyc2U7TGUuZXhwb3J0cy5wb3B1bGF0ZT1CLnBvcHVsYXRlO0xlLmV4cG9ydHM9Qn0pO3ZhciBGcz1uZSgoWWgsY24pPT57XCJ1c2Ugc3RyaWN0XCI7Y24uZXhwb3J0cz0oZT17fSk9PntsZXQgcjtpZihlLnJlcG9Vcmwpcj1lLnJlcG9Vcmw7ZWxzZSBpZihlLnVzZXImJmUucmVwbylyPWBodHRwczovL2dpdGh1Yi5jb20vJHtlLnVzZXJ9LyR7ZS5yZXBvfWA7ZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbmVlZCB0byBzcGVjaWZ5IGVpdGhlciB0aGUgYHJlcG9VcmxgIG9wdGlvbiBvciBib3RoIHRoZSBgdXNlcmAgYW5kIGByZXBvYCBvcHRpb25zXCIpO2xldCB0PW5ldyBVUkwoYCR7cn0vaXNzdWVzL25ld2ApLG49W1wiYm9keVwiLFwidGl0bGVcIixcImxhYmVsc1wiLFwidGVtcGxhdGVcIixcIm1pbGVzdG9uZVwiLFwiYXNzaWduZWVcIixcInByb2plY3RzXCJdO2ZvcihsZXQgaSBvZiBuKXtsZXQgbz1lW2ldO2lmKG8hPT12b2lkIDApe2lmKGk9PT1cImxhYmVsc1wifHxpPT09XCJwcm9qZWN0c1wiKXtpZighQXJyYXkuaXNBcnJheShvKSl0aHJvdyBuZXcgVHlwZUVycm9yKGBUaGUgXFxgJHtpfVxcYCBvcHRpb24gc2hvdWxkIGJlIGFuIGFycmF5YCk7bz1vLmpvaW4oXCIsXCIpfXQuc2VhcmNoUGFyYW1zLnNldChpLG8pfX1yZXR1cm4gdC50b1N0cmluZygpfTtjbi5leHBvcnRzLmRlZmF1bHQ9Y24uZXhwb3J0c30pO3ZhciBLaT1uZSgoQWIsb2EpPT57XCJ1c2Ugc3RyaWN0XCI7b2EuZXhwb3J0cz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUocix0LG4saSxvKXtyZXR1cm4gcjx0fHxuPHQ/cj5uP24rMTpyKzE6aT09PW8/dDp0KzF9cmV0dXJuIGZ1bmN0aW9uKHIsdCl7aWYocj09PXQpcmV0dXJuIDA7aWYoci5sZW5ndGg+dC5sZW5ndGgpe3ZhciBuPXI7cj10LHQ9bn1mb3IodmFyIGk9ci5sZW5ndGgsbz10Lmxlbmd0aDtpPjAmJnIuY2hhckNvZGVBdChpLTEpPT09dC5jaGFyQ29kZUF0KG8tMSk7KWktLSxvLS07Zm9yKHZhciBzPTA7czxpJiZyLmNoYXJDb2RlQXQocyk9PT10LmNoYXJDb2RlQXQocyk7KXMrKztpZihpLT1zLG8tPXMsaT09PTB8fG88MylyZXR1cm4gbzt2YXIgYT0wLGwsdSxjLHAsZCxmLGgsZyxTLFAsUixiLEQ9W107Zm9yKGw9MDtsPGk7bCsrKUQucHVzaChsKzEpLEQucHVzaChyLmNoYXJDb2RlQXQocytsKSk7Zm9yKHZhciBtZT1ELmxlbmd0aC0xO2E8by0zOylmb3IoUz10LmNoYXJDb2RlQXQocysodT1hKSksUD10LmNoYXJDb2RlQXQocysoYz1hKzEpKSxSPXQuY2hhckNvZGVBdChzKyhwPWErMikpLGI9dC5jaGFyQ29kZUF0KHMrKGQ9YSszKSksZj1hKz00LGw9MDtsPG1lO2wrPTIpaD1EW2xdLGc9RFtsKzFdLHU9ZShoLHUsYyxTLGcpLGM9ZSh1LGMscCxQLGcpLHA9ZShjLHAsZCxSLGcpLGY9ZShwLGQsZixiLGcpLERbbF09ZixkPXAscD1jLGM9dSx1PWg7Zm9yKDthPG87KWZvcihTPXQuY2hhckNvZGVBdChzKyh1PWEpKSxmPSsrYSxsPTA7bDxtZTtsKz0yKWg9RFtsXSxEW2xdPWY9ZShoLHUsZixTLERbbCsxXSksdT1oO3JldHVybiBmfX0oKX0pO3ZhciBjYT1PbygoKT0+e1widXNlIHN0cmljdFwifSk7dmFyIHBhPU9vKCgpPT57XCJ1c2Ugc3RyaWN0XCJ9KTt2YXIgR2Y9e307dHIoR2Yse0RNTUY6KCk9PmN0LERlYnVnOigpPT5OLERlY2ltYWw6KCk9PnZlLEV4dGVuc2lvbnM6KCk9PmlpLE1ldHJpY3NDbGllbnQ6KCk9PkZyLFByaXNtYUNsaWVudEluaXRpYWxpemF0aW9uRXJyb3I6KCk9PlQsUHJpc21hQ2xpZW50S25vd25SZXF1ZXN0RXJyb3I6KCk9PnosUHJpc21hQ2xpZW50UnVzdFBhbmljRXJyb3I6KCk9PmxlLFByaXNtYUNsaWVudFVua25vd25SZXF1ZXN0RXJyb3I6KCk9PmosUHJpc21hQ2xpZW50VmFsaWRhdGlvbkVycm9yOigpPT5aLFB1YmxpYzooKT0+b2ksU3FsOigpPT5vZSxjcmVhdGVQYXJhbTooKT0+QWEsZGVmaW5lRG1tZlByb3BlcnR5OigpPT5fYSxkZXNlcmlhbGl6ZUpzb25SZXNwb25zZTooKT0+VHIsZGVzZXJpYWxpemVSYXdSZXN1bHQ6KCk9PmVpLGRtbWZUb1J1bnRpbWVEYXRhTW9kZWw6KCk9PlhzLGVtcHR5OigpPT5GYSxnZXRQcmlzbWFDbGllbnQ6KCk9PmJ1LGdldFJ1bnRpbWU6KCk9PkduLGpvaW46KCk9PkxhLG1ha2VTdHJpY3RFbnVtOigpPT5FdSxtYWtlVHlwZWRRdWVyeUZhY3Rvcnk6KCk9Pk5hLG9iamVjdEVudW1WYWx1ZXM6KCk9PmtuLHJhdzooKT0+aW8sc2VyaWFsaXplSnNvblF1ZXJ5OigpPT5Nbixza2lwOigpPT5GbixzcWx0YWc6KCk9Pm9vLHdhcm5FbnZDb25mbGljdHM6KCk9Pnd1LHdhcm5PbmNlOigpPT5hdH0pO21vZHVsZS5leHBvcnRzPVJ1KEdmKTt2YXIgaWk9e307dHIoaWkse2RlZmluZUV4dGVuc2lvbjooKT0+Tm8sZ2V0RXh0ZW5zaW9uQ29udGV4dDooKT0+TG99KTtmdW5jdGlvbiBObyhlKXtyZXR1cm4gdHlwZW9mIGU9PVwiZnVuY3Rpb25cIj9lOnI9PnIuJGV4dGVuZHMoZSl9ZnVuY3Rpb24gTG8oZSl7cmV0dXJuIGV9dmFyIG9pPXt9O3RyKG9pLHt2YWxpZGF0b3I6KCk9PkZvfSk7ZnVuY3Rpb24gRm8oLi4uZSl7cmV0dXJuIHI9PnJ9dmFyIEJ0PXt9O3RyKEJ0LHskOigpPT5WbyxiZ0JsYWNrOigpPT5GdSxiZ0JsdWU6KCk9Pmp1LGJnQ3lhbjooKT0+QnUsYmdHcmVlbjooKT0+JHUsYmdNYWdlbnRhOigpPT5WdSxiZ1JlZDooKT0+TXUsYmdXaGl0ZTooKT0+VXUsYmdZZWxsb3c6KCk9PnF1LGJsYWNrOigpPT5PdSxibHVlOigpPT5ucixib2xkOigpPT5XLGN5YW46KCk9PkRlLGRpbTooKT0+SWUsZ3JheTooKT0+S3IsZ3JlZW46KCk9PnFlLGdyZXk6KCk9Pkx1LGhpZGRlbjooKT0+a3UsaW52ZXJzZTooKT0+SXUsaXRhbGljOigpPT5DdSxtYWdlbnRhOigpPT5fdSxyZWQ6KCk9PmNlLHJlc2V0OigpPT5BdSxzdHJpa2V0aHJvdWdoOigpPT5EdSx1bmRlcmxpbmU6KCk9Plksd2hpdGU6KCk9Pk51LHllbGxvdzooKT0+a2V9KTt2YXIgc2ksTW8sJG8scW8sam89ITA7dHlwZW9mIHByb2Nlc3M8XCJ1XCImJih7Rk9SQ0VfQ09MT1I6c2ksTk9ERV9ESVNBQkxFX0NPTE9SUzpNbyxOT19DT0xPUjokbyxURVJNOnFvfT1wcm9jZXNzLmVudnx8e30sam89cHJvY2Vzcy5zdGRvdXQmJnByb2Nlc3Muc3Rkb3V0LmlzVFRZKTt2YXIgVm89e2VuYWJsZWQ6IU1vJiYkbz09bnVsbCYmcW8hPT1cImR1bWJcIiYmKHNpIT1udWxsJiZzaSE9PVwiMFwifHxqbyl9O2Z1bmN0aW9uIEYoZSxyKXtsZXQgdD1uZXcgUmVnRXhwKGBcXFxceDFiXFxcXFske3J9bWAsXCJnXCIpLG49YFxceDFCWyR7ZX1tYCxpPWBcXHgxQlske3J9bWA7cmV0dXJuIGZ1bmN0aW9uKG8pe3JldHVybiFWby5lbmFibGVkfHxvPT1udWxsP286bisofihcIlwiK28pLmluZGV4T2YoaSk/by5yZXBsYWNlKHQsaStuKTpvKStpfX12YXIgQXU9RigwLDApLFc9RigxLDIyKSxJZT1GKDIsMjIpLEN1PUYoMywyMyksWT1GKDQsMjQpLEl1PUYoNywyNyksa3U9Rig4LDI4KSxEdT1GKDksMjkpLE91PUYoMzAsMzkpLGNlPUYoMzEsMzkpLHFlPUYoMzIsMzkpLGtlPUYoMzMsMzkpLG5yPUYoMzQsMzkpLF91PUYoMzUsMzkpLERlPUYoMzYsMzkpLE51PUYoMzcsMzkpLEtyPUYoOTAsMzkpLEx1PUYoOTAsMzkpLEZ1PUYoNDAsNDkpLE11PUYoNDEsNDkpLCR1PUYoNDIsNDkpLHF1PUYoNDMsNDkpLGp1PUYoNDQsNDkpLFZ1PUYoNDUsNDkpLEJ1PUYoNDYsNDkpLFV1PUYoNDcsNDkpO3ZhciBHdT0xMDAsQm89W1wiZ3JlZW5cIixcInllbGxvd1wiLFwiYmx1ZVwiLFwibWFnZW50YVwiLFwiY3lhblwiLFwicmVkXCJdLFlyPVtdLFVvPURhdGUubm93KCksUXU9MCxhaT10eXBlb2YgcHJvY2VzczxcInVcIj9wcm9jZXNzLmVudjp7fTtnbG9iYWxUaGlzLkRFQlVHPz89YWkuREVCVUc/P1wiXCI7Z2xvYmFsVGhpcy5ERUJVR19DT0xPUlM/Pz1haS5ERUJVR19DT0xPUlM/YWkuREVCVUdfQ09MT1JTPT09XCJ0cnVlXCI6ITA7dmFyIHpyPXtlbmFibGUoZSl7dHlwZW9mIGU9PVwic3RyaW5nXCImJihnbG9iYWxUaGlzLkRFQlVHPWUpfSxkaXNhYmxlKCl7bGV0IGU9Z2xvYmFsVGhpcy5ERUJVRztyZXR1cm4gZ2xvYmFsVGhpcy5ERUJVRz1cIlwiLGV9LGVuYWJsZWQoZSl7bGV0IHI9Z2xvYmFsVGhpcy5ERUJVRy5zcGxpdChcIixcIikubWFwKGk9PmkucmVwbGFjZSgvWy4rP14ke30oKXxbXFxdXFxcXF0vZyxcIlxcXFwkJlwiKSksdD1yLnNvbWUoaT0+aT09PVwiXCJ8fGlbMF09PT1cIi1cIj8hMTplLm1hdGNoKFJlZ0V4cChpLnNwbGl0KFwiKlwiKS5qb2luKFwiLipcIikrXCIkXCIpKSksbj1yLnNvbWUoaT0+aT09PVwiXCJ8fGlbMF0hPT1cIi1cIj8hMTplLm1hdGNoKFJlZ0V4cChpLnNsaWNlKDEpLnNwbGl0KFwiKlwiKS5qb2luKFwiLipcIikrXCIkXCIpKSk7cmV0dXJuIHQmJiFufSxsb2c6KC4uLmUpPT57bGV0W3IsdCwuLi5uXT1lOyhjb25zb2xlLndhcm4/P2NvbnNvbGUubG9nKShgJHtyfSAke3R9YCwuLi5uKX0sZm9ybWF0dGVyczp7fX07ZnVuY3Rpb24gV3UoZSl7bGV0IHI9e2NvbG9yOkJvW1F1KyslQm8ubGVuZ3RoXSxlbmFibGVkOnpyLmVuYWJsZWQoZSksbmFtZXNwYWNlOmUsbG9nOnpyLmxvZyxleHRlbmQ6KCk9Pnt9fSx0PSguLi5uKT0+e2xldHtlbmFibGVkOmksbmFtZXNwYWNlOm8sY29sb3I6cyxsb2c6YX09cjtpZihuLmxlbmd0aCE9PTAmJllyLnB1c2goW28sLi4ubl0pLFlyLmxlbmd0aD5HdSYmWXIuc2hpZnQoKSx6ci5lbmFibGVkKG8pfHxpKXtsZXQgbD1uLm1hcChjPT50eXBlb2YgYz09XCJzdHJpbmdcIj9jOkp1KGMpKSx1PWArJHtEYXRlLm5vdygpLVVvfW1zYDtVbz1EYXRlLm5vdygpLGdsb2JhbFRoaXMuREVCVUdfQ09MT1JTP2EoQnRbc10oVyhvKSksLi4ubCxCdFtzXSh1KSk6YShvLC4uLmwsdSl9fTtyZXR1cm4gbmV3IFByb3h5KHQse2dldDoobixpKT0+cltpXSxzZXQ6KG4saSxvKT0+cltpXT1vfSl9dmFyIE49bmV3IFByb3h5KFd1LHtnZXQ6KGUscik9PnpyW3JdLHNldDooZSxyLHQpPT56cltyXT10fSk7ZnVuY3Rpb24gSnUoZSxyPTIpe2xldCB0PW5ldyBTZXQ7cmV0dXJuIEpTT04uc3RyaW5naWZ5KGUsKG4saSk9PntpZih0eXBlb2YgaT09XCJvYmplY3RcIiYmaSE9PW51bGwpe2lmKHQuaGFzKGkpKXJldHVyblwiW0NpcmN1bGFyICpdXCI7dC5hZGQoaSl9ZWxzZSBpZih0eXBlb2YgaT09XCJiaWdpbnRcIilyZXR1cm4gaS50b1N0cmluZygpO3JldHVybiBpfSxyKX1mdW5jdGlvbiBHbyhlPTc1MDApe2xldCByPVlyLm1hcCgoW3QsLi4ubl0pPT5gJHt0fSAke24ubWFwKGk9PnR5cGVvZiBpPT1cInN0cmluZ1wiP2k6SlNPTi5zdHJpbmdpZnkoaSkpLmpvaW4oXCIgXCIpfWApLmpvaW4oYFxuYCk7cmV0dXJuIHIubGVuZ3RoPGU/cjpyLnNsaWNlKC1lKX1mdW5jdGlvbiBRbygpe1lyLmxlbmd0aD0wfXZhciBncj1OO3ZhciBXbz1DKHJlcXVpcmUoXCJub2RlOmZzXCIpKTtmdW5jdGlvbiBsaSgpe2xldCBlPXByb2Nlc3MuZW52LlBSSVNNQV9RVUVSWV9FTkdJTkVfTElCUkFSWTtpZighKGUmJldvLmRlZmF1bHQuZXhpc3RzU3luYyhlKSkmJnByb2Nlc3MuYXJjaD09PVwiaWEzMlwiKXRocm93IG5ldyBFcnJvcignVGhlIGRlZmF1bHQgcXVlcnkgZW5naW5lIHR5cGUgKE5vZGUtQVBJLCBcImxpYnJhcnlcIikgaXMgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWQgZm9yIDMyYml0IE5vZGUuIFBsZWFzZSBzZXQgYGVuZ2luZVR5cGUgPSBcImJpbmFyeVwiYCBpbiB0aGUgXCJnZW5lcmF0b3JcIiBibG9jayBvZiB5b3VyIFwic2NoZW1hLnByaXNtYVwiIGZpbGUgKG9yIHVzZSB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGVzIFwiUFJJU01BX0NMSUVOVF9FTkdJTkVfVFlQRT1iaW5hcnlcIiBhbmQvb3IgXCJQUklTTUFfQ0xJX1FVRVJZX0VOR0lORV9UWVBFPWJpbmFyeVwiLiknKX12YXIgdWk9W1wiZGFyd2luXCIsXCJkYXJ3aW4tYXJtNjRcIixcImRlYmlhbi1vcGVuc3NsLTEuMC54XCIsXCJkZWJpYW4tb3BlbnNzbC0xLjEueFwiLFwiZGViaWFuLW9wZW5zc2wtMy4wLnhcIixcInJoZWwtb3BlbnNzbC0xLjAueFwiLFwicmhlbC1vcGVuc3NsLTEuMS54XCIsXCJyaGVsLW9wZW5zc2wtMy4wLnhcIixcImxpbnV4LWFybTY0LW9wZW5zc2wtMS4xLnhcIixcImxpbnV4LWFybTY0LW9wZW5zc2wtMS4wLnhcIixcImxpbnV4LWFybTY0LW9wZW5zc2wtMy4wLnhcIixcImxpbnV4LWFybS1vcGVuc3NsLTEuMS54XCIsXCJsaW51eC1hcm0tb3BlbnNzbC0xLjAueFwiLFwibGludXgtYXJtLW9wZW5zc2wtMy4wLnhcIixcImxpbnV4LW11c2xcIixcImxpbnV4LW11c2wtb3BlbnNzbC0zLjAueFwiLFwibGludXgtbXVzbC1hcm02NC1vcGVuc3NsLTEuMS54XCIsXCJsaW51eC1tdXNsLWFybTY0LW9wZW5zc2wtMy4wLnhcIixcImxpbnV4LW5peG9zXCIsXCJsaW51eC1zdGF0aWMteDY0XCIsXCJsaW51eC1zdGF0aWMtYXJtNjRcIixcIndpbmRvd3NcIixcImZyZWVic2QxMVwiLFwiZnJlZWJzZDEyXCIsXCJmcmVlYnNkMTNcIixcImZyZWVic2QxNFwiLFwiZnJlZWJzZDE1XCIsXCJvcGVuYnNkXCIsXCJuZXRic2RcIixcImFybVwiXTt2YXIgVXQ9XCJsaWJxdWVyeV9lbmdpbmVcIjtmdW5jdGlvbiBHdChlLHIpe2xldCB0PXI9PT1cInVybFwiO3JldHVybiBlLmluY2x1ZGVzKFwid2luZG93c1wiKT90P1wicXVlcnlfZW5naW5lLmRsbC5ub2RlXCI6YHF1ZXJ5X2VuZ2luZS0ke2V9LmRsbC5ub2RlYDplLmluY2x1ZGVzKFwiZGFyd2luXCIpP3Q/YCR7VXR9LmR5bGliLm5vZGVgOmAke1V0fS0ke2V9LmR5bGliLm5vZGVgOnQ/YCR7VXR9LnNvLm5vZGVgOmAke1V0fS0ke2V9LnNvLm5vZGVgfXZhciBZbz1DKHJlcXVpcmUoXCJub2RlOmNoaWxkX3Byb2Nlc3NcIikpLGZpPUMocmVxdWlyZShcIm5vZGU6ZnMvcHJvbWlzZXNcIikpLEt0PUMocmVxdWlyZShcIm5vZGU6b3NcIikpO3ZhciBPZT1TeW1ib2wuZm9yKFwiQHRzLXBhdHRlcm4vbWF0Y2hlclwiKSxIdT1TeW1ib2wuZm9yKFwiQHRzLXBhdHRlcm4vaXNWYXJpYWRpY1wiKSxXdD1cIkB0cy1wYXR0ZXJuL2Fub255bW91cy1zZWxlY3Qta2V5XCIsY2k9ZT0+ISEoZSYmdHlwZW9mIGU9PVwib2JqZWN0XCIpLFF0PWU9PmUmJiEhZVtPZV0sRWU9KGUscix0KT0+e2lmKFF0KGUpKXtsZXQgbj1lW09lXSgpLHttYXRjaGVkOmksc2VsZWN0aW9uczpvfT1uLm1hdGNoKHIpO3JldHVybiBpJiZvJiZPYmplY3Qua2V5cyhvKS5mb3JFYWNoKHM9PnQocyxvW3NdKSksaX1pZihjaShlKSl7aWYoIWNpKHIpKXJldHVybiExO2lmKEFycmF5LmlzQXJyYXkoZSkpe2lmKCFBcnJheS5pc0FycmF5KHIpKXJldHVybiExO2xldCBuPVtdLGk9W10sbz1bXTtmb3IobGV0IHMgb2YgZS5rZXlzKCkpe2xldCBhPWVbc107UXQoYSkmJmFbSHVdP28ucHVzaChhKTpvLmxlbmd0aD9pLnB1c2goYSk6bi5wdXNoKGEpfWlmKG8ubGVuZ3RoKXtpZihvLmxlbmd0aD4xKXRocm93IG5ldyBFcnJvcihcIlBhdHRlcm4gZXJyb3I6IFVzaW5nIGAuLi5QLmFycmF5KC4uLilgIHNldmVyYWwgdGltZXMgaW4gYSBzaW5nbGUgcGF0dGVybiBpcyBub3QgYWxsb3dlZC5cIik7aWYoci5sZW5ndGg8bi5sZW5ndGgraS5sZW5ndGgpcmV0dXJuITE7bGV0IHM9ci5zbGljZSgwLG4ubGVuZ3RoKSxhPWkubGVuZ3RoPT09MD9bXTpyLnNsaWNlKC1pLmxlbmd0aCksbD1yLnNsaWNlKG4ubGVuZ3RoLGkubGVuZ3RoPT09MD8xLzA6LWkubGVuZ3RoKTtyZXR1cm4gbi5ldmVyeSgodSxjKT0+RWUodSxzW2NdLHQpKSYmaS5ldmVyeSgodSxjKT0+RWUodSxhW2NdLHQpKSYmKG8ubGVuZ3RoPT09MHx8RWUob1swXSxsLHQpKX1yZXR1cm4gZS5sZW5ndGg9PT1yLmxlbmd0aCYmZS5ldmVyeSgocyxhKT0+RWUocyxyW2FdLHQpKX1yZXR1cm4gUmVmbGVjdC5vd25LZXlzKGUpLmV2ZXJ5KG49PntsZXQgaT1lW25dO3JldHVybihuIGluIHJ8fFF0KG89aSkmJm9bT2VdKCkubWF0Y2hlclR5cGU9PT1cIm9wdGlvbmFsXCIpJiZFZShpLHJbbl0sdCk7dmFyIG99KX1yZXR1cm4gT2JqZWN0LmlzKHIsZSl9LEdlPWU9Pnt2YXIgcix0LG47cmV0dXJuIGNpKGUpP1F0KGUpPyhyPSh0PShuPWVbT2VdKCkpLmdldFNlbGVjdGlvbktleXMpPT1udWxsP3ZvaWQgMDp0LmNhbGwobikpIT1udWxsP3I6W106QXJyYXkuaXNBcnJheShlKT9acihlLEdlKTpacihPYmplY3QudmFsdWVzKGUpLEdlKTpbXX0sWnI9KGUscik9PmUucmVkdWNlKCh0LG4pPT50LmNvbmNhdChyKG4pKSxbXSk7ZnVuY3Rpb24gcGUoZSl7cmV0dXJuIE9iamVjdC5hc3NpZ24oZSx7b3B0aW9uYWw6KCk9Pkt1KGUpLGFuZDpyPT5xKGUsciksb3I6cj0+WXUoZSxyKSxzZWxlY3Q6cj0+cj09PXZvaWQgMD9KbyhlKTpKbyhyLGUpfSl9ZnVuY3Rpb24gS3UoZSl7cmV0dXJuIHBlKHtbT2VdOigpPT4oe21hdGNoOnI9PntsZXQgdD17fSxuPShpLG8pPT57dFtpXT1vfTtyZXR1cm4gcj09PXZvaWQgMD8oR2UoZSkuZm9yRWFjaChpPT5uKGksdm9pZCAwKSkse21hdGNoZWQ6ITAsc2VsZWN0aW9uczp0fSk6e21hdGNoZWQ6RWUoZSxyLG4pLHNlbGVjdGlvbnM6dH19LGdldFNlbGVjdGlvbktleXM6KCk9PkdlKGUpLG1hdGNoZXJUeXBlOlwib3B0aW9uYWxcIn0pfSl9ZnVuY3Rpb24gcSguLi5lKXtyZXR1cm4gcGUoe1tPZV06KCk9Pih7bWF0Y2g6cj0+e2xldCB0PXt9LG49KGksbyk9Pnt0W2ldPW99O3JldHVybnttYXRjaGVkOmUuZXZlcnkoaT0+RWUoaSxyLG4pKSxzZWxlY3Rpb25zOnR9fSxnZXRTZWxlY3Rpb25LZXlzOigpPT5acihlLEdlKSxtYXRjaGVyVHlwZTpcImFuZFwifSl9KX1mdW5jdGlvbiBZdSguLi5lKXtyZXR1cm4gcGUoe1tPZV06KCk9Pih7bWF0Y2g6cj0+e2xldCB0PXt9LG49KGksbyk9Pnt0W2ldPW99O3JldHVybiBacihlLEdlKS5mb3JFYWNoKGk9Pm4oaSx2b2lkIDApKSx7bWF0Y2hlZDplLnNvbWUoaT0+RWUoaSxyLG4pKSxzZWxlY3Rpb25zOnR9fSxnZXRTZWxlY3Rpb25LZXlzOigpPT5acihlLEdlKSxtYXRjaGVyVHlwZTpcIm9yXCJ9KX0pfWZ1bmN0aW9uIEkoZSl7cmV0dXJue1tPZV06KCk9Pih7bWF0Y2g6cj0+KHttYXRjaGVkOiEhZShyKX0pfSl9fWZ1bmN0aW9uIEpvKC4uLmUpe2xldCByPXR5cGVvZiBlWzBdPT1cInN0cmluZ1wiP2VbMF06dm9pZCAwLHQ9ZS5sZW5ndGg9PT0yP2VbMV06dHlwZW9mIGVbMF09PVwic3RyaW5nXCI/dm9pZCAwOmVbMF07cmV0dXJuIHBlKHtbT2VdOigpPT4oe21hdGNoOm49PntsZXQgaT17W3I/P1d0XTpufTtyZXR1cm57bWF0Y2hlZDp0PT09dm9pZCAwfHxFZSh0LG4sKG8scyk9PntpW29dPXN9KSxzZWxlY3Rpb25zOml9fSxnZXRTZWxlY3Rpb25LZXlzOigpPT5bcj8/V3RdLmNvbmNhdCh0PT09dm9pZCAwP1tdOkdlKHQpKX0pfSl9ZnVuY3Rpb24geWUoZSl7cmV0dXJuIHR5cGVvZiBlPT1cIm51bWJlclwifWZ1bmN0aW9uIGplKGUpe3JldHVybiB0eXBlb2YgZT09XCJzdHJpbmdcIn1mdW5jdGlvbiBWZShlKXtyZXR1cm4gdHlwZW9mIGU9PVwiYmlnaW50XCJ9dmFyIG5nPXBlKEkoZnVuY3Rpb24oZSl7cmV0dXJuITB9KSk7dmFyIEJlPWU9Pk9iamVjdC5hc3NpZ24ocGUoZSkse3N0YXJ0c1dpdGg6cj0+e3JldHVybiBCZShxKGUsKHQ9cixJKG49PmplKG4pJiZuLnN0YXJ0c1dpdGgodCkpKSkpO3ZhciB0fSxlbmRzV2l0aDpyPT57cmV0dXJuIEJlKHEoZSwodD1yLEkobj0+amUobikmJm4uZW5kc1dpdGgodCkpKSkpO3ZhciB0fSxtaW5MZW5ndGg6cj0+QmUocShlLCh0PT5JKG49PmplKG4pJiZuLmxlbmd0aD49dCkpKHIpKSksbGVuZ3RoOnI9PkJlKHEoZSwodD0+SShuPT5qZShuKSYmbi5sZW5ndGg9PT10KSkocikpKSxtYXhMZW5ndGg6cj0+QmUocShlLCh0PT5JKG49PmplKG4pJiZuLmxlbmd0aDw9dCkpKHIpKSksaW5jbHVkZXM6cj0+e3JldHVybiBCZShxKGUsKHQ9cixJKG49PmplKG4pJiZuLmluY2x1ZGVzKHQpKSkpKTt2YXIgdH0scmVnZXg6cj0+e3JldHVybiBCZShxKGUsKHQ9cixJKG49PmplKG4pJiYhIW4ubWF0Y2godCkpKSkpO3ZhciB0fX0pLGlnPUJlKEkoamUpKSxiZT1lPT5PYmplY3QuYXNzaWduKHBlKGUpLHtiZXR3ZWVuOihyLHQpPT5iZShxKGUsKChuLGkpPT5JKG89PnllKG8pJiZuPD1vJiZpPj1vKSkocix0KSkpLGx0OnI9PmJlKHEoZSwodD0+SShuPT55ZShuKSYmbjx0KSkocikpKSxndDpyPT5iZShxKGUsKHQ9Pkkobj0+eWUobikmJm4+dCkpKHIpKSksbHRlOnI9PmJlKHEoZSwodD0+SShuPT55ZShuKSYmbjw9dCkpKHIpKSksZ3RlOnI9PmJlKHEoZSwodD0+SShuPT55ZShuKSYmbj49dCkpKHIpKSksaW50OigpPT5iZShxKGUsSShyPT55ZShyKSYmTnVtYmVyLmlzSW50ZWdlcihyKSkpKSxmaW5pdGU6KCk9PmJlKHEoZSxJKHI9PnllKHIpJiZOdW1iZXIuaXNGaW5pdGUocikpKSkscG9zaXRpdmU6KCk9PmJlKHEoZSxJKHI9PnllKHIpJiZyPjApKSksbmVnYXRpdmU6KCk9PmJlKHEoZSxJKHI9PnllKHIpJiZyPDApKSl9KSxvZz1iZShJKHllKSksVWU9ZT0+T2JqZWN0LmFzc2lnbihwZShlKSx7YmV0d2Vlbjoocix0KT0+VWUocShlLCgobixpKT0+SShvPT5WZShvKSYmbjw9byYmaT49bykpKHIsdCkpKSxsdDpyPT5VZShxKGUsKHQ9Pkkobj0+VmUobikmJm48dCkpKHIpKSksZ3Q6cj0+VWUocShlLCh0PT5JKG49PlZlKG4pJiZuPnQpKShyKSkpLGx0ZTpyPT5VZShxKGUsKHQ9Pkkobj0+VmUobikmJm48PXQpKShyKSkpLGd0ZTpyPT5VZShxKGUsKHQ9Pkkobj0+VmUobikmJm4+PXQpKShyKSkpLHBvc2l0aXZlOigpPT5VZShxKGUsSShyPT5WZShyKSYmcj4wKSkpLG5lZ2F0aXZlOigpPT5VZShxKGUsSShyPT5WZShyKSYmcjwwKSkpfSksc2c9VWUoSShWZSkpLGFnPXBlKEkoZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlPT1cImJvb2xlYW5cIn0pKSxsZz1wZShJKGZ1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZT09XCJzeW1ib2xcIn0pKSx1Zz1wZShJKGZ1bmN0aW9uKGUpe3JldHVybiBlPT1udWxsfSkpLGNnPXBlKEkoZnVuY3Rpb24oZSl7cmV0dXJuIGUhPW51bGx9KSk7dmFyIHBpPWNsYXNzIGV4dGVuZHMgRXJyb3J7Y29uc3RydWN0b3Iocil7bGV0IHQ7dHJ5e3Q9SlNPTi5zdHJpbmdpZnkocil9Y2F0Y2h7dD1yfXN1cGVyKGBQYXR0ZXJuIG1hdGNoaW5nIGVycm9yOiBubyBwYXR0ZXJuIG1hdGNoZXMgdmFsdWUgJHt0fWApLHRoaXMuaW5wdXQ9dm9pZCAwLHRoaXMuaW5wdXQ9cn19LGRpPXttYXRjaGVkOiExLHZhbHVlOnZvaWQgMH07ZnVuY3Rpb24gaHIoZSl7cmV0dXJuIG5ldyBtaShlLGRpKX12YXIgbWk9Y2xhc3MgZXtjb25zdHJ1Y3RvcihyLHQpe3RoaXMuaW5wdXQ9dm9pZCAwLHRoaXMuc3RhdGU9dm9pZCAwLHRoaXMuaW5wdXQ9cix0aGlzLnN0YXRlPXR9d2l0aCguLi5yKXtpZih0aGlzLnN0YXRlLm1hdGNoZWQpcmV0dXJuIHRoaXM7bGV0IHQ9cltyLmxlbmd0aC0xXSxuPVtyWzBdXSxpO3IubGVuZ3RoPT09MyYmdHlwZW9mIHJbMV09PVwiZnVuY3Rpb25cIj9pPXJbMV06ci5sZW5ndGg+MiYmbi5wdXNoKC4uLnIuc2xpY2UoMSxyLmxlbmd0aC0xKSk7bGV0IG89ITEscz17fSxhPSh1LGMpPT57bz0hMCxzW3VdPWN9LGw9IW4uc29tZSh1PT5FZSh1LHRoaXMuaW5wdXQsYSkpfHxpJiYhaSh0aGlzLmlucHV0KT9kaTp7bWF0Y2hlZDohMCx2YWx1ZTp0KG8/V3QgaW4gcz9zW1d0XTpzOnRoaXMuaW5wdXQsdGhpcy5pbnB1dCl9O3JldHVybiBuZXcgZSh0aGlzLmlucHV0LGwpfXdoZW4ocix0KXtpZih0aGlzLnN0YXRlLm1hdGNoZWQpcmV0dXJuIHRoaXM7bGV0IG49ISFyKHRoaXMuaW5wdXQpO3JldHVybiBuZXcgZSh0aGlzLmlucHV0LG4/e21hdGNoZWQ6ITAsdmFsdWU6dCh0aGlzLmlucHV0LHRoaXMuaW5wdXQpfTpkaSl9b3RoZXJ3aXNlKHIpe3JldHVybiB0aGlzLnN0YXRlLm1hdGNoZWQ/dGhpcy5zdGF0ZS52YWx1ZTpyKHRoaXMuaW5wdXQpfWV4aGF1c3RpdmUoKXtpZih0aGlzLnN0YXRlLm1hdGNoZWQpcmV0dXJuIHRoaXMuc3RhdGUudmFsdWU7dGhyb3cgbmV3IHBpKHRoaXMuaW5wdXQpfXJ1bigpe3JldHVybiB0aGlzLmV4aGF1c3RpdmUoKX1yZXR1cm5UeXBlKCl7cmV0dXJuIHRoaXN9fTt2YXIgem89cmVxdWlyZShcIm5vZGU6dXRpbFwiKTt2YXIgenU9e3dhcm46a2UoXCJwcmlzbWE6d2FyblwiKX0sWnU9e3dhcm46KCk9PiFwcm9jZXNzLmVudi5QUklTTUFfRElTQUJMRV9XQVJOSU5HU307ZnVuY3Rpb24gSnQoZSwuLi5yKXtadS53YXJuKCkmJmNvbnNvbGUud2FybihgJHt6dS53YXJufSAke2V9YCwuLi5yKX12YXIgWHU9KDAsem8ucHJvbWlzaWZ5KShZby5kZWZhdWx0LmV4ZWMpLGVlPWdyKFwicHJpc21hOmdldC1wbGF0Zm9ybVwiKSxlYz1bXCIxLjAueFwiLFwiMS4xLnhcIixcIjMuMC54XCJdO2FzeW5jIGZ1bmN0aW9uIFpvKCl7bGV0IGU9S3QuZGVmYXVsdC5wbGF0Zm9ybSgpLHI9cHJvY2Vzcy5hcmNoO2lmKGU9PT1cImZyZWVic2RcIil7bGV0IHM9YXdhaXQgWXQoXCJmcmVlYnNkLXZlcnNpb25cIik7aWYocyYmcy50cmltKCkubGVuZ3RoPjApe2xldCBsPS9eKFxcZCspXFwuPy8uZXhlYyhzKTtpZihsKXJldHVybntwbGF0Zm9ybTpcImZyZWVic2RcIix0YXJnZXREaXN0cm86YGZyZWVic2Qke2xbMV19YCxhcmNoOnJ9fX1pZihlIT09XCJsaW51eFwiKXJldHVybntwbGF0Zm9ybTplLGFyY2g6cn07bGV0IHQ9YXdhaXQgdGMoKSxuPWF3YWl0IGNjKCksaT1pYyh7YXJjaDpyLGFyY2hGcm9tVW5hbWU6bixmYW1pbHlEaXN0cm86dC5mYW1pbHlEaXN0cm99KSx7bGlic3NsOm99PWF3YWl0IG9jKGkpO3JldHVybntwbGF0Zm9ybTpcImxpbnV4XCIsbGlic3NsOm8sYXJjaDpyLGFyY2hGcm9tVW5hbWU6biwuLi50fX1mdW5jdGlvbiByYyhlKXtsZXQgcj0vXklEPVwiPyhbXlwiXFxuXSopXCI/JC9pbSx0PS9eSURfTElLRT1cIj8oW15cIlxcbl0qKVwiPyQvaW0sbj1yLmV4ZWMoZSksaT1uJiZuWzFdJiZuWzFdLnRvTG93ZXJDYXNlKCl8fFwiXCIsbz10LmV4ZWMoZSkscz1vJiZvWzFdJiZvWzFdLnRvTG93ZXJDYXNlKCl8fFwiXCIsYT1ocih7aWQ6aSxpZExpa2U6c30pLndpdGgoe2lkOlwiYWxwaW5lXCJ9LCh7aWQ6bH0pPT4oe3RhcmdldERpc3RybzpcIm11c2xcIixmYW1pbHlEaXN0cm86bCxvcmlnaW5hbERpc3RybzpsfSkpLndpdGgoe2lkOlwicmFzcGJpYW5cIn0sKHtpZDpsfSk9Pih7dGFyZ2V0RGlzdHJvOlwiYXJtXCIsZmFtaWx5RGlzdHJvOlwiZGViaWFuXCIsb3JpZ2luYWxEaXN0cm86bH0pKS53aXRoKHtpZDpcIm5peG9zXCJ9LCh7aWQ6bH0pPT4oe3RhcmdldERpc3RybzpcIm5peG9zXCIsb3JpZ2luYWxEaXN0cm86bCxmYW1pbHlEaXN0cm86XCJuaXhvc1wifSkpLndpdGgoe2lkOlwiZGViaWFuXCJ9LHtpZDpcInVidW50dVwifSwoe2lkOmx9KT0+KHt0YXJnZXREaXN0cm86XCJkZWJpYW5cIixmYW1pbHlEaXN0cm86XCJkZWJpYW5cIixvcmlnaW5hbERpc3RybzpsfSkpLndpdGgoe2lkOlwicmhlbFwifSx7aWQ6XCJjZW50b3NcIn0se2lkOlwiZmVkb3JhXCJ9LCh7aWQ6bH0pPT4oe3RhcmdldERpc3RybzpcInJoZWxcIixmYW1pbHlEaXN0cm86XCJyaGVsXCIsb3JpZ2luYWxEaXN0cm86bH0pKS53aGVuKCh7aWRMaWtlOmx9KT0+bC5pbmNsdWRlcyhcImRlYmlhblwiKXx8bC5pbmNsdWRlcyhcInVidW50dVwiKSwoe2lkOmx9KT0+KHt0YXJnZXREaXN0cm86XCJkZWJpYW5cIixmYW1pbHlEaXN0cm86XCJkZWJpYW5cIixvcmlnaW5hbERpc3RybzpsfSkpLndoZW4oKHtpZExpa2U6bH0pPT5pPT09XCJhcmNoXCJ8fGwuaW5jbHVkZXMoXCJhcmNoXCIpLCh7aWQ6bH0pPT4oe3RhcmdldERpc3RybzpcImRlYmlhblwiLGZhbWlseURpc3RybzpcImFyY2hcIixvcmlnaW5hbERpc3RybzpsfSkpLndoZW4oKHtpZExpa2U6bH0pPT5sLmluY2x1ZGVzKFwiY2VudG9zXCIpfHxsLmluY2x1ZGVzKFwiZmVkb3JhXCIpfHxsLmluY2x1ZGVzKFwicmhlbFwiKXx8bC5pbmNsdWRlcyhcInN1c2VcIiksKHtpZDpsfSk9Pih7dGFyZ2V0RGlzdHJvOlwicmhlbFwiLGZhbWlseURpc3RybzpcInJoZWxcIixvcmlnaW5hbERpc3RybzpsfSkpLm90aGVyd2lzZSgoe2lkOmx9KT0+KHt0YXJnZXREaXN0cm86dm9pZCAwLGZhbWlseURpc3Rybzp2b2lkIDAsb3JpZ2luYWxEaXN0cm86bH0pKTtyZXR1cm4gZWUoYEZvdW5kIGRpc3RybyBpbmZvOlxuJHtKU09OLnN0cmluZ2lmeShhLG51bGwsMil9YCksYX1hc3luYyBmdW5jdGlvbiB0Yygpe2xldCBlPVwiL2V0Yy9vcy1yZWxlYXNlXCI7dHJ5e2xldCByPWF3YWl0IGZpLmRlZmF1bHQucmVhZEZpbGUoZSx7ZW5jb2Rpbmc6XCJ1dGYtOFwifSk7cmV0dXJuIHJjKHIpfWNhdGNoe3JldHVybnt0YXJnZXREaXN0cm86dm9pZCAwLGZhbWlseURpc3Rybzp2b2lkIDAsb3JpZ2luYWxEaXN0cm86dm9pZCAwfX19ZnVuY3Rpb24gbmMoZSl7bGV0IHI9L15PcGVuU1NMXFxzKFxcZCtcXC5cXGQrKVxcLlxcZCsvLmV4ZWMoZSk7aWYocil7bGV0IHQ9YCR7clsxXX0ueGA7cmV0dXJuIFhvKHQpfX1mdW5jdGlvbiBIbyhlKXtsZXQgcj0vbGlic3NsXFwuc29cXC4oXFxkKShcXC5cXGQpPy8uZXhlYyhlKTtpZihyKXtsZXQgdD1gJHtyWzFdfSR7clsyXT8/XCIuMFwifS54YDtyZXR1cm4gWG8odCl9fWZ1bmN0aW9uIFhvKGUpe2xldCByPSgoKT0+e2lmKHJzKGUpKXJldHVybiBlO2xldCB0PWUuc3BsaXQoXCIuXCIpO3JldHVybiB0WzFdPVwiMFwiLHQuam9pbihcIi5cIil9KSgpO2lmKGVjLmluY2x1ZGVzKHIpKXJldHVybiByfWZ1bmN0aW9uIGljKGUpe3JldHVybiBocihlKS53aXRoKHtmYW1pbHlEaXN0cm86XCJtdXNsXCJ9LCgpPT4oZWUoJ1RyeWluZyBwbGF0Zm9ybS1zcGVjaWZpYyBwYXRocyBmb3IgXCJhbHBpbmVcIicpLFtcIi9saWJcIixcIi91c3IvbGliXCJdKSkud2l0aCh7ZmFtaWx5RGlzdHJvOlwiZGViaWFuXCJ9LCh7YXJjaEZyb21VbmFtZTpyfSk9PihlZSgnVHJ5aW5nIHBsYXRmb3JtLXNwZWNpZmljIHBhdGhzIGZvciBcImRlYmlhblwiIChhbmQgXCJ1YnVudHVcIiknKSxbYC91c3IvbGliLyR7cn0tbGludXgtZ251YCxgL2xpYi8ke3J9LWxpbnV4LWdudWBdKSkud2l0aCh7ZmFtaWx5RGlzdHJvOlwicmhlbFwifSwoKT0+KGVlKCdUcnlpbmcgcGxhdGZvcm0tc3BlY2lmaWMgcGF0aHMgZm9yIFwicmhlbFwiJyksW1wiL2xpYjY0XCIsXCIvdXNyL2xpYjY0XCJdKSkub3RoZXJ3aXNlKCh7ZmFtaWx5RGlzdHJvOnIsYXJjaDp0LGFyY2hGcm9tVW5hbWU6bn0pPT4oZWUoYERvbid0IGtub3cgYW55IHBsYXRmb3JtLXNwZWNpZmljIHBhdGhzIGZvciBcIiR7cn1cIiBvbiAke3R9ICgke259KWApLFtdKSl9YXN5bmMgZnVuY3Rpb24gb2MoZSl7bGV0IHI9J2dyZXAgLXYgXCJsaWJzc2wuc28uMFwiJyx0PWF3YWl0IEtvKGUpO2lmKHQpe2VlKGBGb3VuZCBsaWJzc2wuc28gZmlsZSB1c2luZyBwbGF0Zm9ybS1zcGVjaWZpYyBwYXRoczogJHt0fWApO2xldCBvPUhvKHQpO2lmKGVlKGBUaGUgcGFyc2VkIGxpYnNzbCB2ZXJzaW9uIGlzOiAke299YCksbylyZXR1cm57bGlic3NsOm8sc3RyYXRlZ3k6XCJsaWJzc2wtc3BlY2lmaWMtcGF0aFwifX1lZSgnRmFsbGluZyBiYWNrIHRvIFwibGRjb25maWdcIiBhbmQgb3RoZXIgZ2VuZXJpYyBwYXRocycpO2xldCBuPWF3YWl0IFl0KGBsZGNvbmZpZyAtcCB8IHNlZCBcInMvLio9PnMqLy9cIiB8IHNlZCBcInN8LiovfHxcIiB8IGdyZXAgbGlic3NsIHwgc29ydCB8ICR7cn1gKTtpZihufHwobj1hd2FpdCBLbyhbXCIvbGliNjRcIixcIi91c3IvbGliNjRcIixcIi9saWJcIixcIi91c3IvbGliXCJdKSksbil7ZWUoYEZvdW5kIGxpYnNzbC5zbyBmaWxlIHVzaW5nIFwibGRjb25maWdcIiBvciBvdGhlciBnZW5lcmljIHBhdGhzOiAke259YCk7bGV0IG89SG8obik7aWYoZWUoYFRoZSBwYXJzZWQgbGlic3NsIHZlcnNpb24gaXM6ICR7b31gKSxvKXJldHVybntsaWJzc2w6byxzdHJhdGVneTpcImxkY29uZmlnXCJ9fWxldCBpPWF3YWl0IFl0KFwib3BlbnNzbCB2ZXJzaW9uIC12XCIpO2lmKGkpe2VlKGBGb3VuZCBvcGVuc3NsIGJpbmFyeSB3aXRoIHZlcnNpb246ICR7aX1gKTtsZXQgbz1uYyhpKTtpZihlZShgVGhlIHBhcnNlZCBvcGVuc3NsIHZlcnNpb24gaXM6ICR7b31gKSxvKXJldHVybntsaWJzc2w6byxzdHJhdGVneTpcIm9wZW5zc2wtYmluYXJ5XCJ9fXJldHVybiBlZShcIkNvdWxkbid0IGZpbmQgYW55IHZlcnNpb24gb2YgbGlic3NsIG9yIE9wZW5TU0wgaW4gdGhlIHN5c3RlbVwiKSx7fX1hc3luYyBmdW5jdGlvbiBLbyhlKXtmb3IobGV0IHIgb2YgZSl7bGV0IHQ9YXdhaXQgc2Mocik7aWYodClyZXR1cm4gdH19YXN5bmMgZnVuY3Rpb24gc2MoZSl7dHJ5e3JldHVybihhd2FpdCBmaS5kZWZhdWx0LnJlYWRkaXIoZSkpLmZpbmQodD0+dC5zdGFydHNXaXRoKFwibGlic3NsLnNvLlwiKSYmIXQuc3RhcnRzV2l0aChcImxpYnNzbC5zby4wXCIpKX1jYXRjaChyKXtpZihyLmNvZGU9PT1cIkVOT0VOVFwiKXJldHVybjt0aHJvdyByfX1hc3luYyBmdW5jdGlvbiBpcigpe2xldHtiaW5hcnlUYXJnZXQ6ZX09YXdhaXQgZXMoKTtyZXR1cm4gZX1mdW5jdGlvbiBhYyhlKXtyZXR1cm4gZS5iaW5hcnlUYXJnZXQhPT12b2lkIDB9YXN5bmMgZnVuY3Rpb24gZ2koKXtsZXR7bWVtb2l6ZWQ6ZSwuLi5yfT1hd2FpdCBlcygpO3JldHVybiByfXZhciBIdD17fTthc3luYyBmdW5jdGlvbiBlcygpe2lmKGFjKEh0KSlyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHsuLi5IdCxtZW1vaXplZDohMH0pO2xldCBlPWF3YWl0IFpvKCkscj1sYyhlKTtyZXR1cm4gSHQ9ey4uLmUsYmluYXJ5VGFyZ2V0OnJ9LHsuLi5IdCxtZW1vaXplZDohMX19ZnVuY3Rpb24gbGMoZSl7bGV0e3BsYXRmb3JtOnIsYXJjaDp0LGFyY2hGcm9tVW5hbWU6bixsaWJzc2w6aSx0YXJnZXREaXN0cm86byxmYW1pbHlEaXN0cm86cyxvcmlnaW5hbERpc3RybzphfT1lO3I9PT1cImxpbnV4XCImJiFbXCJ4NjRcIixcImFybTY0XCJdLmluY2x1ZGVzKHQpJiZKdChgUHJpc21hIG9ubHkgb2ZmaWNpYWxseSBzdXBwb3J0cyBMaW51eCBvbiBhbWQ2NCAoeDg2XzY0KSBhbmQgYXJtNjQgKGFhcmNoNjQpIHN5c3RlbSBhcmNoaXRlY3R1cmVzIChkZXRlY3RlZCBcIiR7dH1cIiBpbnN0ZWFkKS4gSWYgeW91IGFyZSB1c2luZyB5b3VyIG93biBjdXN0b20gUHJpc21hIGVuZ2luZXMsIHlvdSBjYW4gaWdub3JlIHRoaXMgd2FybmluZywgYXMgbG9uZyBhcyB5b3UndmUgY29tcGlsZWQgdGhlIGVuZ2luZXMgZm9yIHlvdXIgc3lzdGVtIGFyY2hpdGVjdHVyZSBcIiR7bn1cIi5gKTtsZXQgbD1cIjEuMS54XCI7aWYocj09PVwibGludXhcIiYmaT09PXZvaWQgMCl7bGV0IGM9aHIoe2ZhbWlseURpc3RybzpzfSkud2l0aCh7ZmFtaWx5RGlzdHJvOlwiZGViaWFuXCJ9LCgpPT5cIlBsZWFzZSBtYW51YWxseSBpbnN0YWxsIE9wZW5TU0wgdmlhIGBhcHQtZ2V0IHVwZGF0ZSAteSAmJiBhcHQtZ2V0IGluc3RhbGwgLXkgb3BlbnNzbGAgYW5kIHRyeSBpbnN0YWxsaW5nIFByaXNtYSBhZ2Fpbi4gSWYgeW91J3JlIHJ1bm5pbmcgUHJpc21hIG9uIERvY2tlciwgYWRkIHRoaXMgY29tbWFuZCB0byB5b3VyIERvY2tlcmZpbGUsIG9yIHN3aXRjaCB0byBhbiBpbWFnZSB0aGF0IGFscmVhZHkgaGFzIE9wZW5TU0wgaW5zdGFsbGVkLlwiKS5vdGhlcndpc2UoKCk9PlwiUGxlYXNlIG1hbnVhbGx5IGluc3RhbGwgT3BlblNTTCBhbmQgdHJ5IGluc3RhbGxpbmcgUHJpc21hIGFnYWluLlwiKTtKdChgUHJpc21hIGZhaWxlZCB0byBkZXRlY3QgdGhlIGxpYnNzbC9vcGVuc3NsIHZlcnNpb24gdG8gdXNlLCBhbmQgbWF5IG5vdCB3b3JrIGFzIGV4cGVjdGVkLiBEZWZhdWx0aW5nIHRvIFwib3BlbnNzbC0ke2x9XCIuXG4ke2N9YCl9bGV0IHU9XCJkZWJpYW5cIjtpZihyPT09XCJsaW51eFwiJiZvPT09dm9pZCAwJiZlZShgRGlzdHJvIGlzIFwiJHthfVwiLiBGYWxsaW5nIGJhY2sgdG8gUHJpc21hIGVuZ2luZXMgYnVpbHQgZm9yIFwiJHt1fVwiLmApLHI9PT1cImRhcndpblwiJiZ0PT09XCJhcm02NFwiKXJldHVyblwiZGFyd2luLWFybTY0XCI7aWYocj09PVwiZGFyd2luXCIpcmV0dXJuXCJkYXJ3aW5cIjtpZihyPT09XCJ3aW4zMlwiKXJldHVyblwid2luZG93c1wiO2lmKHI9PT1cImZyZWVic2RcIilyZXR1cm4gbztpZihyPT09XCJvcGVuYnNkXCIpcmV0dXJuXCJvcGVuYnNkXCI7aWYocj09PVwibmV0YnNkXCIpcmV0dXJuXCJuZXRic2RcIjtpZihyPT09XCJsaW51eFwiJiZvPT09XCJuaXhvc1wiKXJldHVyblwibGludXgtbml4b3NcIjtpZihyPT09XCJsaW51eFwiJiZ0PT09XCJhcm02NFwiKXJldHVybmAke289PT1cIm11c2xcIj9cImxpbnV4LW11c2wtYXJtNjRcIjpcImxpbnV4LWFybTY0XCJ9LW9wZW5zc2wtJHtpfHxsfWA7aWYocj09PVwibGludXhcIiYmdD09PVwiYXJtXCIpcmV0dXJuYGxpbnV4LWFybS1vcGVuc3NsLSR7aXx8bH1gO2lmKHI9PT1cImxpbnV4XCImJm89PT1cIm11c2xcIil7bGV0IGM9XCJsaW51eC1tdXNsXCI7cmV0dXJuIWl8fHJzKGkpP2M6YCR7Y30tb3BlbnNzbC0ke2l9YH1yZXR1cm4gcj09PVwibGludXhcIiYmbyYmaT9gJHtvfS1vcGVuc3NsLSR7aX1gOihyIT09XCJsaW51eFwiJiZKdChgUHJpc21hIGRldGVjdGVkIHVua25vd24gT1MgXCIke3J9XCIgYW5kIG1heSBub3Qgd29yayBhcyBleHBlY3RlZC4gRGVmYXVsdGluZyB0byBcImxpbnV4XCIuYCksaT9gJHt1fS1vcGVuc3NsLSR7aX1gOm8/YCR7b30tb3BlbnNzbC0ke2x9YDpgJHt1fS1vcGVuc3NsLSR7bH1gKX1hc3luYyBmdW5jdGlvbiB1YyhlKXt0cnl7cmV0dXJuIGF3YWl0IGUoKX1jYXRjaHtyZXR1cm59fWZ1bmN0aW9uIFl0KGUpe3JldHVybiB1Yyhhc3luYygpPT57bGV0IHI9YXdhaXQgWHUoZSk7cmV0dXJuIGVlKGBDb21tYW5kIFwiJHtlfVwiIHN1Y2Nlc3NmdWxseSByZXR1cm5lZCBcIiR7ci5zdGRvdXR9XCJgKSxyLnN0ZG91dH0pfWFzeW5jIGZ1bmN0aW9uIGNjKCl7cmV0dXJuIHR5cGVvZiBLdC5kZWZhdWx0Lm1hY2hpbmU9PVwiZnVuY3Rpb25cIj9LdC5kZWZhdWx0Lm1hY2hpbmUoKTooYXdhaXQgWXQoXCJ1bmFtZSAtbVwiKSk/LnRyaW0oKX1mdW5jdGlvbiBycyhlKXtyZXR1cm4gZS5zdGFydHNXaXRoKFwiMS5cIil9dmFyIFh0PXt9O3RyKFh0LHtiZWVwOigpPT5GYyxjbGVhclNjcmVlbjooKT0+T2MsY2xlYXJUZXJtaW5hbDooKT0+X2MsY3Vyc29yQmFja3dhcmQ6KCk9PnljLGN1cnNvckRvd246KCk9PmdjLGN1cnNvckZvcndhcmQ6KCk9PmhjLGN1cnNvckdldFBvc2l0aW9uOigpPT53YyxjdXJzb3JIaWRlOigpPT5QYyxjdXJzb3JMZWZ0OigpPT5pcyxjdXJzb3JNb3ZlOigpPT5mYyxjdXJzb3JOZXh0TGluZTooKT0+eGMsY3Vyc29yUHJldkxpbmU6KCk9PnZjLGN1cnNvclJlc3RvcmVQb3NpdGlvbjooKT0+RWMsY3Vyc29yU2F2ZVBvc2l0aW9uOigpPT5iYyxjdXJzb3JTaG93OigpPT5UYyxjdXJzb3JUbzooKT0+bWMsY3Vyc29yVXA6KCk9Pm5zLGVudGVyQWx0ZXJuYXRpdmVTY3JlZW46KCk9Pk5jLGVyYXNlRG93bjooKT0+Q2MsZXJhc2VFbmRMaW5lOigpPT5SYyxlcmFzZUxpbmU6KCk9Pm9zLGVyYXNlTGluZXM6KCk9PlNjLGVyYXNlU2NyZWVuOigpPT5oaSxlcmFzZVN0YXJ0TGluZTooKT0+QWMsZXJhc2VVcDooKT0+SWMsZXhpdEFsdGVybmF0aXZlU2NyZWVuOigpPT5MYyxpVGVybTooKT0+cWMsaW1hZ2U6KCk9PiRjLGxpbms6KCk9Pk1jLHNjcm9sbERvd246KCk9PkRjLHNjcm9sbFVwOigpPT5rY30pO3ZhciBadD1DKHJlcXVpcmUoXCJub2RlOnByb2Nlc3NcIiksMSk7dmFyIHp0PWdsb2JhbFRoaXMud2luZG93Py5kb2N1bWVudCE9PXZvaWQgMCxiZz1nbG9iYWxUaGlzLnByb2Nlc3M/LnZlcnNpb25zPy5ub2RlIT09dm9pZCAwLEVnPWdsb2JhbFRoaXMucHJvY2Vzcz8udmVyc2lvbnM/LmJ1biE9PXZvaWQgMCx3Zz1nbG9iYWxUaGlzLkRlbm8/LnZlcnNpb24/LmRlbm8hPT12b2lkIDAseGc9Z2xvYmFsVGhpcy5wcm9jZXNzPy52ZXJzaW9ucz8uZWxlY3Ryb24hPT12b2lkIDAsdmc9Z2xvYmFsVGhpcy5uYXZpZ2F0b3I/LnVzZXJBZ2VudD8uaW5jbHVkZXMoXCJqc2RvbVwiKT09PSEwLFBnPXR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZTxcInVcIiYmZ2xvYmFsVGhpcyBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlLFRnPXR5cGVvZiBEZWRpY2F0ZWRXb3JrZXJHbG9iYWxTY29wZTxcInVcIiYmZ2xvYmFsVGhpcyBpbnN0YW5jZW9mIERlZGljYXRlZFdvcmtlckdsb2JhbFNjb3BlLFNnPXR5cGVvZiBTaGFyZWRXb3JrZXJHbG9iYWxTY29wZTxcInVcIiYmZ2xvYmFsVGhpcyBpbnN0YW5jZW9mIFNoYXJlZFdvcmtlckdsb2JhbFNjb3BlLFJnPXR5cGVvZiBTZXJ2aWNlV29ya2VyR2xvYmFsU2NvcGU8XCJ1XCImJmdsb2JhbFRoaXMgaW5zdGFuY2VvZiBTZXJ2aWNlV29ya2VyR2xvYmFsU2NvcGUsWHI9Z2xvYmFsVGhpcy5uYXZpZ2F0b3I/LnVzZXJBZ2VudERhdGE/LnBsYXRmb3JtLEFnPVhyPT09XCJtYWNPU1wifHxnbG9iYWxUaGlzLm5hdmlnYXRvcj8ucGxhdGZvcm09PT1cIk1hY0ludGVsXCJ8fGdsb2JhbFRoaXMubmF2aWdhdG9yPy51c2VyQWdlbnQ/LmluY2x1ZGVzKFwiIE1hYyBcIik9PT0hMHx8Z2xvYmFsVGhpcy5wcm9jZXNzPy5wbGF0Zm9ybT09PVwiZGFyd2luXCIsQ2c9WHI9PT1cIldpbmRvd3NcInx8Z2xvYmFsVGhpcy5uYXZpZ2F0b3I/LnBsYXRmb3JtPT09XCJXaW4zMlwifHxnbG9iYWxUaGlzLnByb2Nlc3M/LnBsYXRmb3JtPT09XCJ3aW4zMlwiLElnPVhyPT09XCJMaW51eFwifHxnbG9iYWxUaGlzLm5hdmlnYXRvcj8ucGxhdGZvcm0/LnN0YXJ0c1dpdGgoXCJMaW51eFwiKT09PSEwfHxnbG9iYWxUaGlzLm5hdmlnYXRvcj8udXNlckFnZW50Py5pbmNsdWRlcyhcIiBMaW51eCBcIik9PT0hMHx8Z2xvYmFsVGhpcy5wcm9jZXNzPy5wbGF0Zm9ybT09PVwibGludXhcIixrZz1Ycj09PVwiaU9TXCJ8fGdsb2JhbFRoaXMubmF2aWdhdG9yPy5wbGF0Zm9ybT09PVwiTWFjSW50ZWxcIiYmZ2xvYmFsVGhpcy5uYXZpZ2F0b3I/Lm1heFRvdWNoUG9pbnRzPjF8fC9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KGdsb2JhbFRoaXMubmF2aWdhdG9yPy5wbGF0Zm9ybSksRGc9WHI9PT1cIkFuZHJvaWRcInx8Z2xvYmFsVGhpcy5uYXZpZ2F0b3I/LnBsYXRmb3JtPT09XCJBbmRyb2lkXCJ8fGdsb2JhbFRoaXMubmF2aWdhdG9yPy51c2VyQWdlbnQ/LmluY2x1ZGVzKFwiIEFuZHJvaWQgXCIpPT09ITB8fGdsb2JhbFRoaXMucHJvY2Vzcz8ucGxhdGZvcm09PT1cImFuZHJvaWRcIjt2YXIgaz1cIlxceDFCW1wiLHJ0PVwiXFx4MUJdXCIseXI9XCJcXHgwN1wiLGV0PVwiO1wiLHRzPSF6dCYmWnQuZGVmYXVsdC5lbnYuVEVSTV9QUk9HUkFNPT09XCJBcHBsZV9UZXJtaW5hbFwiLHBjPSF6dCYmWnQuZGVmYXVsdC5wbGF0Zm9ybT09PVwid2luMzJcIixkYz16dD8oKT0+e3Rocm93IG5ldyBFcnJvcihcImBwcm9jZXNzLmN3ZCgpYCBvbmx5IHdvcmtzIGluIE5vZGUuanMsIG5vdCB0aGUgYnJvd3Nlci5cIil9Olp0LmRlZmF1bHQuY3dkLG1jPShlLHIpPT57aWYodHlwZW9mIGUhPVwibnVtYmVyXCIpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSBgeGAgYXJndW1lbnQgaXMgcmVxdWlyZWRcIik7cmV0dXJuIHR5cGVvZiByIT1cIm51bWJlclwiP2srKGUrMSkrXCJHXCI6aysocisxKStldCsoZSsxKStcIkhcIn0sZmM9KGUscik9PntpZih0eXBlb2YgZSE9XCJudW1iZXJcIil0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlIGB4YCBhcmd1bWVudCBpcyByZXF1aXJlZFwiKTtsZXQgdD1cIlwiO3JldHVybiBlPDA/dCs9aystZStcIkRcIjplPjAmJih0Kz1rK2UrXCJDXCIpLHI8MD90Kz1rKy1yK1wiQVwiOnI+MCYmKHQrPWsrcitcIkJcIiksdH0sbnM9KGU9MSk9PmsrZStcIkFcIixnYz0oZT0xKT0+aytlK1wiQlwiLGhjPShlPTEpPT5rK2UrXCJDXCIseWM9KGU9MSk9PmsrZStcIkRcIixpcz1rK1wiR1wiLGJjPXRzP1wiXFx4MUI3XCI6aytcInNcIixFYz10cz9cIlxceDFCOFwiOmsrXCJ1XCIsd2M9aytcIjZuXCIseGM9aytcIkVcIix2Yz1rK1wiRlwiLFBjPWsrXCI/MjVsXCIsVGM9aytcIj8yNWhcIixTYz1lPT57bGV0IHI9XCJcIjtmb3IobGV0IHQ9MDt0PGU7dCsrKXIrPW9zKyh0PGUtMT9ucygpOlwiXCIpO3JldHVybiBlJiYocis9aXMpLHJ9LFJjPWsrXCJLXCIsQWM9aytcIjFLXCIsb3M9aytcIjJLXCIsQ2M9aytcIkpcIixJYz1rK1wiMUpcIixoaT1rK1wiMkpcIixrYz1rK1wiU1wiLERjPWsrXCJUXCIsT2M9XCJcXHgxQmNcIixfYz1wYz9gJHtoaX0ke2t9MGZgOmAke2hpfSR7a30zSiR7a31IYCxOYz1rK1wiPzEwNDloXCIsTGM9aytcIj8xMDQ5bFwiLEZjPXlyLE1jPShlLHIpPT5bcnQsXCI4XCIsZXQsZXQscix5cixlLHJ0LFwiOFwiLGV0LGV0LHlyXS5qb2luKFwiXCIpLCRjPShlLHI9e30pPT57bGV0IHQ9YCR7cnR9MTMzNztGaWxlPWlubGluZT0xYDtyZXR1cm4gci53aWR0aCYmKHQrPWA7d2lkdGg9JHtyLndpZHRofWApLHIuaGVpZ2h0JiYodCs9YDtoZWlnaHQ9JHtyLmhlaWdodH1gKSxyLnByZXNlcnZlQXNwZWN0UmF0aW89PT0hMSYmKHQrPVwiO3ByZXNlcnZlQXNwZWN0UmF0aW89MFwiKSx0K1wiOlwiK0J1ZmZlci5mcm9tKGUpLnRvU3RyaW5nKFwiYmFzZTY0XCIpK3lyfSxxYz17c2V0Q3dkOihlPWRjKCkpPT5gJHtydH01MDtDdXJyZW50RGlyPSR7ZX0ke3lyfWAsYW5ub3RhdGlvbihlLHI9e30pe2xldCB0PWAke3J0fTEzMzc7YCxuPXIueCE9PXZvaWQgMCxpPXIueSE9PXZvaWQgMDtpZigobnx8aSkmJiEobiYmaSYmci5sZW5ndGghPT12b2lkIDApKXRocm93IG5ldyBFcnJvcihcImB4YCwgYHlgIGFuZCBgbGVuZ3RoYCBtdXN0IGJlIGRlZmluZWQgd2hlbiBgeGAgb3IgYHlgIGlzIGRlZmluZWRcIik7cmV0dXJuIGU9ZS5yZXBsYWNlQWxsKFwifFwiLFwiXCIpLHQrPXIuaXNIaWRkZW4/XCJBZGRIaWRkZW5Bbm5vdGF0aW9uPVwiOlwiQWRkQW5ub3RhdGlvbj1cIixyLmxlbmd0aD4wP3QrPShuP1tlLHIubGVuZ3RoLHIueCxyLnldOltyLmxlbmd0aCxlXSkuam9pbihcInxcIik6dCs9ZSx0K3lyfX07dmFyIGVuPUMoZHMoKSwxKTtmdW5jdGlvbiBvcihlLHIse3RhcmdldDp0PVwic3Rkb3V0XCIsLi4ubn09e30pe3JldHVybiBlbi5kZWZhdWx0W3RdP1h0LmxpbmsoZSxyKTpuLmZhbGxiYWNrPT09ITE/ZTp0eXBlb2Ygbi5mYWxsYmFjaz09XCJmdW5jdGlvblwiP24uZmFsbGJhY2soZSxyKTpgJHtlfSAoXFx1MjAwQiR7cn1cXHUyMDBCKWB9b3IuaXNTdXBwb3J0ZWQ9ZW4uZGVmYXVsdC5zdGRvdXQ7b3Iuc3RkZXJyPShlLHIsdD17fSk9Pm9yKGUscix7dGFyZ2V0Olwic3RkZXJyXCIsLi4udH0pO29yLnN0ZGVyci5pc1N1cHBvcnRlZD1lbi5kZWZhdWx0LnN0ZGVycjtmdW5jdGlvbiB4aShlKXtyZXR1cm4gb3IoZSxlLHtmYWxsYmFjazpZfSl9dmFyIEdjPW1zKCksdmk9R2MudmVyc2lvbjtmdW5jdGlvbiBFcihlKXtsZXQgcj1RYygpO3JldHVybiByfHwoZT8uY29uZmlnLmVuZ2luZVR5cGU9PT1cImxpYnJhcnlcIj9cImxpYnJhcnlcIjplPy5jb25maWcuZW5naW5lVHlwZT09PVwiYmluYXJ5XCI/XCJiaW5hcnlcIjplPy5jb25maWcuZW5naW5lVHlwZT09PVwiY2xpZW50XCI/XCJjbGllbnRcIjpXYyhlKSl9ZnVuY3Rpb24gUWMoKXtsZXQgZT1wcm9jZXNzLmVudi5QUklTTUFfQ0xJRU5UX0VOR0lORV9UWVBFO3JldHVybiBlPT09XCJsaWJyYXJ5XCI/XCJsaWJyYXJ5XCI6ZT09PVwiYmluYXJ5XCI/XCJiaW5hcnlcIjplPT09XCJjbGllbnRcIj9cImNsaWVudFwiOnZvaWQgMH1mdW5jdGlvbiBXYyhlKXtyZXR1cm4gZT8ucHJldmlld0ZlYXR1cmVzLmluY2x1ZGVzKFwicXVlcnlDb21waWxlclwiKT9cImNsaWVudFwiOlwibGlicmFyeVwifWZ1bmN0aW9uIFBpKGUpe3JldHVybiBlLm5hbWU9PT1cIkRyaXZlckFkYXB0ZXJFcnJvclwiJiZ0eXBlb2YgZS5jYXVzZT09XCJvYmplY3RcIn1mdW5jdGlvbiBybihlKXtyZXR1cm57b2s6ITAsdmFsdWU6ZSxtYXAocil7cmV0dXJuIHJuKHIoZSkpfSxmbGF0TWFwKHIpe3JldHVybiByKGUpfX19ZnVuY3Rpb24gc3IoZSl7cmV0dXJue29rOiExLGVycm9yOmUsbWFwKCl7cmV0dXJuIHNyKGUpfSxmbGF0TWFwKCl7cmV0dXJuIHNyKGUpfX19dmFyIGZzPU4oXCJkcml2ZXItYWRhcHRlci11dGlsc1wiKSxUaT1jbGFzc3tyZWdpc3RlcmVkRXJyb3JzPVtdO2NvbnN1bWVFcnJvcihyKXtyZXR1cm4gdGhpcy5yZWdpc3RlcmVkRXJyb3JzW3JdfXJlZ2lzdGVyTmV3RXJyb3Iocil7bGV0IHQ9MDtmb3IoO3RoaXMucmVnaXN0ZXJlZEVycm9yc1t0XSE9PXZvaWQgMDspdCsrO3JldHVybiB0aGlzLnJlZ2lzdGVyZWRFcnJvcnNbdF09e2Vycm9yOnJ9LHR9fTt2YXIgdG49KGUscj1uZXcgVGkpPT57bGV0IHQ9e2FkYXB0ZXJOYW1lOmUuYWRhcHRlck5hbWUsZXJyb3JSZWdpc3RyeTpyLHF1ZXJ5UmF3Ol9lKHIsZS5xdWVyeVJhdy5iaW5kKGUpKSxleGVjdXRlUmF3Ol9lKHIsZS5leGVjdXRlUmF3LmJpbmQoZSkpLGV4ZWN1dGVTY3JpcHQ6X2UocixlLmV4ZWN1dGVTY3JpcHQuYmluZChlKSksZGlzcG9zZTpfZShyLGUuZGlzcG9zZS5iaW5kKGUpKSxwcm92aWRlcjplLnByb3ZpZGVyLHN0YXJ0VHJhbnNhY3Rpb246YXN5bmMoLi4ubik9Pihhd2FpdCBfZShyLGUuc3RhcnRUcmFuc2FjdGlvbi5iaW5kKGUpKSguLi5uKSkubWFwKG89PkpjKHIsbykpfTtyZXR1cm4gZS5nZXRDb25uZWN0aW9uSW5mbyYmKHQuZ2V0Q29ubmVjdGlvbkluZm89SGMocixlLmdldENvbm5lY3Rpb25JbmZvLmJpbmQoZSkpKSx0fSxKYz0oZSxyKT0+KHthZGFwdGVyTmFtZTpyLmFkYXB0ZXJOYW1lLHByb3ZpZGVyOnIucHJvdmlkZXIsb3B0aW9uczpyLm9wdGlvbnMscXVlcnlSYXc6X2UoZSxyLnF1ZXJ5UmF3LmJpbmQocikpLGV4ZWN1dGVSYXc6X2UoZSxyLmV4ZWN1dGVSYXcuYmluZChyKSksY29tbWl0Ol9lKGUsci5jb21taXQuYmluZChyKSkscm9sbGJhY2s6X2UoZSxyLnJvbGxiYWNrLmJpbmQocikpfSk7ZnVuY3Rpb24gX2UoZSxyKXtyZXR1cm4gYXN5bmMoLi4udCk9Pnt0cnl7cmV0dXJuIHJuKGF3YWl0IHIoLi4udCkpfWNhdGNoKG4pe2lmKGZzKFwiW2Vycm9yQHdyYXBBc3luY11cIixuKSxQaShuKSlyZXR1cm4gc3Iobi5jYXVzZSk7bGV0IGk9ZS5yZWdpc3Rlck5ld0Vycm9yKG4pO3JldHVybiBzcih7a2luZDpcIkdlbmVyaWNKc1wiLGlkOml9KX19fWZ1bmN0aW9uIEhjKGUscil7cmV0dXJuKC4uLnQpPT57dHJ5e3JldHVybiBybihyKC4uLnQpKX1jYXRjaChuKXtpZihmcyhcIltlcnJvckB3cmFwU3luY11cIixuKSxQaShuKSlyZXR1cm4gc3Iobi5jYXVzZSk7bGV0IGk9ZS5yZWdpc3Rlck5ld0Vycm9yKG4pO3JldHVybiBzcih7a2luZDpcIkdlbmVyaWNKc1wiLGlkOml9KX19fXZhciBZYz1DKG9uKCkpO3ZhciBNPUMocmVxdWlyZShcIm5vZGU6cGF0aFwiKSksemM9QyhvbigpKSxQaD1OKFwicHJpc21hOmVuZ2luZXNcIik7ZnVuY3Rpb24gZ3MoKXtyZXR1cm4gTS5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vXCIpfXZhciBUaD1cImxpYnF1ZXJ5LWVuZ2luZVwiO00uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL3F1ZXJ5LWVuZ2luZS1kYXJ3aW5cIik7TS5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vcXVlcnktZW5naW5lLWRhcndpbi1hcm02NFwiKTtNLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9xdWVyeS1lbmdpbmUtZGViaWFuLW9wZW5zc2wtMS4wLnhcIik7TS5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vcXVlcnktZW5naW5lLWRlYmlhbi1vcGVuc3NsLTEuMS54XCIpO00uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL3F1ZXJ5LWVuZ2luZS1kZWJpYW4tb3BlbnNzbC0zLjAueFwiKTtNLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9xdWVyeS1lbmdpbmUtbGludXgtc3RhdGljLXg2NFwiKTtNLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9xdWVyeS1lbmdpbmUtbGludXgtc3RhdGljLWFybTY0XCIpO00uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL3F1ZXJ5LWVuZ2luZS1yaGVsLW9wZW5zc2wtMS4wLnhcIik7TS5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vcXVlcnktZW5naW5lLXJoZWwtb3BlbnNzbC0xLjEueFwiKTtNLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9xdWVyeS1lbmdpbmUtcmhlbC1vcGVuc3NsLTMuMC54XCIpO00uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL2xpYnF1ZXJ5X2VuZ2luZS1kYXJ3aW4uZHlsaWIubm9kZVwiKTtNLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9saWJxdWVyeV9lbmdpbmUtZGFyd2luLWFybTY0LmR5bGliLm5vZGVcIik7TS5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vbGlicXVlcnlfZW5naW5lLWRlYmlhbi1vcGVuc3NsLTEuMC54LnNvLm5vZGVcIik7TS5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vbGlicXVlcnlfZW5naW5lLWRlYmlhbi1vcGVuc3NsLTEuMS54LnNvLm5vZGVcIik7TS5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vbGlicXVlcnlfZW5naW5lLWRlYmlhbi1vcGVuc3NsLTMuMC54LnNvLm5vZGVcIik7TS5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vbGlicXVlcnlfZW5naW5lLWxpbnV4LWFybTY0LW9wZW5zc2wtMS4wLnguc28ubm9kZVwiKTtNLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9saWJxdWVyeV9lbmdpbmUtbGludXgtYXJtNjQtb3BlbnNzbC0xLjEueC5zby5ub2RlXCIpO00uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL2xpYnF1ZXJ5X2VuZ2luZS1saW51eC1hcm02NC1vcGVuc3NsLTMuMC54LnNvLm5vZGVcIik7TS5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vbGlicXVlcnlfZW5naW5lLWxpbnV4LW11c2wuc28ubm9kZVwiKTtNLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9saWJxdWVyeV9lbmdpbmUtbGludXgtbXVzbC1vcGVuc3NsLTMuMC54LnNvLm5vZGVcIik7TS5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vbGlicXVlcnlfZW5naW5lLXJoZWwtb3BlbnNzbC0xLjAueC5zby5ub2RlXCIpO00uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL2xpYnF1ZXJ5X2VuZ2luZS1yaGVsLW9wZW5zc2wtMS4xLnguc28ubm9kZVwiKTtNLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9saWJxdWVyeV9lbmdpbmUtcmhlbC1vcGVuc3NsLTMuMC54LnNvLm5vZGVcIik7TS5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vcXVlcnlfZW5naW5lLXdpbmRvd3MuZGxsLm5vZGVcIik7dmFyIFJpPUMocmVxdWlyZShcIm5vZGU6ZnNcIikpLGhzPWdyKFwiY2htb2RQbHVzWFwiKTtmdW5jdGlvbiBBaShlKXtpZihwcm9jZXNzLnBsYXRmb3JtPT09XCJ3aW4zMlwiKXJldHVybjtsZXQgcj1SaS5kZWZhdWx0LnN0YXRTeW5jKGUpLHQ9ci5tb2RlfDY0fDh8MTtpZihyLm1vZGU9PT10KXtocyhgRXhlY3V0aW9uIHBlcm1pc3Npb25zIG9mICR7ZX0gYXJlIGZpbmVgKTtyZXR1cm59bGV0IG49dC50b1N0cmluZyg4KS5zbGljZSgtMyk7aHMoYEhhdmUgdG8gY2FsbCBjaG1vZFBsdXNYIG9uICR7ZX1gKSxSaS5kZWZhdWx0LmNobW9kU3luYyhlLG4pfWZ1bmN0aW9uIENpKGUpe2xldCByPWUuZSx0PWE9PmBQcmlzbWEgY2Fubm90IGZpbmQgdGhlIHJlcXVpcmVkIFxcYCR7YX1cXGAgc3lzdGVtIGxpYnJhcnkgaW4geW91ciBzeXN0ZW1gLG49ci5tZXNzYWdlLmluY2x1ZGVzKFwiY2Fubm90IG9wZW4gc2hhcmVkIG9iamVjdCBmaWxlXCIpLGk9YFBsZWFzZSByZWZlciB0byB0aGUgZG9jdW1lbnRhdGlvbiBhYm91dCBQcmlzbWEncyBzeXN0ZW0gcmVxdWlyZW1lbnRzOiAke3hpKFwiaHR0cHM6Ly9wcmlzLmx5L2Qvc3lzdGVtLXJlcXVpcmVtZW50c1wiKX1gLG89YFVuYWJsZSB0byByZXF1aXJlKFxcYCR7SWUoZS5pZCl9XFxgKS5gLHM9aHIoe21lc3NhZ2U6ci5tZXNzYWdlLGNvZGU6ci5jb2RlfSkud2l0aCh7Y29kZTpcIkVOT0VOVFwifSwoKT0+XCJGaWxlIGRvZXMgbm90IGV4aXN0LlwiKS53aGVuKCh7bWVzc2FnZTphfSk9Pm4mJmEuaW5jbHVkZXMoXCJsaWJ6XCIpLCgpPT5gJHt0KFwibGlielwiKX0uIFBsZWFzZSBpbnN0YWxsIGl0IGFuZCB0cnkgYWdhaW4uYCkud2hlbigoe21lc3NhZ2U6YX0pPT5uJiZhLmluY2x1ZGVzKFwibGliZ2NjX3NcIiksKCk9PmAke3QoXCJsaWJnY2Nfc1wiKX0uIFBsZWFzZSBpbnN0YWxsIGl0IGFuZCB0cnkgYWdhaW4uYCkud2hlbigoe21lc3NhZ2U6YX0pPT5uJiZhLmluY2x1ZGVzKFwibGlic3NsXCIpLCgpPT57bGV0IGE9ZS5wbGF0Zm9ybUluZm8ubGlic3NsP2BvcGVuc3NsLSR7ZS5wbGF0Zm9ybUluZm8ubGlic3NsfWA6XCJvcGVuc3NsXCI7cmV0dXJuYCR7dChcImxpYnNzbFwiKX0uIFBsZWFzZSBpbnN0YWxsICR7YX0gYW5kIHRyeSBhZ2Fpbi5gfSkud2hlbigoe21lc3NhZ2U6YX0pPT5hLmluY2x1ZGVzKFwiR0xJQkNcIiksKCk9PmBQcmlzbWEgaGFzIGRldGVjdGVkIGFuIGluY29tcGF0aWJsZSB2ZXJzaW9uIG9mIHRoZSBcXGBnbGliY1xcYCBDIHN0YW5kYXJkIGxpYnJhcnkgaW5zdGFsbGVkIGluIHlvdXIgc3lzdGVtLiBUaGlzIHByb2JhYmx5IG1lYW5zIHlvdXIgc3lzdGVtIG1heSBiZSB0b28gb2xkIHRvIHJ1biBQcmlzbWEuICR7aX1gKS53aGVuKCh7bWVzc2FnZTphfSk9PmUucGxhdGZvcm1JbmZvLnBsYXRmb3JtPT09XCJsaW51eFwiJiZhLmluY2x1ZGVzKFwic3ltYm9sIG5vdCBmb3VuZFwiKSwoKT0+YFRoZSBQcmlzbWEgZW5naW5lcyBhcmUgbm90IGNvbXBhdGlibGUgd2l0aCB5b3VyIHN5c3RlbSAke2UucGxhdGZvcm1JbmZvLm9yaWdpbmFsRGlzdHJvfSBvbiAoJHtlLnBsYXRmb3JtSW5mby5hcmNoRnJvbVVuYW1lfSkgd2hpY2ggdXNlcyB0aGUgXFxgJHtlLnBsYXRmb3JtSW5mby5iaW5hcnlUYXJnZXR9XFxgIGJpbmFyeVRhcmdldCBieSBkZWZhdWx0LiAke2l9YCkub3RoZXJ3aXNlKCgpPT5gVGhlIFByaXNtYSBlbmdpbmVzIGRvIG5vdCBzZWVtIHRvIGJlIGNvbXBhdGlibGUgd2l0aCB5b3VyIHN5c3RlbS4gJHtpfWApO3JldHVybmAke299XG4ke3N9XG5cbkRldGFpbHM6ICR7ci5tZXNzYWdlfWB9dmFyIEVzPUMoYnMoKSwxKTtmdW5jdGlvbiBJaShlKXtsZXQgcj0oMCxFcy5kZWZhdWx0KShlKTtpZihyPT09MClyZXR1cm4gZTtsZXQgdD1uZXcgUmVnRXhwKGBeWyBcXFxcdF17JHtyfX1gLFwiZ21cIik7cmV0dXJuIGUucmVwbGFjZSh0LFwiXCIpfXZhciB3cz1cInByaXNtYStwb3N0Z3Jlc1wiLHNuPWAke3dzfTpgO2Z1bmN0aW9uIGFuKGUpe3JldHVybiBlPy50b1N0cmluZygpLnN0YXJ0c1dpdGgoYCR7c259Ly9gKT8/ITF9ZnVuY3Rpb24ga2koZSl7aWYoIWFuKGUpKXJldHVybiExO2xldHtob3N0OnJ9PW5ldyBVUkwoZSk7cmV0dXJuIHIuaW5jbHVkZXMoXCJsb2NhbGhvc3RcIil8fHIuaW5jbHVkZXMoXCIxMjcuMC4wLjFcIil8fHIuaW5jbHVkZXMoXCJbOjoxXVwiKX12YXIgdnM9QyhEaSgpKTtmdW5jdGlvbiBfaShlKXtyZXR1cm4gU3RyaW5nKG5ldyBPaShlKSl9dmFyIE9pPWNsYXNze2NvbnN0cnVjdG9yKHIpe3RoaXMuY29uZmlnPXJ9dG9TdHJpbmcoKXtsZXR7Y29uZmlnOnJ9PXRoaXMsdD1yLnByb3ZpZGVyLmZyb21FbnZWYXI/YGVudihcIiR7ci5wcm92aWRlci5mcm9tRW52VmFyfVwiKWA6ci5wcm92aWRlci52YWx1ZSxuPUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoe3Byb3ZpZGVyOnQsYmluYXJ5VGFyZ2V0czpaYyhyLmJpbmFyeVRhcmdldHMpfSkpO3JldHVybmBnZW5lcmF0b3IgJHtyLm5hbWV9IHtcbiR7KDAsdnMuZGVmYXVsdCkoWGMobiksMil9XG59YH19O2Z1bmN0aW9uIFpjKGUpe2xldCByO2lmKGUubGVuZ3RoPjApe2xldCB0PWUuZmluZChuPT5uLmZyb21FbnZWYXIhPT1udWxsKTt0P3I9YGVudihcIiR7dC5mcm9tRW52VmFyfVwiKWA6cj1lLm1hcChuPT5uLm5hdGl2ZT9cIm5hdGl2ZVwiOm4udmFsdWUpfWVsc2Ugcj12b2lkIDA7cmV0dXJuIHJ9ZnVuY3Rpb24gWGMoZSl7bGV0IHI9T2JqZWN0LmtleXMoZSkucmVkdWNlKCh0LG4pPT5NYXRoLm1heCh0LG4ubGVuZ3RoKSwwKTtyZXR1cm4gT2JqZWN0LmVudHJpZXMoZSkubWFwKChbdCxuXSk9PmAke3QucGFkRW5kKHIpfSA9ICR7ZXAobil9YCkuam9pbihgXG5gKX1mdW5jdGlvbiBlcChlKXtyZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShlLChyLHQpPT5BcnJheS5pc0FycmF5KHQpP2BbJHt0Lm1hcChuPT5KU09OLnN0cmluZ2lmeShuKSkuam9pbihcIiwgXCIpfV1gOkpTT04uc3RyaW5naWZ5KHQpKSl9dmFyIG50PXt9O3RyKG50LHtlcnJvcjooKT0+bnAsaW5mbzooKT0+dHAsbG9nOigpPT5ycCxxdWVyeTooKT0+aXAsc2hvdWxkOigpPT5Qcyx0YWdzOigpPT50dCx3YXJuOigpPT5OaX0pO3ZhciB0dD17ZXJyb3I6Y2UoXCJwcmlzbWE6ZXJyb3JcIiksd2FybjprZShcInByaXNtYTp3YXJuXCIpLGluZm86RGUoXCJwcmlzbWE6aW5mb1wiKSxxdWVyeTpucihcInByaXNtYTpxdWVyeVwiKX0sUHM9e3dhcm46KCk9PiFwcm9jZXNzLmVudi5QUklTTUFfRElTQUJMRV9XQVJOSU5HU307ZnVuY3Rpb24gcnAoLi4uZSl7Y29uc29sZS5sb2coLi4uZSl9ZnVuY3Rpb24gTmkoZSwuLi5yKXtQcy53YXJuKCkmJmNvbnNvbGUud2FybihgJHt0dC53YXJufSAke2V9YCwuLi5yKX1mdW5jdGlvbiB0cChlLC4uLnIpe2NvbnNvbGUuaW5mbyhgJHt0dC5pbmZvfSAke2V9YCwuLi5yKX1mdW5jdGlvbiBucChlLC4uLnIpe2NvbnNvbGUuZXJyb3IoYCR7dHQuZXJyb3J9ICR7ZX1gLC4uLnIpfWZ1bmN0aW9uIGlwKGUsLi4ucil7Y29uc29sZS5sb2coYCR7dHQucXVlcnl9ICR7ZX1gLC4uLnIpfWZ1bmN0aW9uIGxuKGUscil7aWYoIWUpdGhyb3cgbmV3IEVycm9yKGAke3J9LiBUaGlzIHNob3VsZCBuZXZlciBoYXBwZW4uIElmIHlvdSBzZWUgdGhpcyBlcnJvciwgcGxlYXNlLCBvcGVuIGFuIGlzc3VlIGF0IGh0dHBzOi8vcHJpcy5seS9wcmlzbWEtcHJpc21hLWJ1Zy1yZXBvcnRgKX1mdW5jdGlvbiBOZShlLHIpe3Rocm93IG5ldyBFcnJvcihyKX12YXIgaXQ9QyhyZXF1aXJlKFwibm9kZTpwYXRoXCIpKTtmdW5jdGlvbiBGaShlKXtyZXR1cm4gaXQuZGVmYXVsdC5zZXA9PT1pdC5kZWZhdWx0LnBvc2l4LnNlcD9lOmUuc3BsaXQoaXQuZGVmYXVsdC5zZXApLmpvaW4oaXQuZGVmYXVsdC5wb3NpeC5zZXApfXZhciBqaT1DKE9zKCkpLHVuPUMocmVxdWlyZShcIm5vZGU6ZnNcIikpO3ZhciB3cj1DKHJlcXVpcmUoXCJub2RlOnBhdGhcIikpO2Z1bmN0aW9uIF9zKGUpe2xldCByPWUuaWdub3JlUHJvY2Vzc0Vudj97fTpwcm9jZXNzLmVudix0PW49Pm4ubWF0Y2goLyguP1xcJHsoPzpbYS16QS1aMC05X10rKT99KS9nKT8ucmVkdWNlKGZ1bmN0aW9uKG8scyl7bGV0IGE9LyguPylcXCR7KFthLXpBLVowLTlfXSspP30vZy5leGVjKHMpO2lmKCFhKXJldHVybiBvO2xldCBsPWFbMV0sdSxjO2lmKGw9PT1cIlxcXFxcIiljPWFbMF0sdT1jLnJlcGxhY2UoXCJcXFxcJFwiLFwiJFwiKTtlbHNle2xldCBwPWFbMl07Yz1hWzBdLnN1YnN0cmluZyhsLmxlbmd0aCksdT1PYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChyLHApP3JbcF06ZS5wYXJzZWRbcF18fFwiXCIsdT10KHUpfXJldHVybiBvLnJlcGxhY2UoYyx1KX0sbik/P247Zm9yKGxldCBuIGluIGUucGFyc2VkKXtsZXQgaT1PYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChyLG4pP3Jbbl06ZS5wYXJzZWRbbl07ZS5wYXJzZWRbbl09dChpKX1mb3IobGV0IG4gaW4gZS5wYXJzZWQpcltuXT1lLnBhcnNlZFtuXTtyZXR1cm4gZX12YXIgcWk9Z3IoXCJwcmlzbWE6dHJ5TG9hZEVudlwiKTtmdW5jdGlvbiBzdCh7cm9vdEVudlBhdGg6ZSxzY2hlbWFFbnZQYXRoOnJ9LHQ9e2NvbmZsaWN0Q2hlY2s6XCJub25lXCJ9KXtsZXQgbj1OcyhlKTt0LmNvbmZsaWN0Q2hlY2shPT1cIm5vbmVcIiYmd3AobixyLHQuY29uZmxpY3RDaGVjayk7bGV0IGk9bnVsbDtyZXR1cm4gTHMobj8ucGF0aCxyKXx8KGk9TnMocikpLCFuJiYhaSYmcWkoXCJObyBFbnZpcm9ubWVudCB2YXJpYWJsZXMgbG9hZGVkXCIpLGk/LmRvdGVudlJlc3VsdC5lcnJvcj9jb25zb2xlLmVycm9yKGNlKFcoXCJTY2hlbWEgRW52IEVycm9yOiBcIikpK2kuZG90ZW52UmVzdWx0LmVycm9yKTp7bWVzc2FnZTpbbj8ubWVzc2FnZSxpPy5tZXNzYWdlXS5maWx0ZXIoQm9vbGVhbikuam9pbihgXG5gKSxwYXJzZWQ6ey4uLm4/LmRvdGVudlJlc3VsdD8ucGFyc2VkLC4uLmk/LmRvdGVudlJlc3VsdD8ucGFyc2VkfX19ZnVuY3Rpb24gd3AoZSxyLHQpe2xldCBuPWU/LmRvdGVudlJlc3VsdC5wYXJzZWQsaT0hTHMoZT8ucGF0aCxyKTtpZihuJiZyJiZpJiZ1bi5kZWZhdWx0LmV4aXN0c1N5bmMocikpe2xldCBvPWppLmRlZmF1bHQucGFyc2UodW4uZGVmYXVsdC5yZWFkRmlsZVN5bmMocikpLHM9W107Zm9yKGxldCBhIGluIG8pblthXT09PW9bYV0mJnMucHVzaChhKTtpZihzLmxlbmd0aD4wKXtsZXQgYT13ci5kZWZhdWx0LnJlbGF0aXZlKHByb2Nlc3MuY3dkKCksZS5wYXRoKSxsPXdyLmRlZmF1bHQucmVsYXRpdmUocHJvY2Vzcy5jd2QoKSxyKTtpZih0PT09XCJlcnJvclwiKXtsZXQgdT1gVGhlcmUgaXMgYSBjb25mbGljdCBiZXR3ZWVuIGVudiB2YXIke3MubGVuZ3RoPjE/XCJzXCI6XCJcIn0gaW4gJHtZKGEpfSBhbmQgJHtZKGwpfVxuQ29uZmxpY3RpbmcgZW52IHZhcnM6XG4ke3MubWFwKGM9PmAgICR7VyhjKX1gKS5qb2luKGBcbmApfVxuXG5XZSBzdWdnZXN0IHRvIG1vdmUgdGhlIGNvbnRlbnRzIG9mICR7WShsKX0gdG8gJHtZKGEpfSB0byBjb25zb2xpZGF0ZSB5b3VyIGVudiB2YXJzLlxuYDt0aHJvdyBuZXcgRXJyb3IodSl9ZWxzZSBpZih0PT09XCJ3YXJuXCIpe2xldCB1PWBDb25mbGljdCBmb3IgZW52IHZhciR7cy5sZW5ndGg+MT9cInNcIjpcIlwifSAke3MubWFwKGM9PlcoYykpLmpvaW4oXCIsIFwiKX0gaW4gJHtZKGEpfSBhbmQgJHtZKGwpfVxuRW52IHZhcnMgZnJvbSAke1kobCl9IG92ZXJ3cml0ZSB0aGUgb25lcyBmcm9tICR7WShhKX1cbiAgICAgIGA7Y29uc29sZS53YXJuKGAke2tlKFwid2FybihwcmlzbWEpXCIpfSAke3V9YCl9fX19ZnVuY3Rpb24gTnMoZSl7aWYoeHAoZSkpe3FpKGBFbnZpcm9ubWVudCB2YXJpYWJsZXMgbG9hZGVkIGZyb20gJHtlfWApO2xldCByPWppLmRlZmF1bHQuY29uZmlnKHtwYXRoOmUsZGVidWc6cHJvY2Vzcy5lbnYuRE9URU5WX0NPTkZJR19ERUJVRz8hMDp2b2lkIDB9KTtyZXR1cm57ZG90ZW52UmVzdWx0Ol9zKHIpLG1lc3NhZ2U6SWUoYEVudmlyb25tZW50IHZhcmlhYmxlcyBsb2FkZWQgZnJvbSAke3dyLmRlZmF1bHQucmVsYXRpdmUocHJvY2Vzcy5jd2QoKSxlKX1gKSxwYXRoOmV9fWVsc2UgcWkoYEVudmlyb25tZW50IHZhcmlhYmxlcyBub3QgZm91bmQgYXQgJHtlfWApO3JldHVybiBudWxsfWZ1bmN0aW9uIExzKGUscil7cmV0dXJuIGUmJnImJndyLmRlZmF1bHQucmVzb2x2ZShlKT09PXdyLmRlZmF1bHQucmVzb2x2ZShyKX1mdW5jdGlvbiB4cChlKXtyZXR1cm4hIShlJiZ1bi5kZWZhdWx0LmV4aXN0c1N5bmMoZSkpfWZ1bmN0aW9uIFZpKGUscil7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHIpfWZ1bmN0aW9uIHhyKGUscil7bGV0IHQ9e307Zm9yKGxldCBuIG9mIE9iamVjdC5rZXlzKGUpKXRbbl09cihlW25dLG4pO3JldHVybiB0fWZ1bmN0aW9uIEJpKGUscil7aWYoZS5sZW5ndGg9PT0wKXJldHVybjtsZXQgdD1lWzBdO2ZvcihsZXQgbj0xO248ZS5sZW5ndGg7bisrKXIodCxlW25dKTwwJiYodD1lW25dKTtyZXR1cm4gdH1mdW5jdGlvbiB4KGUscil7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJuYW1lXCIse3ZhbHVlOnIsY29uZmlndXJhYmxlOiEwfSl9dmFyIE1zPW5ldyBTZXQsYXQ9KGUsciwuLi50KT0+e01zLmhhcyhlKXx8KE1zLmFkZChlKSxOaShyLC4uLnQpKX07dmFyIFQ9Y2xhc3MgZSBleHRlbmRzIEVycm9ye2NsaWVudFZlcnNpb247ZXJyb3JDb2RlO3JldHJ5YWJsZTtjb25zdHJ1Y3RvcihyLHQsbil7c3VwZXIociksdGhpcy5uYW1lPVwiUHJpc21hQ2xpZW50SW5pdGlhbGl6YXRpb25FcnJvclwiLHRoaXMuY2xpZW50VmVyc2lvbj10LHRoaXMuZXJyb3JDb2RlPW4sRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZSl9Z2V0W1N5bWJvbC50b1N0cmluZ1RhZ10oKXtyZXR1cm5cIlByaXNtYUNsaWVudEluaXRpYWxpemF0aW9uRXJyb3JcIn19O3goVCxcIlByaXNtYUNsaWVudEluaXRpYWxpemF0aW9uRXJyb3JcIik7dmFyIHo9Y2xhc3MgZXh0ZW5kcyBFcnJvcntjb2RlO21ldGE7Y2xpZW50VmVyc2lvbjtiYXRjaFJlcXVlc3RJZHg7Y29uc3RydWN0b3Iocix7Y29kZTp0LGNsaWVudFZlcnNpb246bixtZXRhOmksYmF0Y2hSZXF1ZXN0SWR4Om99KXtzdXBlcihyKSx0aGlzLm5hbWU9XCJQcmlzbWFDbGllbnRLbm93blJlcXVlc3RFcnJvclwiLHRoaXMuY29kZT10LHRoaXMuY2xpZW50VmVyc2lvbj1uLHRoaXMubWV0YT1pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiYmF0Y2hSZXF1ZXN0SWR4XCIse3ZhbHVlOm8sZW51bWVyYWJsZTohMSx3cml0YWJsZTohMH0pfWdldFtTeW1ib2wudG9TdHJpbmdUYWddKCl7cmV0dXJuXCJQcmlzbWFDbGllbnRLbm93blJlcXVlc3RFcnJvclwifX07eCh6LFwiUHJpc21hQ2xpZW50S25vd25SZXF1ZXN0RXJyb3JcIik7dmFyIGxlPWNsYXNzIGV4dGVuZHMgRXJyb3J7Y2xpZW50VmVyc2lvbjtjb25zdHJ1Y3RvcihyLHQpe3N1cGVyKHIpLHRoaXMubmFtZT1cIlByaXNtYUNsaWVudFJ1c3RQYW5pY0Vycm9yXCIsdGhpcy5jbGllbnRWZXJzaW9uPXR9Z2V0W1N5bWJvbC50b1N0cmluZ1RhZ10oKXtyZXR1cm5cIlByaXNtYUNsaWVudFJ1c3RQYW5pY0Vycm9yXCJ9fTt4KGxlLFwiUHJpc21hQ2xpZW50UnVzdFBhbmljRXJyb3JcIik7dmFyIGo9Y2xhc3MgZXh0ZW5kcyBFcnJvcntjbGllbnRWZXJzaW9uO2JhdGNoUmVxdWVzdElkeDtjb25zdHJ1Y3RvcihyLHtjbGllbnRWZXJzaW9uOnQsYmF0Y2hSZXF1ZXN0SWR4Om59KXtzdXBlcihyKSx0aGlzLm5hbWU9XCJQcmlzbWFDbGllbnRVbmtub3duUmVxdWVzdEVycm9yXCIsdGhpcy5jbGllbnRWZXJzaW9uPXQsT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJiYXRjaFJlcXVlc3RJZHhcIix7dmFsdWU6bix3cml0YWJsZTohMCxlbnVtZXJhYmxlOiExfSl9Z2V0W1N5bWJvbC50b1N0cmluZ1RhZ10oKXtyZXR1cm5cIlByaXNtYUNsaWVudFVua25vd25SZXF1ZXN0RXJyb3JcIn19O3goaixcIlByaXNtYUNsaWVudFVua25vd25SZXF1ZXN0RXJyb3JcIik7dmFyIFo9Y2xhc3MgZXh0ZW5kcyBFcnJvcntuYW1lPVwiUHJpc21hQ2xpZW50VmFsaWRhdGlvbkVycm9yXCI7Y2xpZW50VmVyc2lvbjtjb25zdHJ1Y3RvcihyLHtjbGllbnRWZXJzaW9uOnR9KXtzdXBlcihyKSx0aGlzLmNsaWVudFZlcnNpb249dH1nZXRbU3ltYm9sLnRvU3RyaW5nVGFnXSgpe3JldHVyblwiUHJpc21hQ2xpZW50VmFsaWRhdGlvbkVycm9yXCJ9fTt4KFosXCJQcmlzbWFDbGllbnRWYWxpZGF0aW9uRXJyb3JcIik7dmFyIHZyPTllMTUsS2U9MWU5LFVpPVwiMDEyMzQ1Njc4OWFiY2RlZlwiLGZuPVwiMi4zMDI1ODUwOTI5OTQwNDU2ODQwMTc5OTE0NTQ2ODQzNjQyMDc2MDExMDE0ODg2Mjg3NzI5NzYwMzMzMjc5MDA5Njc1NzI2MDk2NzczNTI0ODAyMzU5OTcyMDUwODk1OTgyOTgzNDE5Njc3ODQwNDIyODYyNDg2MzM0MDk1MjU0NjUwODI4MDY3NTY2NjYyODczNjkwOTg3ODE2ODk0ODI5MDcyMDgzMjU1NTQ2ODA4NDM3OTk4OTQ4MjYyMzMxOTg1MjgzOTM1MDUzMDg5NjUzNzc3MzI2Mjg4NDYxNjMzNjYyMjIyODc2OTgyMTk4ODY3NDY1NDM2Njc0NzQ0MDQyNDMyNzQzNjUxNTUwNDg5MzQzMTQ5MzkzOTE0Nzk2MTk0MDQ0MDAyMjIxMDUxMDE3MTQxNzQ4MDAzNjg4MDg0MDEyNjQ3MDgwNjg1NTY3NzQzMjE2MjI4MzU1MjIwMTE0ODA0NjYzNzE1NjU5MTIxMzczNDUwNzQ3ODU2OTQ3NjgzNDYzNjE2NzkyMTAxODA2NDQ1MDcwNjQ4MDAwMjc3NTAyNjg0OTE2NzQ2NTUwNTg2ODU2OTM1NjczNDIwNjcwNTgxMTM2NDI5MjI0NTU0NDA1NzU4OTI1NzI0MjA4MjQxMzE0Njk1Njg5MDE2NzU4OTQwMjU2Nzc2MzExMzU2OTE5MjkyMDMzMzc2NTg3MTQxNjYwMjMwMTA1NzAzMDg5NjM0NTcyMDc1NDQwMzcwODQ3NDY5OTQwMTY4MjY5MjgyODA4NDgxMTg0Mjg5MzE0ODQ4NTI0OTQ4NjQ0ODcxOTI3ODA5Njc2MjcxMjc1Nzc1Mzk3MDI3NjY4NjA1OTUyNDk2NzE2Njc0MTgzNDg1NzA0NDIyNTA3MTk3OTY1MDA0NzE0OTUxMDUwNDkyMjE0Nzc2NTY3NjM2OTM4NjYyOTc2OTc5NTIyMTEwNzE4MjY0NTQ5NzM0NzcyNjYyNDI1NzA5NDI5MzIyNTgyNzk4NTAyNTg1NTA5Nzg1MjY1MzgzMjA3NjA2NzI2MzE3MTY0MzA5NTA1OTk1MDg3ODA3NTIzNzEwMzMzMTAxMTk3ODU3NTQ3MzMxNTQxNDIxODA4NDI3NTQzODYzNTkxNzc4MTE3MDU0MzA5ODI3NDgyMzg1MDQ1NjQ4MDE5MDk1NjEwMjk5MjkxODI0MzE4MjM3NTI1MzU3NzA5NzUwNTM5NTY1MTg3Njk3NTEwMzc0OTcwODg4NjkyMTgwMjA1MTg5MzM5NTA3MjM4NTM5MjA1MTQ0NjM0MTk3MjY1Mjg3Mjg2OTY1MTEwODYyNTcxNDkyMTk4ODQ5OTc4NzQ4ODczNzcxMzQ1Njg2MjA5MTY3MDU4XCIsZ249XCIzLjE0MTU5MjY1MzU4OTc5MzIzODQ2MjY0MzM4MzI3OTUwMjg4NDE5NzE2OTM5OTM3NTEwNTgyMDk3NDk0NDU5MjMwNzgxNjQwNjI4NjIwODk5ODYyODAzNDgyNTM0MjExNzA2Nzk4MjE0ODA4NjUxMzI4MjMwNjY0NzA5Mzg0NDYwOTU1MDU4MjIzMTcyNTM1OTQwODEyODQ4MTExNzQ1MDI4NDEwMjcwMTkzODUyMTEwNTU1OTY0NDYyMjk0ODk1NDkzMDM4MTk2NDQyODgxMDk3NTY2NTkzMzQ0NjEyODQ3NTY0ODIzMzc4Njc4MzE2NTI3MTIwMTkwOTE0NTY0ODU2NjkyMzQ2MDM0ODYxMDQ1NDMyNjY0ODIxMzM5MzYwNzI2MDI0OTE0MTI3MzcyNDU4NzAwNjYwNjMxNTU4ODE3NDg4MTUyMDkyMDk2MjgyOTI1NDA5MTcxNTM2NDM2Nzg5MjU5MDM2MDAxMTMzMDUzMDU0ODgyMDQ2NjUyMTM4NDE0Njk1MTk0MTUxMTYwOTQzMzA1NzI3MDM2NTc1OTU5MTk1MzA5MjE4NjExNzM4MTkzMjYxMTc5MzEwNTExODU0ODA3NDQ2MjM3OTk2Mjc0OTU2NzM1MTg4NTc1MjcyNDg5MTIyNzkzODE4MzAxMTk0OTEyOTgzMzY3MzM2MjQ0MDY1NjY0MzA4NjAyMTM5NDk0NjM5NTIyNDczNzE5MDcwMjE3OTg2MDk0MzcwMjc3MDUzOTIxNzE3NjI5MzE3Njc1MjM4NDY3NDgxODQ2NzY2OTQwNTEzMjAwMDU2ODEyNzE0NTI2MzU2MDgyNzc4NTc3MTM0Mjc1Nzc4OTYwOTE3MzYzNzE3ODcyMTQ2ODQ0MDkwMTIyNDk1MzQzMDE0NjU0OTU4NTM3MTA1MDc5MjI3OTY4OTI1ODkyMzU0MjAxOTk1NjExMjEyOTAyMTk2MDg2NDAzNDQxODE1OTgxMzYyOTc3NDc3MTMwOTk2MDUxODcwNzIxMTM0OTk5OTk5ODM3Mjk3ODA0OTk1MTA1OTczMTczMjgxNjA5NjMxODU5NTAyNDQ1OTQ1NTM0NjkwODMwMjY0MjUyMjMwODI1MzM0NDY4NTAzNTI2MTkzMTE4ODE3MTAxMDAwMzEzNzgzODc1Mjg4NjU4NzUzMzIwODM4MTQyMDYxNzE3NzY2OTE0NzMwMzU5ODI1MzQ5MDQyODc1NTQ2ODczMTE1OTU2Mjg2Mzg4MjM1Mzc4NzU5Mzc1MTk1Nzc4MTg1Nzc4MDUzMjE3MTIyNjgwNjYxMzAwMTkyNzg3NjYxMTE5NTkwOTIxNjQyMDE5ODkzODA5NTI1NzIwMTA2NTQ4NTg2MzI3ODlcIixHaT17cHJlY2lzaW9uOjIwLHJvdW5kaW5nOjQsbW9kdWxvOjEsdG9FeHBOZWc6LTcsdG9FeHBQb3M6MjEsbWluRTotdnIsbWF4RTp2cixjcnlwdG86ITF9LFZzLEZlLHc9ITAseW49XCJbRGVjaW1hbEVycm9yXSBcIixIZT15bitcIkludmFsaWQgYXJndW1lbnQ6IFwiLEJzPXluK1wiUHJlY2lzaW9uIGxpbWl0IGV4Y2VlZGVkXCIsVXM9eW4rXCJjcnlwdG8gdW5hdmFpbGFibGVcIixHcz1cIltvYmplY3QgRGVjaW1hbF1cIixYPU1hdGguZmxvb3IsVT1NYXRoLnBvdyx2cD0vXjBiKFswMV0rKFxcLlswMV0qKT98XFwuWzAxXSspKHBbKy1dP1xcZCspPyQvaSxQcD0vXjB4KFswLTlhLWZdKyhcXC5bMC05YS1mXSopP3xcXC5bMC05YS1mXSspKHBbKy1dP1xcZCspPyQvaSxUcD0vXjBvKFswLTddKyhcXC5bMC03XSopP3xcXC5bMC03XSspKHBbKy1dP1xcZCspPyQvaSxRcz0vXihcXGQrKFxcLlxcZCopP3xcXC5cXGQrKShlWystXT9cXGQrKT8kL2ksZmU9MWU3LEU9NyxTcD05MDA3MTk5MjU0NzQwOTkxLFJwPWZuLmxlbmd0aC0xLFFpPWduLmxlbmd0aC0xLG09e3RvU3RyaW5nVGFnOkdzfTttLmFic29sdXRlVmFsdWU9bS5hYnM9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzKTtyZXR1cm4gZS5zPDAmJihlLnM9MSkseShlKX07bS5jZWlsPWZ1bmN0aW9uKCl7cmV0dXJuIHkobmV3IHRoaXMuY29uc3RydWN0b3IodGhpcyksdGhpcy5lKzEsMil9O20uY2xhbXBlZFRvPW0uY2xhbXA9ZnVuY3Rpb24oZSxyKXt2YXIgdCxuPXRoaXMsaT1uLmNvbnN0cnVjdG9yO2lmKGU9bmV3IGkoZSkscj1uZXcgaShyKSwhZS5zfHwhci5zKXJldHVybiBuZXcgaShOYU4pO2lmKGUuZ3QocikpdGhyb3cgRXJyb3IoSGUrcik7cmV0dXJuIHQ9bi5jbXAoZSksdDwwP2U6bi5jbXAocik+MD9yOm5ldyBpKG4pfTttLmNvbXBhcmVkVG89bS5jbXA9ZnVuY3Rpb24oZSl7dmFyIHIsdCxuLGksbz10aGlzLHM9by5kLGE9KGU9bmV3IG8uY29uc3RydWN0b3IoZSkpLmQsbD1vLnMsdT1lLnM7aWYoIXN8fCFhKXJldHVybiFsfHwhdT9OYU46bCE9PXU/bDpzPT09YT8wOiFzXmw8MD8xOi0xO2lmKCFzWzBdfHwhYVswXSlyZXR1cm4gc1swXT9sOmFbMF0/LXU6MDtpZihsIT09dSlyZXR1cm4gbDtpZihvLmUhPT1lLmUpcmV0dXJuIG8uZT5lLmVebDwwPzE6LTE7Zm9yKG49cy5sZW5ndGgsaT1hLmxlbmd0aCxyPTAsdD1uPGk/bjppO3I8dDsrK3IpaWYoc1tyXSE9PWFbcl0pcmV0dXJuIHNbcl0+YVtyXV5sPDA/MTotMTtyZXR1cm4gbj09PWk/MDpuPmlebDwwPzE6LTF9O20uY29zaW5lPW0uY29zPWZ1bmN0aW9uKCl7dmFyIGUscix0PXRoaXMsbj10LmNvbnN0cnVjdG9yO3JldHVybiB0LmQ/dC5kWzBdPyhlPW4ucHJlY2lzaW9uLHI9bi5yb3VuZGluZyxuLnByZWNpc2lvbj1lK01hdGgubWF4KHQuZSx0LnNkKCkpK0Usbi5yb3VuZGluZz0xLHQ9QXAobixZcyhuLHQpKSxuLnByZWNpc2lvbj1lLG4ucm91bmRpbmc9cix5KEZlPT0yfHxGZT09Mz90Lm5lZygpOnQsZSxyLCEwKSk6bmV3IG4oMSk6bmV3IG4oTmFOKX07bS5jdWJlUm9vdD1tLmNicnQ9ZnVuY3Rpb24oKXt2YXIgZSxyLHQsbixpLG8scyxhLGwsdSxjPXRoaXMscD1jLmNvbnN0cnVjdG9yO2lmKCFjLmlzRmluaXRlKCl8fGMuaXNaZXJvKCkpcmV0dXJuIG5ldyBwKGMpO2Zvcih3PSExLG89Yy5zKlUoYy5zKmMsMS8zKSwhb3x8TWF0aC5hYnMobyk9PTEvMD8odD1KKGMuZCksZT1jLmUsKG89KGUtdC5sZW5ndGgrMSklMykmJih0Kz1vPT0xfHxvPT0tMj9cIjBcIjpcIjAwXCIpLG89VSh0LDEvMyksZT1YKChlKzEpLzMpLShlJTM9PShlPDA/LTE6MikpLG89PTEvMD90PVwiNWVcIitlOih0PW8udG9FeHBvbmVudGlhbCgpLHQ9dC5zbGljZSgwLHQuaW5kZXhPZihcImVcIikrMSkrZSksbj1uZXcgcCh0KSxuLnM9Yy5zKTpuPW5ldyBwKG8udG9TdHJpbmcoKSkscz0oZT1wLnByZWNpc2lvbikrMzs7KWlmKGE9bixsPWEudGltZXMoYSkudGltZXMoYSksdT1sLnBsdXMoYyksbj1MKHUucGx1cyhjKS50aW1lcyhhKSx1LnBsdXMobCkscysyLDEpLEooYS5kKS5zbGljZSgwLHMpPT09KHQ9SihuLmQpKS5zbGljZSgwLHMpKWlmKHQ9dC5zbGljZShzLTMscysxKSx0PT1cIjk5OTlcInx8IWkmJnQ9PVwiNDk5OVwiKXtpZighaSYmKHkoYSxlKzEsMCksYS50aW1lcyhhKS50aW1lcyhhKS5lcShjKSkpe249YTticmVha31zKz00LGk9MX1lbHNleyghK3R8fCErdC5zbGljZSgxKSYmdC5jaGFyQXQoMCk9PVwiNVwiKSYmKHkobixlKzEsMSkscj0hbi50aW1lcyhuKS50aW1lcyhuKS5lcShjKSk7YnJlYWt9cmV0dXJuIHc9ITAseShuLGUscC5yb3VuZGluZyxyKX07bS5kZWNpbWFsUGxhY2VzPW0uZHA9ZnVuY3Rpb24oKXt2YXIgZSxyPXRoaXMuZCx0PU5hTjtpZihyKXtpZihlPXIubGVuZ3RoLTEsdD0oZS1YKHRoaXMuZS9FKSkqRSxlPXJbZV0sZSlmb3IoO2UlMTA9PTA7ZS89MTApdC0tO3Q8MCYmKHQ9MCl9cmV0dXJuIHR9O20uZGl2aWRlZEJ5PW0uZGl2PWZ1bmN0aW9uKGUpe3JldHVybiBMKHRoaXMsbmV3IHRoaXMuY29uc3RydWN0b3IoZSkpfTttLmRpdmlkZWRUb0ludGVnZXJCeT1tLmRpdlRvSW50PWZ1bmN0aW9uKGUpe3ZhciByPXRoaXMsdD1yLmNvbnN0cnVjdG9yO3JldHVybiB5KEwocixuZXcgdChlKSwwLDEsMSksdC5wcmVjaXNpb24sdC5yb3VuZGluZyl9O20uZXF1YWxzPW0uZXE9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuY21wKGUpPT09MH07bS5mbG9vcj1mdW5jdGlvbigpe3JldHVybiB5KG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMpLHRoaXMuZSsxLDMpfTttLmdyZWF0ZXJUaGFuPW0uZ3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuY21wKGUpPjB9O20uZ3JlYXRlclRoYW5PckVxdWFsVG89bS5ndGU9ZnVuY3Rpb24oZSl7dmFyIHI9dGhpcy5jbXAoZSk7cmV0dXJuIHI9PTF8fHI9PT0wfTttLmh5cGVyYm9saWNDb3NpbmU9bS5jb3NoPWZ1bmN0aW9uKCl7dmFyIGUscix0LG4saSxvPXRoaXMscz1vLmNvbnN0cnVjdG9yLGE9bmV3IHMoMSk7aWYoIW8uaXNGaW5pdGUoKSlyZXR1cm4gbmV3IHMoby5zPzEvMDpOYU4pO2lmKG8uaXNaZXJvKCkpcmV0dXJuIGE7dD1zLnByZWNpc2lvbixuPXMucm91bmRpbmcscy5wcmVjaXNpb249dCtNYXRoLm1heChvLmUsby5zZCgpKSs0LHMucm91bmRpbmc9MSxpPW8uZC5sZW5ndGgsaTwzMj8oZT1NYXRoLmNlaWwoaS8zKSxyPSgxL0VuKDQsZSkpLnRvU3RyaW5nKCkpOihlPTE2LHI9XCIyLjMyODMwNjQzNjUzODY5NjI4OTA2MjVlLTEwXCIpLG89UHIocywxLG8udGltZXMociksbmV3IHMoMSksITApO2Zvcih2YXIgbCx1PWUsYz1uZXcgcyg4KTt1LS07KWw9by50aW1lcyhvKSxvPWEubWludXMobC50aW1lcyhjLm1pbnVzKGwudGltZXMoYykpKSk7cmV0dXJuIHkobyxzLnByZWNpc2lvbj10LHMucm91bmRpbmc9biwhMCl9O20uaHlwZXJib2xpY1NpbmU9bS5zaW5oPWZ1bmN0aW9uKCl7dmFyIGUscix0LG4saT10aGlzLG89aS5jb25zdHJ1Y3RvcjtpZighaS5pc0Zpbml0ZSgpfHxpLmlzWmVybygpKXJldHVybiBuZXcgbyhpKTtpZihyPW8ucHJlY2lzaW9uLHQ9by5yb3VuZGluZyxvLnByZWNpc2lvbj1yK01hdGgubWF4KGkuZSxpLnNkKCkpKzQsby5yb3VuZGluZz0xLG49aS5kLmxlbmd0aCxuPDMpaT1QcihvLDIsaSxpLCEwKTtlbHNle2U9MS40Kk1hdGguc3FydChuKSxlPWU+MTY/MTY6ZXwwLGk9aS50aW1lcygxL0VuKDUsZSkpLGk9UHIobywyLGksaSwhMCk7Zm9yKHZhciBzLGE9bmV3IG8oNSksbD1uZXcgbygxNiksdT1uZXcgbygyMCk7ZS0tOylzPWkudGltZXMoaSksaT1pLnRpbWVzKGEucGx1cyhzLnRpbWVzKGwudGltZXMocykucGx1cyh1KSkpKX1yZXR1cm4gby5wcmVjaXNpb249cixvLnJvdW5kaW5nPXQseShpLHIsdCwhMCl9O20uaHlwZXJib2xpY1RhbmdlbnQ9bS50YW5oPWZ1bmN0aW9uKCl7dmFyIGUscix0PXRoaXMsbj10LmNvbnN0cnVjdG9yO3JldHVybiB0LmlzRmluaXRlKCk/dC5pc1plcm8oKT9uZXcgbih0KTooZT1uLnByZWNpc2lvbixyPW4ucm91bmRpbmcsbi5wcmVjaXNpb249ZSs3LG4ucm91bmRpbmc9MSxMKHQuc2luaCgpLHQuY29zaCgpLG4ucHJlY2lzaW9uPWUsbi5yb3VuZGluZz1yKSk6bmV3IG4odC5zKX07bS5pbnZlcnNlQ29zaW5lPW0uYWNvcz1mdW5jdGlvbigpe3ZhciBlPXRoaXMscj1lLmNvbnN0cnVjdG9yLHQ9ZS5hYnMoKS5jbXAoMSksbj1yLnByZWNpc2lvbixpPXIucm91bmRpbmc7cmV0dXJuIHQhPT0tMT90PT09MD9lLmlzTmVnKCk/d2UocixuLGkpOm5ldyByKDApOm5ldyByKE5hTik6ZS5pc1plcm8oKT93ZShyLG4rNCxpKS50aW1lcyguNSk6KHIucHJlY2lzaW9uPW4rNixyLnJvdW5kaW5nPTEsZT1uZXcgcigxKS5taW51cyhlKS5kaXYoZS5wbHVzKDEpKS5zcXJ0KCkuYXRhbigpLHIucHJlY2lzaW9uPW4sci5yb3VuZGluZz1pLGUudGltZXMoMikpfTttLmludmVyc2VIeXBlcmJvbGljQ29zaW5lPW0uYWNvc2g9ZnVuY3Rpb24oKXt2YXIgZSxyLHQ9dGhpcyxuPXQuY29uc3RydWN0b3I7cmV0dXJuIHQubHRlKDEpP25ldyBuKHQuZXEoMSk/MDpOYU4pOnQuaXNGaW5pdGUoKT8oZT1uLnByZWNpc2lvbixyPW4ucm91bmRpbmcsbi5wcmVjaXNpb249ZStNYXRoLm1heChNYXRoLmFicyh0LmUpLHQuc2QoKSkrNCxuLnJvdW5kaW5nPTEsdz0hMSx0PXQudGltZXModCkubWludXMoMSkuc3FydCgpLnBsdXModCksdz0hMCxuLnByZWNpc2lvbj1lLG4ucm91bmRpbmc9cix0LmxuKCkpOm5ldyBuKHQpfTttLmludmVyc2VIeXBlcmJvbGljU2luZT1tLmFzaW5oPWZ1bmN0aW9uKCl7dmFyIGUscix0PXRoaXMsbj10LmNvbnN0cnVjdG9yO3JldHVybiF0LmlzRmluaXRlKCl8fHQuaXNaZXJvKCk/bmV3IG4odCk6KGU9bi5wcmVjaXNpb24scj1uLnJvdW5kaW5nLG4ucHJlY2lzaW9uPWUrMipNYXRoLm1heChNYXRoLmFicyh0LmUpLHQuc2QoKSkrNixuLnJvdW5kaW5nPTEsdz0hMSx0PXQudGltZXModCkucGx1cygxKS5zcXJ0KCkucGx1cyh0KSx3PSEwLG4ucHJlY2lzaW9uPWUsbi5yb3VuZGluZz1yLHQubG4oKSl9O20uaW52ZXJzZUh5cGVyYm9saWNUYW5nZW50PW0uYXRhbmg9ZnVuY3Rpb24oKXt2YXIgZSxyLHQsbixpPXRoaXMsbz1pLmNvbnN0cnVjdG9yO3JldHVybiBpLmlzRmluaXRlKCk/aS5lPj0wP25ldyBvKGkuYWJzKCkuZXEoMSk/aS5zLzA6aS5pc1plcm8oKT9pOk5hTik6KGU9by5wcmVjaXNpb24scj1vLnJvdW5kaW5nLG49aS5zZCgpLE1hdGgubWF4KG4sZSk8MiotaS5lLTE/eShuZXcgbyhpKSxlLHIsITApOihvLnByZWNpc2lvbj10PW4taS5lLGk9TChpLnBsdXMoMSksbmV3IG8oMSkubWludXMoaSksdCtlLDEpLG8ucHJlY2lzaW9uPWUrNCxvLnJvdW5kaW5nPTEsaT1pLmxuKCksby5wcmVjaXNpb249ZSxvLnJvdW5kaW5nPXIsaS50aW1lcyguNSkpKTpuZXcgbyhOYU4pfTttLmludmVyc2VTaW5lPW0uYXNpbj1mdW5jdGlvbigpe3ZhciBlLHIsdCxuLGk9dGhpcyxvPWkuY29uc3RydWN0b3I7cmV0dXJuIGkuaXNaZXJvKCk/bmV3IG8oaSk6KHI9aS5hYnMoKS5jbXAoMSksdD1vLnByZWNpc2lvbixuPW8ucm91bmRpbmcsciE9PS0xP3I9PT0wPyhlPXdlKG8sdCs0LG4pLnRpbWVzKC41KSxlLnM9aS5zLGUpOm5ldyBvKE5hTik6KG8ucHJlY2lzaW9uPXQrNixvLnJvdW5kaW5nPTEsaT1pLmRpdihuZXcgbygxKS5taW51cyhpLnRpbWVzKGkpKS5zcXJ0KCkucGx1cygxKSkuYXRhbigpLG8ucHJlY2lzaW9uPXQsby5yb3VuZGluZz1uLGkudGltZXMoMikpKX07bS5pbnZlcnNlVGFuZ2VudD1tLmF0YW49ZnVuY3Rpb24oKXt2YXIgZSxyLHQsbixpLG8scyxhLGwsdT10aGlzLGM9dS5jb25zdHJ1Y3RvcixwPWMucHJlY2lzaW9uLGQ9Yy5yb3VuZGluZztpZih1LmlzRmluaXRlKCkpe2lmKHUuaXNaZXJvKCkpcmV0dXJuIG5ldyBjKHUpO2lmKHUuYWJzKCkuZXEoMSkmJnArNDw9UWkpcmV0dXJuIHM9d2UoYyxwKzQsZCkudGltZXMoLjI1KSxzLnM9dS5zLHN9ZWxzZXtpZighdS5zKXJldHVybiBuZXcgYyhOYU4pO2lmKHArNDw9UWkpcmV0dXJuIHM9d2UoYyxwKzQsZCkudGltZXMoLjUpLHMucz11LnMsc31mb3IoYy5wcmVjaXNpb249YT1wKzEwLGMucm91bmRpbmc9MSx0PU1hdGgubWluKDI4LGEvRSsyfDApLGU9dDtlOy0tZSl1PXUuZGl2KHUudGltZXModSkucGx1cygxKS5zcXJ0KCkucGx1cygxKSk7Zm9yKHc9ITEscj1NYXRoLmNlaWwoYS9FKSxuPTEsbD11LnRpbWVzKHUpLHM9bmV3IGModSksaT11O2UhPT0tMTspaWYoaT1pLnRpbWVzKGwpLG89cy5taW51cyhpLmRpdihuKz0yKSksaT1pLnRpbWVzKGwpLHM9by5wbHVzKGkuZGl2KG4rPTIpKSxzLmRbcl0hPT12b2lkIDApZm9yKGU9cjtzLmRbZV09PT1vLmRbZV0mJmUtLTspO3JldHVybiB0JiYocz1zLnRpbWVzKDI8PHQtMSkpLHc9ITAseShzLGMucHJlY2lzaW9uPXAsYy5yb3VuZGluZz1kLCEwKX07bS5pc0Zpbml0ZT1mdW5jdGlvbigpe3JldHVybiEhdGhpcy5kfTttLmlzSW50ZWdlcj1tLmlzSW50PWZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLmQmJlgodGhpcy5lL0UpPnRoaXMuZC5sZW5ndGgtMn07bS5pc05hTj1mdW5jdGlvbigpe3JldHVybiF0aGlzLnN9O20uaXNOZWdhdGl2ZT1tLmlzTmVnPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuczwwfTttLmlzUG9zaXRpdmU9bS5pc1Bvcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnM+MH07bS5pc1plcm89ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMuZCYmdGhpcy5kWzBdPT09MH07bS5sZXNzVGhhbj1tLmx0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmNtcChlKTwwfTttLmxlc3NUaGFuT3JFcXVhbFRvPW0ubHRlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmNtcChlKTwxfTttLmxvZ2FyaXRobT1tLmxvZz1mdW5jdGlvbihlKXt2YXIgcix0LG4saSxvLHMsYSxsLHU9dGhpcyxjPXUuY29uc3RydWN0b3IscD1jLnByZWNpc2lvbixkPWMucm91bmRpbmcsZj01O2lmKGU9PW51bGwpZT1uZXcgYygxMCkscj0hMDtlbHNle2lmKGU9bmV3IGMoZSksdD1lLmQsZS5zPDB8fCF0fHwhdFswXXx8ZS5lcSgxKSlyZXR1cm4gbmV3IGMoTmFOKTtyPWUuZXEoMTApfWlmKHQ9dS5kLHUuczwwfHwhdHx8IXRbMF18fHUuZXEoMSkpcmV0dXJuIG5ldyBjKHQmJiF0WzBdPy0xLzA6dS5zIT0xP05hTjp0PzA6MS8wKTtpZihyKWlmKHQubGVuZ3RoPjEpbz0hMDtlbHNle2ZvcihpPXRbMF07aSUxMD09PTA7KWkvPTEwO289aSE9PTF9aWYodz0hMSxhPXArZixzPUplKHUsYSksbj1yP2huKGMsYSsxMCk6SmUoZSxhKSxsPUwocyxuLGEsMSksbHQobC5kLGk9cCxkKSlkbyBpZihhKz0xMCxzPUplKHUsYSksbj1yP2huKGMsYSsxMCk6SmUoZSxhKSxsPUwocyxuLGEsMSksIW8peytKKGwuZCkuc2xpY2UoaSsxLGkrMTUpKzE9PTFlMTQmJihsPXkobCxwKzEsMCkpO2JyZWFrfXdoaWxlKGx0KGwuZCxpKz0xMCxkKSk7cmV0dXJuIHc9ITAseShsLHAsZCl9O20ubWludXM9bS5zdWI9ZnVuY3Rpb24oZSl7dmFyIHIsdCxuLGksbyxzLGEsbCx1LGMscCxkLGY9dGhpcyxoPWYuY29uc3RydWN0b3I7aWYoZT1uZXcgaChlKSwhZi5kfHwhZS5kKXJldHVybiFmLnN8fCFlLnM/ZT1uZXcgaChOYU4pOmYuZD9lLnM9LWUuczplPW5ldyBoKGUuZHx8Zi5zIT09ZS5zP2Y6TmFOKSxlO2lmKGYucyE9ZS5zKXJldHVybiBlLnM9LWUucyxmLnBsdXMoZSk7aWYodT1mLmQsZD1lLmQsYT1oLnByZWNpc2lvbixsPWgucm91bmRpbmcsIXVbMF18fCFkWzBdKXtpZihkWzBdKWUucz0tZS5zO2Vsc2UgaWYodVswXSllPW5ldyBoKGYpO2Vsc2UgcmV0dXJuIG5ldyBoKGw9PT0zPy0wOjApO3JldHVybiB3P3koZSxhLGwpOmV9aWYodD1YKGUuZS9FKSxjPVgoZi5lL0UpLHU9dS5zbGljZSgpLG89Yy10LG8pe2ZvcihwPW88MCxwPyhyPXUsbz0tbyxzPWQubGVuZ3RoKToocj1kLHQ9YyxzPXUubGVuZ3RoKSxuPU1hdGgubWF4KE1hdGguY2VpbChhL0UpLHMpKzIsbz5uJiYobz1uLHIubGVuZ3RoPTEpLHIucmV2ZXJzZSgpLG49bztuLS07KXIucHVzaCgwKTtyLnJldmVyc2UoKX1lbHNle2ZvcihuPXUubGVuZ3RoLHM9ZC5sZW5ndGgscD1uPHMscCYmKHM9biksbj0wO248cztuKyspaWYodVtuXSE9ZFtuXSl7cD11W25dPGRbbl07YnJlYWt9bz0wfWZvcihwJiYocj11LHU9ZCxkPXIsZS5zPS1lLnMpLHM9dS5sZW5ndGgsbj1kLmxlbmd0aC1zO24+MDstLW4pdVtzKytdPTA7Zm9yKG49ZC5sZW5ndGg7bj5vOyl7aWYodVstLW5dPGRbbl0pe2ZvcihpPW47aSYmdVstLWldPT09MDspdVtpXT1mZS0xOy0tdVtpXSx1W25dKz1mZX11W25dLT1kW25dfWZvcig7dVstLXNdPT09MDspdS5wb3AoKTtmb3IoO3VbMF09PT0wO3Uuc2hpZnQoKSktLXQ7cmV0dXJuIHVbMF0/KGUuZD11LGUuZT1ibih1LHQpLHc/eShlLGEsbCk6ZSk6bmV3IGgobD09PTM/LTA6MCl9O20ubW9kdWxvPW0ubW9kPWZ1bmN0aW9uKGUpe3ZhciByLHQ9dGhpcyxuPXQuY29uc3RydWN0b3I7cmV0dXJuIGU9bmV3IG4oZSksIXQuZHx8IWUuc3x8ZS5kJiYhZS5kWzBdP25ldyBuKE5hTik6IWUuZHx8dC5kJiYhdC5kWzBdP3kobmV3IG4odCksbi5wcmVjaXNpb24sbi5yb3VuZGluZyk6KHc9ITEsbi5tb2R1bG89PTk/KHI9TCh0LGUuYWJzKCksMCwzLDEpLHIucyo9ZS5zKTpyPUwodCxlLDAsbi5tb2R1bG8sMSkscj1yLnRpbWVzKGUpLHc9ITAsdC5taW51cyhyKSl9O20ubmF0dXJhbEV4cG9uZW50aWFsPW0uZXhwPWZ1bmN0aW9uKCl7cmV0dXJuIFdpKHRoaXMpfTttLm5hdHVyYWxMb2dhcml0aG09bS5sbj1mdW5jdGlvbigpe3JldHVybiBKZSh0aGlzKX07bS5uZWdhdGVkPW0ubmVnPWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHRoaXMuY29uc3RydWN0b3IodGhpcyk7cmV0dXJuIGUucz0tZS5zLHkoZSl9O20ucGx1cz1tLmFkZD1mdW5jdGlvbihlKXt2YXIgcix0LG4saSxvLHMsYSxsLHUsYyxwPXRoaXMsZD1wLmNvbnN0cnVjdG9yO2lmKGU9bmV3IGQoZSksIXAuZHx8IWUuZClyZXR1cm4hcC5zfHwhZS5zP2U9bmV3IGQoTmFOKTpwLmR8fChlPW5ldyBkKGUuZHx8cC5zPT09ZS5zP3A6TmFOKSksZTtpZihwLnMhPWUucylyZXR1cm4gZS5zPS1lLnMscC5taW51cyhlKTtpZih1PXAuZCxjPWUuZCxhPWQucHJlY2lzaW9uLGw9ZC5yb3VuZGluZywhdVswXXx8IWNbMF0pcmV0dXJuIGNbMF18fChlPW5ldyBkKHApKSx3P3koZSxhLGwpOmU7aWYobz1YKHAuZS9FKSxuPVgoZS5lL0UpLHU9dS5zbGljZSgpLGk9by1uLGkpe2ZvcihpPDA/KHQ9dSxpPS1pLHM9Yy5sZW5ndGgpOih0PWMsbj1vLHM9dS5sZW5ndGgpLG89TWF0aC5jZWlsKGEvRSkscz1vPnM/bysxOnMrMSxpPnMmJihpPXMsdC5sZW5ndGg9MSksdC5yZXZlcnNlKCk7aS0tOyl0LnB1c2goMCk7dC5yZXZlcnNlKCl9Zm9yKHM9dS5sZW5ndGgsaT1jLmxlbmd0aCxzLWk8MCYmKGk9cyx0PWMsYz11LHU9dCkscj0wO2k7KXI9KHVbLS1pXT11W2ldK2NbaV0rcikvZmV8MCx1W2ldJT1mZTtmb3IociYmKHUudW5zaGlmdChyKSwrK24pLHM9dS5sZW5ndGg7dVstLXNdPT0wOyl1LnBvcCgpO3JldHVybiBlLmQ9dSxlLmU9Ym4odSxuKSx3P3koZSxhLGwpOmV9O20ucHJlY2lzaW9uPW0uc2Q9ZnVuY3Rpb24oZSl7dmFyIHIsdD10aGlzO2lmKGUhPT12b2lkIDAmJmUhPT0hIWUmJmUhPT0xJiZlIT09MCl0aHJvdyBFcnJvcihIZStlKTtyZXR1cm4gdC5kPyhyPVdzKHQuZCksZSYmdC5lKzE+ciYmKHI9dC5lKzEpKTpyPU5hTixyfTttLnJvdW5kPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxyPWUuY29uc3RydWN0b3I7cmV0dXJuIHkobmV3IHIoZSksZS5lKzEsci5yb3VuZGluZyl9O20uc2luZT1tLnNpbj1mdW5jdGlvbigpe3ZhciBlLHIsdD10aGlzLG49dC5jb25zdHJ1Y3RvcjtyZXR1cm4gdC5pc0Zpbml0ZSgpP3QuaXNaZXJvKCk/bmV3IG4odCk6KGU9bi5wcmVjaXNpb24scj1uLnJvdW5kaW5nLG4ucHJlY2lzaW9uPWUrTWF0aC5tYXgodC5lLHQuc2QoKSkrRSxuLnJvdW5kaW5nPTEsdD1JcChuLFlzKG4sdCkpLG4ucHJlY2lzaW9uPWUsbi5yb3VuZGluZz1yLHkoRmU+Mj90Lm5lZygpOnQsZSxyLCEwKSk6bmV3IG4oTmFOKX07bS5zcXVhcmVSb290PW0uc3FydD1mdW5jdGlvbigpe3ZhciBlLHIsdCxuLGksbyxzPXRoaXMsYT1zLmQsbD1zLmUsdT1zLnMsYz1zLmNvbnN0cnVjdG9yO2lmKHUhPT0xfHwhYXx8IWFbMF0pcmV0dXJuIG5ldyBjKCF1fHx1PDAmJighYXx8YVswXSk/TmFOOmE/czoxLzApO2Zvcih3PSExLHU9TWF0aC5zcXJ0KCtzKSx1PT0wfHx1PT0xLzA/KHI9SihhKSwoci5sZW5ndGgrbCklMj09MCYmKHIrPVwiMFwiKSx1PU1hdGguc3FydChyKSxsPVgoKGwrMSkvMiktKGw8MHx8bCUyKSx1PT0xLzA/cj1cIjVlXCIrbDoocj11LnRvRXhwb25lbnRpYWwoKSxyPXIuc2xpY2UoMCxyLmluZGV4T2YoXCJlXCIpKzEpK2wpLG49bmV3IGMocikpOm49bmV3IGModS50b1N0cmluZygpKSx0PShsPWMucHJlY2lzaW9uKSszOzspaWYobz1uLG49by5wbHVzKEwocyxvLHQrMiwxKSkudGltZXMoLjUpLEooby5kKS5zbGljZSgwLHQpPT09KHI9SihuLmQpKS5zbGljZSgwLHQpKWlmKHI9ci5zbGljZSh0LTMsdCsxKSxyPT1cIjk5OTlcInx8IWkmJnI9PVwiNDk5OVwiKXtpZighaSYmKHkobyxsKzEsMCksby50aW1lcyhvKS5lcShzKSkpe249bzticmVha310Kz00LGk9MX1lbHNleyghK3J8fCErci5zbGljZSgxKSYmci5jaGFyQXQoMCk9PVwiNVwiKSYmKHkobixsKzEsMSksZT0hbi50aW1lcyhuKS5lcShzKSk7YnJlYWt9cmV0dXJuIHc9ITAseShuLGwsYy5yb3VuZGluZyxlKX07bS50YW5nZW50PW0udGFuPWZ1bmN0aW9uKCl7dmFyIGUscix0PXRoaXMsbj10LmNvbnN0cnVjdG9yO3JldHVybiB0LmlzRmluaXRlKCk/dC5pc1plcm8oKT9uZXcgbih0KTooZT1uLnByZWNpc2lvbixyPW4ucm91bmRpbmcsbi5wcmVjaXNpb249ZSsxMCxuLnJvdW5kaW5nPTEsdD10LnNpbigpLHQucz0xLHQ9TCh0LG5ldyBuKDEpLm1pbnVzKHQudGltZXModCkpLnNxcnQoKSxlKzEwLDApLG4ucHJlY2lzaW9uPWUsbi5yb3VuZGluZz1yLHkoRmU9PTJ8fEZlPT00P3QubmVnKCk6dCxlLHIsITApKTpuZXcgbihOYU4pfTttLnRpbWVzPW0ubXVsPWZ1bmN0aW9uKGUpe3ZhciByLHQsbixpLG8scyxhLGwsdSxjPXRoaXMscD1jLmNvbnN0cnVjdG9yLGQ9Yy5kLGY9KGU9bmV3IHAoZSkpLmQ7aWYoZS5zKj1jLnMsIWR8fCFkWzBdfHwhZnx8IWZbMF0pcmV0dXJuIG5ldyBwKCFlLnN8fGQmJiFkWzBdJiYhZnx8ZiYmIWZbMF0mJiFkP05hTjohZHx8IWY/ZS5zLzA6ZS5zKjApO2Zvcih0PVgoYy5lL0UpK1goZS5lL0UpLGw9ZC5sZW5ndGgsdT1mLmxlbmd0aCxsPHUmJihvPWQsZD1mLGY9byxzPWwsbD11LHU9cyksbz1bXSxzPWwrdSxuPXM7bi0tOylvLnB1c2goMCk7Zm9yKG49dTstLW4+PTA7KXtmb3Iocj0wLGk9bCtuO2k+bjspYT1vW2ldK2Zbbl0qZFtpLW4tMV0rcixvW2ktLV09YSVmZXwwLHI9YS9mZXwwO29baV09KG9baV0rciklZmV8MH1mb3IoOyFvWy0tc107KW8ucG9wKCk7cmV0dXJuIHI/Kyt0Om8uc2hpZnQoKSxlLmQ9byxlLmU9Ym4obyx0KSx3P3koZSxwLnByZWNpc2lvbixwLnJvdW5kaW5nKTplfTttLnRvQmluYXJ5PWZ1bmN0aW9uKGUscil7cmV0dXJuIEppKHRoaXMsMixlLHIpfTttLnRvRGVjaW1hbFBsYWNlcz1tLnRvRFA9ZnVuY3Rpb24oZSxyKXt2YXIgdD10aGlzLG49dC5jb25zdHJ1Y3RvcjtyZXR1cm4gdD1uZXcgbih0KSxlPT09dm9pZCAwP3Q6KGllKGUsMCxLZSkscj09PXZvaWQgMD9yPW4ucm91bmRpbmc6aWUociwwLDgpLHkodCxlK3QuZSsxLHIpKX07bS50b0V4cG9uZW50aWFsPWZ1bmN0aW9uKGUscil7dmFyIHQsbj10aGlzLGk9bi5jb25zdHJ1Y3RvcjtyZXR1cm4gZT09PXZvaWQgMD90PXhlKG4sITApOihpZShlLDAsS2UpLHI9PT12b2lkIDA/cj1pLnJvdW5kaW5nOmllKHIsMCw4KSxuPXkobmV3IGkobiksZSsxLHIpLHQ9eGUobiwhMCxlKzEpKSxuLmlzTmVnKCkmJiFuLmlzWmVybygpP1wiLVwiK3Q6dH07bS50b0ZpeGVkPWZ1bmN0aW9uKGUscil7dmFyIHQsbixpPXRoaXMsbz1pLmNvbnN0cnVjdG9yO3JldHVybiBlPT09dm9pZCAwP3Q9eGUoaSk6KGllKGUsMCxLZSkscj09PXZvaWQgMD9yPW8ucm91bmRpbmc6aWUociwwLDgpLG49eShuZXcgbyhpKSxlK2kuZSsxLHIpLHQ9eGUobiwhMSxlK24uZSsxKSksaS5pc05lZygpJiYhaS5pc1plcm8oKT9cIi1cIit0OnR9O20udG9GcmFjdGlvbj1mdW5jdGlvbihlKXt2YXIgcix0LG4saSxvLHMsYSxsLHUsYyxwLGQsZj10aGlzLGg9Zi5kLGc9Zi5jb25zdHJ1Y3RvcjtpZighaClyZXR1cm4gbmV3IGcoZik7aWYodT10PW5ldyBnKDEpLG49bD1uZXcgZygwKSxyPW5ldyBnKG4pLG89ci5lPVdzKGgpLWYuZS0xLHM9byVFLHIuZFswXT1VKDEwLHM8MD9FK3M6cyksZT09bnVsbCllPW8+MD9yOnU7ZWxzZXtpZihhPW5ldyBnKGUpLCFhLmlzSW50KCl8fGEubHQodSkpdGhyb3cgRXJyb3IoSGUrYSk7ZT1hLmd0KHIpP28+MD9yOnU6YX1mb3Iodz0hMSxhPW5ldyBnKEooaCkpLGM9Zy5wcmVjaXNpb24sZy5wcmVjaXNpb249bz1oLmxlbmd0aCpFKjI7cD1MKGEsciwwLDEsMSksaT10LnBsdXMocC50aW1lcyhuKSksaS5jbXAoZSkhPTE7KXQ9bixuPWksaT11LHU9bC5wbHVzKHAudGltZXMoaSkpLGw9aSxpPXIscj1hLm1pbnVzKHAudGltZXMoaSkpLGE9aTtyZXR1cm4gaT1MKGUubWludXModCksbiwwLDEsMSksbD1sLnBsdXMoaS50aW1lcyh1KSksdD10LnBsdXMoaS50aW1lcyhuKSksbC5zPXUucz1mLnMsZD1MKHUsbixvLDEpLm1pbnVzKGYpLmFicygpLmNtcChMKGwsdCxvLDEpLm1pbnVzKGYpLmFicygpKTwxP1t1LG5dOltsLHRdLGcucHJlY2lzaW9uPWMsdz0hMCxkfTttLnRvSGV4YWRlY2ltYWw9bS50b0hleD1mdW5jdGlvbihlLHIpe3JldHVybiBKaSh0aGlzLDE2LGUscil9O20udG9OZWFyZXN0PWZ1bmN0aW9uKGUscil7dmFyIHQ9dGhpcyxuPXQuY29uc3RydWN0b3I7aWYodD1uZXcgbih0KSxlPT1udWxsKXtpZighdC5kKXJldHVybiB0O2U9bmV3IG4oMSkscj1uLnJvdW5kaW5nfWVsc2V7aWYoZT1uZXcgbihlKSxyPT09dm9pZCAwP3I9bi5yb3VuZGluZzppZShyLDAsOCksIXQuZClyZXR1cm4gZS5zP3Q6ZTtpZighZS5kKXJldHVybiBlLnMmJihlLnM9dC5zKSxlfXJldHVybiBlLmRbMF0/KHc9ITEsdD1MKHQsZSwwLHIsMSkudGltZXMoZSksdz0hMCx5KHQpKTooZS5zPXQucyx0PWUpLHR9O20udG9OdW1iZXI9ZnVuY3Rpb24oKXtyZXR1cm4rdGhpc307bS50b09jdGFsPWZ1bmN0aW9uKGUscil7cmV0dXJuIEppKHRoaXMsOCxlLHIpfTttLnRvUG93ZXI9bS5wb3c9ZnVuY3Rpb24oZSl7dmFyIHIsdCxuLGksbyxzLGE9dGhpcyxsPWEuY29uc3RydWN0b3IsdT0rKGU9bmV3IGwoZSkpO2lmKCFhLmR8fCFlLmR8fCFhLmRbMF18fCFlLmRbMF0pcmV0dXJuIG5ldyBsKFUoK2EsdSkpO2lmKGE9bmV3IGwoYSksYS5lcSgxKSlyZXR1cm4gYTtpZihuPWwucHJlY2lzaW9uLG89bC5yb3VuZGluZyxlLmVxKDEpKXJldHVybiB5KGEsbixvKTtpZihyPVgoZS5lL0UpLHI+PWUuZC5sZW5ndGgtMSYmKHQ9dTwwPy11OnUpPD1TcClyZXR1cm4gaT1KcyhsLGEsdCxuKSxlLnM8MD9uZXcgbCgxKS5kaXYoaSk6eShpLG4sbyk7aWYocz1hLnMsczwwKXtpZihyPGUuZC5sZW5ndGgtMSlyZXR1cm4gbmV3IGwoTmFOKTtpZigoZS5kW3JdJjEpPT0wJiYocz0xKSxhLmU9PTAmJmEuZFswXT09MSYmYS5kLmxlbmd0aD09MSlyZXR1cm4gYS5zPXMsYX1yZXR1cm4gdD1VKCthLHUpLHI9dD09MHx8IWlzRmluaXRlKHQpP1godSooTWF0aC5sb2coXCIwLlwiK0ooYS5kKSkvTWF0aC5MTjEwK2EuZSsxKSk6bmV3IGwodCtcIlwiKS5lLHI+bC5tYXhFKzF8fHI8bC5taW5FLTE/bmV3IGwocj4wP3MvMDowKToodz0hMSxsLnJvdW5kaW5nPWEucz0xLHQ9TWF0aC5taW4oMTIsKHIrXCJcIikubGVuZ3RoKSxpPVdpKGUudGltZXMoSmUoYSxuK3QpKSxuKSxpLmQmJihpPXkoaSxuKzUsMSksbHQoaS5kLG4sbykmJihyPW4rMTAsaT15KFdpKGUudGltZXMoSmUoYSxyK3QpKSxyKSxyKzUsMSksK0ooaS5kKS5zbGljZShuKzEsbisxNSkrMT09MWUxNCYmKGk9eShpLG4rMSwwKSkpKSxpLnM9cyx3PSEwLGwucm91bmRpbmc9byx5KGksbixvKSl9O20udG9QcmVjaXNpb249ZnVuY3Rpb24oZSxyKXt2YXIgdCxuPXRoaXMsaT1uLmNvbnN0cnVjdG9yO3JldHVybiBlPT09dm9pZCAwP3Q9eGUobixuLmU8PWkudG9FeHBOZWd8fG4uZT49aS50b0V4cFBvcyk6KGllKGUsMSxLZSkscj09PXZvaWQgMD9yPWkucm91bmRpbmc6aWUociwwLDgpLG49eShuZXcgaShuKSxlLHIpLHQ9eGUobixlPD1uLmV8fG4uZTw9aS50b0V4cE5lZyxlKSksbi5pc05lZygpJiYhbi5pc1plcm8oKT9cIi1cIit0OnR9O20udG9TaWduaWZpY2FudERpZ2l0cz1tLnRvU0Q9ZnVuY3Rpb24oZSxyKXt2YXIgdD10aGlzLG49dC5jb25zdHJ1Y3RvcjtyZXR1cm4gZT09PXZvaWQgMD8oZT1uLnByZWNpc2lvbixyPW4ucm91bmRpbmcpOihpZShlLDEsS2UpLHI9PT12b2lkIDA/cj1uLnJvdW5kaW5nOmllKHIsMCw4KSkseShuZXcgbih0KSxlLHIpfTttLnRvU3RyaW5nPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxyPWUuY29uc3RydWN0b3IsdD14ZShlLGUuZTw9ci50b0V4cE5lZ3x8ZS5lPj1yLnRvRXhwUG9zKTtyZXR1cm4gZS5pc05lZygpJiYhZS5pc1plcm8oKT9cIi1cIit0OnR9O20udHJ1bmNhdGVkPW0udHJ1bmM9ZnVuY3Rpb24oKXtyZXR1cm4geShuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzKSx0aGlzLmUrMSwxKX07bS52YWx1ZU9mPW0udG9KU09OPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxyPWUuY29uc3RydWN0b3IsdD14ZShlLGUuZTw9ci50b0V4cE5lZ3x8ZS5lPj1yLnRvRXhwUG9zKTtyZXR1cm4gZS5pc05lZygpP1wiLVwiK3Q6dH07ZnVuY3Rpb24gSihlKXt2YXIgcix0LG4saT1lLmxlbmd0aC0xLG89XCJcIixzPWVbMF07aWYoaT4wKXtmb3Iobys9cyxyPTE7cjxpO3IrKyluPWVbcl0rXCJcIix0PUUtbi5sZW5ndGgsdCYmKG8rPVdlKHQpKSxvKz1uO3M9ZVtyXSxuPXMrXCJcIix0PUUtbi5sZW5ndGgsdCYmKG8rPVdlKHQpKX1lbHNlIGlmKHM9PT0wKXJldHVyblwiMFwiO2Zvcig7cyUxMD09PTA7KXMvPTEwO3JldHVybiBvK3N9ZnVuY3Rpb24gaWUoZSxyLHQpe2lmKGUhPT1+fmV8fGU8cnx8ZT50KXRocm93IEVycm9yKEhlK2UpfWZ1bmN0aW9uIGx0KGUscix0LG4pe3ZhciBpLG8scyxhO2ZvcihvPWVbMF07bz49MTA7by89MTApLS1yO3JldHVybi0tcjwwPyhyKz1FLGk9MCk6KGk9TWF0aC5jZWlsKChyKzEpL0UpLHIlPUUpLG89VSgxMCxFLXIpLGE9ZVtpXSVvfDAsbj09bnVsbD9yPDM/KHI9PTA/YT1hLzEwMHwwOnI9PTEmJihhPWEvMTB8MCkscz10PDQmJmE9PTk5OTk5fHx0PjMmJmE9PTQ5OTk5fHxhPT01ZTR8fGE9PTApOnM9KHQ8NCYmYSsxPT1vfHx0PjMmJmErMT09by8yKSYmKGVbaSsxXS9vLzEwMHwwKT09VSgxMCxyLTIpLTF8fChhPT1vLzJ8fGE9PTApJiYoZVtpKzFdL28vMTAwfDApPT0wOnI8ND8ocj09MD9hPWEvMWUzfDA6cj09MT9hPWEvMTAwfDA6cj09MiYmKGE9YS8xMHwwKSxzPShufHx0PDQpJiZhPT05OTk5fHwhbiYmdD4zJiZhPT00OTk5KTpzPSgobnx8dDw0KSYmYSsxPT1vfHwhbiYmdD4zJiZhKzE9PW8vMikmJihlW2krMV0vby8xZTN8MCk9PVUoMTAsci0zKS0xLHN9ZnVuY3Rpb24gZG4oZSxyLHQpe2Zvcih2YXIgbixpPVswXSxvLHM9MCxhPWUubGVuZ3RoO3M8YTspe2ZvcihvPWkubGVuZ3RoO28tLTspaVtvXSo9cjtmb3IoaVswXSs9VWkuaW5kZXhPZihlLmNoYXJBdChzKyspKSxuPTA7bjxpLmxlbmd0aDtuKyspaVtuXT50LTEmJihpW24rMV09PT12b2lkIDAmJihpW24rMV09MCksaVtuKzFdKz1pW25dL3R8MCxpW25dJT10KX1yZXR1cm4gaS5yZXZlcnNlKCl9ZnVuY3Rpb24gQXAoZSxyKXt2YXIgdCxuLGk7aWYoci5pc1plcm8oKSlyZXR1cm4gcjtuPXIuZC5sZW5ndGgsbjwzMj8odD1NYXRoLmNlaWwobi8zKSxpPSgxL0VuKDQsdCkpLnRvU3RyaW5nKCkpOih0PTE2LGk9XCIyLjMyODMwNjQzNjUzODY5NjI4OTA2MjVlLTEwXCIpLGUucHJlY2lzaW9uKz10LHI9UHIoZSwxLHIudGltZXMoaSksbmV3IGUoMSkpO2Zvcih2YXIgbz10O28tLTspe3ZhciBzPXIudGltZXMocik7cj1zLnRpbWVzKHMpLm1pbnVzKHMpLnRpbWVzKDgpLnBsdXMoMSl9cmV0dXJuIGUucHJlY2lzaW9uLT10LHJ9dmFyIEw9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKG4saSxvKXt2YXIgcyxhPTAsbD1uLmxlbmd0aDtmb3Iobj1uLnNsaWNlKCk7bC0tOylzPW5bbF0qaSthLG5bbF09cyVvfDAsYT1zL298MDtyZXR1cm4gYSYmbi51bnNoaWZ0KGEpLG59ZnVuY3Rpb24gcihuLGksbyxzKXt2YXIgYSxsO2lmKG8hPXMpbD1vPnM/MTotMTtlbHNlIGZvcihhPWw9MDthPG87YSsrKWlmKG5bYV0hPWlbYV0pe2w9blthXT5pW2FdPzE6LTE7YnJlYWt9cmV0dXJuIGx9ZnVuY3Rpb24gdChuLGksbyxzKXtmb3IodmFyIGE9MDtvLS07KW5bb10tPWEsYT1uW29dPGlbb10/MTowLG5bb109YSpzK25bb10taVtvXTtmb3IoOyFuWzBdJiZuLmxlbmd0aD4xOyluLnNoaWZ0KCl9cmV0dXJuIGZ1bmN0aW9uKG4saSxvLHMsYSxsKXt2YXIgdSxjLHAsZCxmLGgsZyxTLFAsUixiLEQsbWUsYWUsSHIsVix0ZSxDZSxILGZyLGp0PW4uY29uc3RydWN0b3Isbmk9bi5zPT1pLnM/MTotMSxLPW4uZCxfPWkuZDtpZighS3x8IUtbMF18fCFffHwhX1swXSlyZXR1cm4gbmV3IGp0KCFuLnN8fCFpLnN8fChLP18mJktbMF09PV9bMF06IV8pP05hTjpLJiZLWzBdPT0wfHwhXz9uaSowOm5pLzApO2ZvcihsPyhmPTEsYz1uLmUtaS5lKToobD1mZSxmPUUsYz1YKG4uZS9mKS1YKGkuZS9mKSksSD1fLmxlbmd0aCx0ZT1LLmxlbmd0aCxQPW5ldyBqdChuaSksUj1QLmQ9W10scD0wO19bcF09PShLW3BdfHwwKTtwKyspO2lmKF9bcF0+KEtbcF18fDApJiZjLS0sbz09bnVsbD8oYWU9bz1qdC5wcmVjaXNpb24scz1qdC5yb3VuZGluZyk6YT9hZT1vKyhuLmUtaS5lKSsxOmFlPW8sYWU8MClSLnB1c2goMSksaD0hMDtlbHNle2lmKGFlPWFlL2YrMnwwLHA9MCxIPT0xKXtmb3IoZD0wLF89X1swXSxhZSsrOyhwPHRlfHxkKSYmYWUtLTtwKyspSHI9ZCpsKyhLW3BdfHwwKSxSW3BdPUhyL198MCxkPUhyJV98MDtoPWR8fHA8dGV9ZWxzZXtmb3IoZD1sLyhfWzBdKzEpfDAsZD4xJiYoXz1lKF8sZCxsKSxLPWUoSyxkLGwpLEg9Xy5sZW5ndGgsdGU9Sy5sZW5ndGgpLFY9SCxiPUsuc2xpY2UoMCxIKSxEPWIubGVuZ3RoO0Q8SDspYltEKytdPTA7ZnI9Xy5zbGljZSgpLGZyLnVuc2hpZnQoMCksQ2U9X1swXSxfWzFdPj1sLzImJisrQ2U7ZG8gZD0wLHU9cihfLGIsSCxEKSx1PDA/KG1lPWJbMF0sSCE9RCYmKG1lPW1lKmwrKGJbMV18fDApKSxkPW1lL0NlfDAsZD4xPyhkPj1sJiYoZD1sLTEpLGc9ZShfLGQsbCksUz1nLmxlbmd0aCxEPWIubGVuZ3RoLHU9cihnLGIsUyxEKSx1PT0xJiYoZC0tLHQoZyxIPFM/ZnI6XyxTLGwpKSk6KGQ9PTAmJih1PWQ9MSksZz1fLnNsaWNlKCkpLFM9Zy5sZW5ndGgsUzxEJiZnLnVuc2hpZnQoMCksdChiLGcsRCxsKSx1PT0tMSYmKEQ9Yi5sZW5ndGgsdT1yKF8sYixILEQpLHU8MSYmKGQrKyx0KGIsSDxEP2ZyOl8sRCxsKSkpLEQ9Yi5sZW5ndGgpOnU9PT0wJiYoZCsrLGI9WzBdKSxSW3ArK109ZCx1JiZiWzBdP2JbRCsrXT1LW1ZdfHwwOihiPVtLW1ZdXSxEPTEpO3doaWxlKChWKys8dGV8fGJbMF0hPT12b2lkIDApJiZhZS0tKTtoPWJbMF0hPT12b2lkIDB9UlswXXx8Ui5zaGlmdCgpfWlmKGY9PTEpUC5lPWMsVnM9aDtlbHNle2ZvcihwPTEsZD1SWzBdO2Q+PTEwO2QvPTEwKXArKztQLmU9cCtjKmYtMSx5KFAsYT9vK1AuZSsxOm8scyxoKX1yZXR1cm4gUH19KCk7ZnVuY3Rpb24geShlLHIsdCxuKXt2YXIgaSxvLHMsYSxsLHUsYyxwLGQsZj1lLmNvbnN0cnVjdG9yO2U6aWYociE9bnVsbCl7aWYocD1lLmQsIXApcmV0dXJuIGU7Zm9yKGk9MSxhPXBbMF07YT49MTA7YS89MTApaSsrO2lmKG89ci1pLG88MClvKz1FLHM9cixjPXBbZD0wXSxsPWMvVSgxMCxpLXMtMSklMTB8MDtlbHNlIGlmKGQ9TWF0aC5jZWlsKChvKzEpL0UpLGE9cC5sZW5ndGgsZD49YSlpZihuKXtmb3IoO2ErKzw9ZDspcC5wdXNoKDApO2M9bD0wLGk9MSxvJT1FLHM9by1FKzF9ZWxzZSBicmVhayBlO2Vsc2V7Zm9yKGM9YT1wW2RdLGk9MTthPj0xMDthLz0xMClpKys7byU9RSxzPW8tRStpLGw9czwwPzA6Yy9VKDEwLGktcy0xKSUxMHwwfWlmKG49bnx8cjwwfHxwW2QrMV0hPT12b2lkIDB8fChzPDA/YzpjJVUoMTAsaS1zLTEpKSx1PXQ8ND8obHx8bikmJih0PT0wfHx0PT0oZS5zPDA/MzoyKSk6bD41fHxsPT01JiYodD09NHx8bnx8dD09NiYmKG8+MD9zPjA/Yy9VKDEwLGktcyk6MDpwW2QtMV0pJTEwJjF8fHQ9PShlLnM8MD84OjcpKSxyPDF8fCFwWzBdKXJldHVybiBwLmxlbmd0aD0wLHU/KHItPWUuZSsxLHBbMF09VSgxMCwoRS1yJUUpJUUpLGUuZT0tcnx8MCk6cFswXT1lLmU9MCxlO2lmKG89PTA/KHAubGVuZ3RoPWQsYT0xLGQtLSk6KHAubGVuZ3RoPWQrMSxhPVUoMTAsRS1vKSxwW2RdPXM+MD8oYy9VKDEwLGktcyklVSgxMCxzKXwwKSphOjApLHUpZm9yKDs7KWlmKGQ9PTApe2ZvcihvPTEscz1wWzBdO3M+PTEwO3MvPTEwKW8rKztmb3Iocz1wWzBdKz1hLGE9MTtzPj0xMDtzLz0xMClhKys7byE9YSYmKGUuZSsrLHBbMF09PWZlJiYocFswXT0xKSk7YnJlYWt9ZWxzZXtpZihwW2RdKz1hLHBbZF0hPWZlKWJyZWFrO3BbZC0tXT0wLGE9MX1mb3Iobz1wLmxlbmd0aDtwWy0tb109PT0wOylwLnBvcCgpfXJldHVybiB3JiYoZS5lPmYubWF4RT8oZS5kPW51bGwsZS5lPU5hTik6ZS5lPGYubWluRSYmKGUuZT0wLGUuZD1bMF0pKSxlfWZ1bmN0aW9uIHhlKGUscix0KXtpZighZS5pc0Zpbml0ZSgpKXJldHVybiBLcyhlKTt2YXIgbixpPWUuZSxvPUooZS5kKSxzPW8ubGVuZ3RoO3JldHVybiByPyh0JiYobj10LXMpPjA/bz1vLmNoYXJBdCgwKStcIi5cIitvLnNsaWNlKDEpK1dlKG4pOnM+MSYmKG89by5jaGFyQXQoMCkrXCIuXCIrby5zbGljZSgxKSksbz1vKyhlLmU8MD9cImVcIjpcImUrXCIpK2UuZSk6aTwwPyhvPVwiMC5cIitXZSgtaS0xKStvLHQmJihuPXQtcyk+MCYmKG8rPVdlKG4pKSk6aT49cz8obys9V2UoaSsxLXMpLHQmJihuPXQtaS0xKT4wJiYobz1vK1wiLlwiK1dlKG4pKSk6KChuPWkrMSk8cyYmKG89by5zbGljZSgwLG4pK1wiLlwiK28uc2xpY2UobikpLHQmJihuPXQtcyk+MCYmKGkrMT09PXMmJihvKz1cIi5cIiksbys9V2UobikpKSxvfWZ1bmN0aW9uIGJuKGUscil7dmFyIHQ9ZVswXTtmb3Iocio9RTt0Pj0xMDt0Lz0xMClyKys7cmV0dXJuIHJ9ZnVuY3Rpb24gaG4oZSxyLHQpe2lmKHI+UnApdGhyb3cgdz0hMCx0JiYoZS5wcmVjaXNpb249dCksRXJyb3IoQnMpO3JldHVybiB5KG5ldyBlKGZuKSxyLDEsITApfWZ1bmN0aW9uIHdlKGUscix0KXtpZihyPlFpKXRocm93IEVycm9yKEJzKTtyZXR1cm4geShuZXcgZShnbikscix0LCEwKX1mdW5jdGlvbiBXcyhlKXt2YXIgcj1lLmxlbmd0aC0xLHQ9cipFKzE7aWYocj1lW3JdLHIpe2Zvcig7ciUxMD09MDtyLz0xMCl0LS07Zm9yKHI9ZVswXTtyPj0xMDtyLz0xMCl0Kyt9cmV0dXJuIHR9ZnVuY3Rpb24gV2UoZSl7Zm9yKHZhciByPVwiXCI7ZS0tOylyKz1cIjBcIjtyZXR1cm4gcn1mdW5jdGlvbiBKcyhlLHIsdCxuKXt2YXIgaSxvPW5ldyBlKDEpLHM9TWF0aC5jZWlsKG4vRSs0KTtmb3Iodz0hMTs7KXtpZih0JTImJihvPW8udGltZXMocikscXMoby5kLHMpJiYoaT0hMCkpLHQ9WCh0LzIpLHQ9PT0wKXt0PW8uZC5sZW5ndGgtMSxpJiZvLmRbdF09PT0wJiYrK28uZFt0XTticmVha31yPXIudGltZXMocikscXMoci5kLHMpfXJldHVybiB3PSEwLG99ZnVuY3Rpb24gJHMoZSl7cmV0dXJuIGUuZFtlLmQubGVuZ3RoLTFdJjF9ZnVuY3Rpb24gSHMoZSxyLHQpe2Zvcih2YXIgbixpLG89bmV3IGUoclswXSkscz0wOysrczxyLmxlbmd0aDspe2lmKGk9bmV3IGUocltzXSksIWkucyl7bz1pO2JyZWFrfW49by5jbXAoaSksKG49PT10fHxuPT09MCYmby5zPT09dCkmJihvPWkpfXJldHVybiBvfWZ1bmN0aW9uIFdpKGUscil7dmFyIHQsbixpLG8scyxhLGwsdT0wLGM9MCxwPTAsZD1lLmNvbnN0cnVjdG9yLGY9ZC5yb3VuZGluZyxoPWQucHJlY2lzaW9uO2lmKCFlLmR8fCFlLmRbMF18fGUuZT4xNylyZXR1cm4gbmV3IGQoZS5kP2UuZFswXT9lLnM8MD8wOjEvMDoxOmUucz9lLnM8MD8wOmU6TmFOKTtmb3Iocj09bnVsbD8odz0hMSxsPWgpOmw9cixhPW5ldyBkKC4wMzEyNSk7ZS5lPi0yOyllPWUudGltZXMoYSkscCs9NTtmb3Iobj1NYXRoLmxvZyhVKDIscCkpL01hdGguTE4xMCoyKzV8MCxsKz1uLHQ9bz1zPW5ldyBkKDEpLGQucHJlY2lzaW9uPWw7Oyl7aWYobz15KG8udGltZXMoZSksbCwxKSx0PXQudGltZXMoKytjKSxhPXMucGx1cyhMKG8sdCxsLDEpKSxKKGEuZCkuc2xpY2UoMCxsKT09PUoocy5kKS5zbGljZSgwLGwpKXtmb3IoaT1wO2ktLTspcz15KHMudGltZXMocyksbCwxKTtpZihyPT1udWxsKWlmKHU8MyYmbHQocy5kLGwtbixmLHUpKWQucHJlY2lzaW9uPWwrPTEwLHQ9bz1hPW5ldyBkKDEpLGM9MCx1Kys7ZWxzZSByZXR1cm4geShzLGQucHJlY2lzaW9uPWgsZix3PSEwKTtlbHNlIHJldHVybiBkLnByZWNpc2lvbj1oLHN9cz1hfX1mdW5jdGlvbiBKZShlLHIpe3ZhciB0LG4saSxvLHMsYSxsLHUsYyxwLGQsZj0xLGg9MTAsZz1lLFM9Zy5kLFA9Zy5jb25zdHJ1Y3RvcixSPVAucm91bmRpbmcsYj1QLnByZWNpc2lvbjtpZihnLnM8MHx8IVN8fCFTWzBdfHwhZy5lJiZTWzBdPT0xJiZTLmxlbmd0aD09MSlyZXR1cm4gbmV3IFAoUyYmIVNbMF0/LTEvMDpnLnMhPTE/TmFOOlM/MDpnKTtpZihyPT1udWxsPyh3PSExLGM9Yik6Yz1yLFAucHJlY2lzaW9uPWMrPWgsdD1KKFMpLG49dC5jaGFyQXQoMCksTWF0aC5hYnMobz1nLmUpPDE1ZTE0KXtmb3IoO248NyYmbiE9MXx8bj09MSYmdC5jaGFyQXQoMSk+MzspZz1nLnRpbWVzKGUpLHQ9SihnLmQpLG49dC5jaGFyQXQoMCksZisrO289Zy5lLG4+MT8oZz1uZXcgUChcIjAuXCIrdCksbysrKTpnPW5ldyBQKG4rXCIuXCIrdC5zbGljZSgxKSl9ZWxzZSByZXR1cm4gdT1obihQLGMrMixiKS50aW1lcyhvK1wiXCIpLGc9SmUobmV3IFAobitcIi5cIit0LnNsaWNlKDEpKSxjLWgpLnBsdXModSksUC5wcmVjaXNpb249YixyPT1udWxsP3koZyxiLFIsdz0hMCk6Zztmb3IocD1nLGw9cz1nPUwoZy5taW51cygxKSxnLnBsdXMoMSksYywxKSxkPXkoZy50aW1lcyhnKSxjLDEpLGk9Mzs7KXtpZihzPXkocy50aW1lcyhkKSxjLDEpLHU9bC5wbHVzKEwocyxuZXcgUChpKSxjLDEpKSxKKHUuZCkuc2xpY2UoMCxjKT09PUoobC5kKS5zbGljZSgwLGMpKWlmKGw9bC50aW1lcygyKSxvIT09MCYmKGw9bC5wbHVzKGhuKFAsYysyLGIpLnRpbWVzKG8rXCJcIikpKSxsPUwobCxuZXcgUChmKSxjLDEpLHI9PW51bGwpaWYobHQobC5kLGMtaCxSLGEpKVAucHJlY2lzaW9uPWMrPWgsdT1zPWc9TChwLm1pbnVzKDEpLHAucGx1cygxKSxjLDEpLGQ9eShnLnRpbWVzKGcpLGMsMSksaT1hPTE7ZWxzZSByZXR1cm4geShsLFAucHJlY2lzaW9uPWIsUix3PSEwKTtlbHNlIHJldHVybiBQLnByZWNpc2lvbj1iLGw7bD11LGkrPTJ9fWZ1bmN0aW9uIEtzKGUpe3JldHVybiBTdHJpbmcoZS5zKmUucy8wKX1mdW5jdGlvbiBtbihlLHIpe3ZhciB0LG4saTtmb3IoKHQ9ci5pbmRleE9mKFwiLlwiKSk+LTEmJihyPXIucmVwbGFjZShcIi5cIixcIlwiKSksKG49ci5zZWFyY2goL2UvaSkpPjA/KHQ8MCYmKHQ9biksdCs9K3Iuc2xpY2UobisxKSxyPXIuc3Vic3RyaW5nKDAsbikpOnQ8MCYmKHQ9ci5sZW5ndGgpLG49MDtyLmNoYXJDb2RlQXQobik9PT00ODtuKyspO2ZvcihpPXIubGVuZ3RoO3IuY2hhckNvZGVBdChpLTEpPT09NDg7LS1pKTtpZihyPXIuc2xpY2UobixpKSxyKXtpZihpLT1uLGUuZT10PXQtbi0xLGUuZD1bXSxuPSh0KzEpJUUsdDwwJiYobis9RSksbjxpKXtmb3IobiYmZS5kLnB1c2goK3Iuc2xpY2UoMCxuKSksaS09RTtuPGk7KWUuZC5wdXNoKCtyLnNsaWNlKG4sbis9RSkpO3I9ci5zbGljZShuKSxuPUUtci5sZW5ndGh9ZWxzZSBuLT1pO2Zvcig7bi0tOylyKz1cIjBcIjtlLmQucHVzaCgrciksdyYmKGUuZT5lLmNvbnN0cnVjdG9yLm1heEU/KGUuZD1udWxsLGUuZT1OYU4pOmUuZTxlLmNvbnN0cnVjdG9yLm1pbkUmJihlLmU9MCxlLmQ9WzBdKSl9ZWxzZSBlLmU9MCxlLmQ9WzBdO3JldHVybiBlfWZ1bmN0aW9uIENwKGUscil7dmFyIHQsbixpLG8scyxhLGwsdSxjO2lmKHIuaW5kZXhPZihcIl9cIik+LTEpe2lmKHI9ci5yZXBsYWNlKC8oXFxkKV8oPz1cXGQpL2csXCIkMVwiKSxRcy50ZXN0KHIpKXJldHVybiBtbihlLHIpfWVsc2UgaWYocj09PVwiSW5maW5pdHlcInx8cj09PVwiTmFOXCIpcmV0dXJuK3J8fChlLnM9TmFOKSxlLmU9TmFOLGUuZD1udWxsLGU7aWYoUHAudGVzdChyKSl0PTE2LHI9ci50b0xvd2VyQ2FzZSgpO2Vsc2UgaWYodnAudGVzdChyKSl0PTI7ZWxzZSBpZihUcC50ZXN0KHIpKXQ9ODtlbHNlIHRocm93IEVycm9yKEhlK3IpO2ZvcihvPXIuc2VhcmNoKC9wL2kpLG8+MD8obD0rci5zbGljZShvKzEpLHI9ci5zdWJzdHJpbmcoMixvKSk6cj1yLnNsaWNlKDIpLG89ci5pbmRleE9mKFwiLlwiKSxzPW8+PTAsbj1lLmNvbnN0cnVjdG9yLHMmJihyPXIucmVwbGFjZShcIi5cIixcIlwiKSxhPXIubGVuZ3RoLG89YS1vLGk9SnMobixuZXcgbih0KSxvLG8qMikpLHU9ZG4ocix0LGZlKSxjPXUubGVuZ3RoLTEsbz1jO3Vbb109PT0wOy0tbyl1LnBvcCgpO3JldHVybiBvPDA/bmV3IG4oZS5zKjApOihlLmU9Ym4odSxjKSxlLmQ9dSx3PSExLHMmJihlPUwoZSxpLGEqNCkpLGwmJihlPWUudGltZXMoTWF0aC5hYnMobCk8NTQ/VSgyLGwpOmFyLnBvdygyLGwpKSksdz0hMCxlKX1mdW5jdGlvbiBJcChlLHIpe3ZhciB0LG49ci5kLmxlbmd0aDtpZihuPDMpcmV0dXJuIHIuaXNaZXJvKCk/cjpQcihlLDIscixyKTt0PTEuNCpNYXRoLnNxcnQobiksdD10PjE2PzE2OnR8MCxyPXIudGltZXMoMS9Fbig1LHQpKSxyPVByKGUsMixyLHIpO2Zvcih2YXIgaSxvPW5ldyBlKDUpLHM9bmV3IGUoMTYpLGE9bmV3IGUoMjApO3QtLTspaT1yLnRpbWVzKHIpLHI9ci50aW1lcyhvLnBsdXMoaS50aW1lcyhzLnRpbWVzKGkpLm1pbnVzKGEpKSkpO3JldHVybiByfWZ1bmN0aW9uIFByKGUscix0LG4saSl7dmFyIG8scyxhLGwsdT0xLGM9ZS5wcmVjaXNpb24scD1NYXRoLmNlaWwoYy9FKTtmb3Iodz0hMSxsPXQudGltZXModCksYT1uZXcgZShuKTs7KXtpZihzPUwoYS50aW1lcyhsKSxuZXcgZShyKysqcisrKSxjLDEpLGE9aT9uLnBsdXMocyk6bi5taW51cyhzKSxuPUwocy50aW1lcyhsKSxuZXcgZShyKysqcisrKSxjLDEpLHM9YS5wbHVzKG4pLHMuZFtwXSE9PXZvaWQgMCl7Zm9yKG89cDtzLmRbb109PT1hLmRbb10mJm8tLTspO2lmKG89PS0xKWJyZWFrfW89YSxhPW4sbj1zLHM9byx1Kyt9cmV0dXJuIHc9ITAscy5kLmxlbmd0aD1wKzEsc31mdW5jdGlvbiBFbihlLHIpe2Zvcih2YXIgdD1lOy0tcjspdCo9ZTtyZXR1cm4gdH1mdW5jdGlvbiBZcyhlLHIpe3ZhciB0LG49ci5zPDAsaT13ZShlLGUucHJlY2lzaW9uLDEpLG89aS50aW1lcyguNSk7aWYocj1yLmFicygpLHIubHRlKG8pKXJldHVybiBGZT1uPzQ6MSxyO2lmKHQ9ci5kaXZUb0ludChpKSx0LmlzWmVybygpKUZlPW4/MzoyO2Vsc2V7aWYocj1yLm1pbnVzKHQudGltZXMoaSkpLHIubHRlKG8pKXJldHVybiBGZT0kcyh0KT9uPzI6MzpuPzQ6MSxyO0ZlPSRzKHQpP24/MTo0Om4/MzoyfXJldHVybiByLm1pbnVzKGkpLmFicygpfWZ1bmN0aW9uIEppKGUscix0LG4pe3ZhciBpLG8scyxhLGwsdSxjLHAsZCxmPWUuY29uc3RydWN0b3IsaD10IT09dm9pZCAwO2lmKGg/KGllKHQsMSxLZSksbj09PXZvaWQgMD9uPWYucm91bmRpbmc6aWUobiwwLDgpKToodD1mLnByZWNpc2lvbixuPWYucm91bmRpbmcpLCFlLmlzRmluaXRlKCkpYz1LcyhlKTtlbHNle2ZvcihjPXhlKGUpLHM9Yy5pbmRleE9mKFwiLlwiKSxoPyhpPTIscj09MTY/dD10KjQtMzpyPT04JiYodD10KjMtMikpOmk9cixzPj0wJiYoYz1jLnJlcGxhY2UoXCIuXCIsXCJcIiksZD1uZXcgZigxKSxkLmU9Yy5sZW5ndGgtcyxkLmQ9ZG4oeGUoZCksMTAsaSksZC5lPWQuZC5sZW5ndGgpLHA9ZG4oYywxMCxpKSxvPWw9cC5sZW5ndGg7cFstLWxdPT0wOylwLnBvcCgpO2lmKCFwWzBdKWM9aD9cIjBwKzBcIjpcIjBcIjtlbHNle2lmKHM8MD9vLS06KGU9bmV3IGYoZSksZS5kPXAsZS5lPW8sZT1MKGUsZCx0LG4sMCxpKSxwPWUuZCxvPWUuZSx1PVZzKSxzPXBbdF0sYT1pLzIsdT11fHxwW3QrMV0hPT12b2lkIDAsdT1uPDQ/KHMhPT12b2lkIDB8fHUpJiYobj09PTB8fG49PT0oZS5zPDA/MzoyKSk6cz5hfHxzPT09YSYmKG49PT00fHx1fHxuPT09NiYmcFt0LTFdJjF8fG49PT0oZS5zPDA/ODo3KSkscC5sZW5ndGg9dCx1KWZvcig7KytwWy0tdF0+aS0xOylwW3RdPTAsdHx8KCsrbyxwLnVuc2hpZnQoMSkpO2ZvcihsPXAubGVuZ3RoOyFwW2wtMV07LS1sKTtmb3Iocz0wLGM9XCJcIjtzPGw7cysrKWMrPVVpLmNoYXJBdChwW3NdKTtpZihoKXtpZihsPjEpaWYocj09MTZ8fHI9PTgpe2ZvcihzPXI9PTE2PzQ6MywtLWw7bCVzO2wrKyljKz1cIjBcIjtmb3IocD1kbihjLGksciksbD1wLmxlbmd0aDshcFtsLTFdOy0tbCk7Zm9yKHM9MSxjPVwiMS5cIjtzPGw7cysrKWMrPVVpLmNoYXJBdChwW3NdKX1lbHNlIGM9Yy5jaGFyQXQoMCkrXCIuXCIrYy5zbGljZSgxKTtjPWMrKG88MD9cInBcIjpcInArXCIpK299ZWxzZSBpZihvPDApe2Zvcig7KytvOyljPVwiMFwiK2M7Yz1cIjAuXCIrY31lbHNlIGlmKCsrbz5sKWZvcihvLT1sO28tLTspYys9XCIwXCI7ZWxzZSBvPGwmJihjPWMuc2xpY2UoMCxvKStcIi5cIitjLnNsaWNlKG8pKX1jPShyPT0xNj9cIjB4XCI6cj09Mj9cIjBiXCI6cj09OD9cIjBvXCI6XCJcIikrY31yZXR1cm4gZS5zPDA/XCItXCIrYzpjfWZ1bmN0aW9uIHFzKGUscil7aWYoZS5sZW5ndGg+cilyZXR1cm4gZS5sZW5ndGg9ciwhMH1mdW5jdGlvbiBrcChlKXtyZXR1cm4gbmV3IHRoaXMoZSkuYWJzKCl9ZnVuY3Rpb24gRHAoZSl7cmV0dXJuIG5ldyB0aGlzKGUpLmFjb3MoKX1mdW5jdGlvbiBPcChlKXtyZXR1cm4gbmV3IHRoaXMoZSkuYWNvc2goKX1mdW5jdGlvbiBfcChlLHIpe3JldHVybiBuZXcgdGhpcyhlKS5wbHVzKHIpfWZ1bmN0aW9uIE5wKGUpe3JldHVybiBuZXcgdGhpcyhlKS5hc2luKCl9ZnVuY3Rpb24gTHAoZSl7cmV0dXJuIG5ldyB0aGlzKGUpLmFzaW5oKCl9ZnVuY3Rpb24gRnAoZSl7cmV0dXJuIG5ldyB0aGlzKGUpLmF0YW4oKX1mdW5jdGlvbiBNcChlKXtyZXR1cm4gbmV3IHRoaXMoZSkuYXRhbmgoKX1mdW5jdGlvbiAkcChlLHIpe2U9bmV3IHRoaXMoZSkscj1uZXcgdGhpcyhyKTt2YXIgdCxuPXRoaXMucHJlY2lzaW9uLGk9dGhpcy5yb3VuZGluZyxvPW4rNDtyZXR1cm4hZS5zfHwhci5zP3Q9bmV3IHRoaXMoTmFOKTohZS5kJiYhci5kPyh0PXdlKHRoaXMsbywxKS50aW1lcyhyLnM+MD8uMjU6Ljc1KSx0LnM9ZS5zKTohci5kfHxlLmlzWmVybygpPyh0PXIuczwwP3dlKHRoaXMsbixpKTpuZXcgdGhpcygwKSx0LnM9ZS5zKTohZS5kfHxyLmlzWmVybygpPyh0PXdlKHRoaXMsbywxKS50aW1lcyguNSksdC5zPWUucyk6ci5zPDA/KHRoaXMucHJlY2lzaW9uPW8sdGhpcy5yb3VuZGluZz0xLHQ9dGhpcy5hdGFuKEwoZSxyLG8sMSkpLHI9d2UodGhpcyxvLDEpLHRoaXMucHJlY2lzaW9uPW4sdGhpcy5yb3VuZGluZz1pLHQ9ZS5zPDA/dC5taW51cyhyKTp0LnBsdXMocikpOnQ9dGhpcy5hdGFuKEwoZSxyLG8sMSkpLHR9ZnVuY3Rpb24gcXAoZSl7cmV0dXJuIG5ldyB0aGlzKGUpLmNicnQoKX1mdW5jdGlvbiBqcChlKXtyZXR1cm4geShlPW5ldyB0aGlzKGUpLGUuZSsxLDIpfWZ1bmN0aW9uIFZwKGUscix0KXtyZXR1cm4gbmV3IHRoaXMoZSkuY2xhbXAocix0KX1mdW5jdGlvbiBCcChlKXtpZighZXx8dHlwZW9mIGUhPVwib2JqZWN0XCIpdGhyb3cgRXJyb3IoeW4rXCJPYmplY3QgZXhwZWN0ZWRcIik7dmFyIHIsdCxuLGk9ZS5kZWZhdWx0cz09PSEwLG89W1wicHJlY2lzaW9uXCIsMSxLZSxcInJvdW5kaW5nXCIsMCw4LFwidG9FeHBOZWdcIiwtdnIsMCxcInRvRXhwUG9zXCIsMCx2cixcIm1heEVcIiwwLHZyLFwibWluRVwiLC12ciwwLFwibW9kdWxvXCIsMCw5XTtmb3Iocj0wO3I8by5sZW5ndGg7cis9MylpZih0PW9bcl0saSYmKHRoaXNbdF09R2lbdF0pLChuPWVbdF0pIT09dm9pZCAwKWlmKFgobik9PT1uJiZuPj1vW3IrMV0mJm48PW9bcisyXSl0aGlzW3RdPW47ZWxzZSB0aHJvdyBFcnJvcihIZSt0K1wiOiBcIituKTtpZih0PVwiY3J5cHRvXCIsaSYmKHRoaXNbdF09R2lbdF0pLChuPWVbdF0pIT09dm9pZCAwKWlmKG49PT0hMHx8bj09PSExfHxuPT09MHx8bj09PTEpaWYobilpZih0eXBlb2YgY3J5cHRvPFwidVwiJiZjcnlwdG8mJihjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzfHxjcnlwdG8ucmFuZG9tQnl0ZXMpKXRoaXNbdF09ITA7ZWxzZSB0aHJvdyBFcnJvcihVcyk7ZWxzZSB0aGlzW3RdPSExO2Vsc2UgdGhyb3cgRXJyb3IoSGUrdCtcIjogXCIrbik7cmV0dXJuIHRoaXN9ZnVuY3Rpb24gVXAoZSl7cmV0dXJuIG5ldyB0aGlzKGUpLmNvcygpfWZ1bmN0aW9uIEdwKGUpe3JldHVybiBuZXcgdGhpcyhlKS5jb3NoKCl9ZnVuY3Rpb24genMoZSl7dmFyIHIsdCxuO2Z1bmN0aW9uIGkobyl7dmFyIHMsYSxsLHU9dGhpcztpZighKHUgaW5zdGFuY2VvZiBpKSlyZXR1cm4gbmV3IGkobyk7aWYodS5jb25zdHJ1Y3Rvcj1pLGpzKG8pKXt1LnM9by5zLHc/IW8uZHx8by5lPmkubWF4RT8odS5lPU5hTix1LmQ9bnVsbCk6by5lPGkubWluRT8odS5lPTAsdS5kPVswXSk6KHUuZT1vLmUsdS5kPW8uZC5zbGljZSgpKToodS5lPW8uZSx1LmQ9by5kP28uZC5zbGljZSgpOm8uZCk7cmV0dXJufWlmKGw9dHlwZW9mIG8sbD09PVwibnVtYmVyXCIpe2lmKG89PT0wKXt1LnM9MS9vPDA/LTE6MSx1LmU9MCx1LmQ9WzBdO3JldHVybn1pZihvPDA/KG89LW8sdS5zPS0xKTp1LnM9MSxvPT09fn5vJiZvPDFlNyl7Zm9yKHM9MCxhPW87YT49MTA7YS89MTApcysrO3c/cz5pLm1heEU/KHUuZT1OYU4sdS5kPW51bGwpOnM8aS5taW5FPyh1LmU9MCx1LmQ9WzBdKToodS5lPXMsdS5kPVtvXSk6KHUuZT1zLHUuZD1bb10pO3JldHVybn1pZihvKjAhPT0wKXtvfHwodS5zPU5hTiksdS5lPU5hTix1LmQ9bnVsbDtyZXR1cm59cmV0dXJuIG1uKHUsby50b1N0cmluZygpKX1pZihsPT09XCJzdHJpbmdcIilyZXR1cm4oYT1vLmNoYXJDb2RlQXQoMCkpPT09NDU/KG89by5zbGljZSgxKSx1LnM9LTEpOihhPT09NDMmJihvPW8uc2xpY2UoMSkpLHUucz0xKSxRcy50ZXN0KG8pP21uKHUsbyk6Q3AodSxvKTtpZihsPT09XCJiaWdpbnRcIilyZXR1cm4gbzwwPyhvPS1vLHUucz0tMSk6dS5zPTEsbW4odSxvLnRvU3RyaW5nKCkpO3Rocm93IEVycm9yKEhlK28pfWlmKGkucHJvdG90eXBlPW0saS5ST1VORF9VUD0wLGkuUk9VTkRfRE9XTj0xLGkuUk9VTkRfQ0VJTD0yLGkuUk9VTkRfRkxPT1I9MyxpLlJPVU5EX0hBTEZfVVA9NCxpLlJPVU5EX0hBTEZfRE9XTj01LGkuUk9VTkRfSEFMRl9FVkVOPTYsaS5ST1VORF9IQUxGX0NFSUw9NyxpLlJPVU5EX0hBTEZfRkxPT1I9OCxpLkVVQ0xJRD05LGkuY29uZmlnPWkuc2V0PUJwLGkuY2xvbmU9enMsaS5pc0RlY2ltYWw9anMsaS5hYnM9a3AsaS5hY29zPURwLGkuYWNvc2g9T3AsaS5hZGQ9X3AsaS5hc2luPU5wLGkuYXNpbmg9THAsaS5hdGFuPUZwLGkuYXRhbmg9TXAsaS5hdGFuMj0kcCxpLmNicnQ9cXAsaS5jZWlsPWpwLGkuY2xhbXA9VnAsaS5jb3M9VXAsaS5jb3NoPUdwLGkuZGl2PVFwLGkuZXhwPVdwLGkuZmxvb3I9SnAsaS5oeXBvdD1IcCxpLmxuPUtwLGkubG9nPVlwLGkubG9nMTA9WnAsaS5sb2cyPXpwLGkubWF4PVhwLGkubWluPWVkLGkubW9kPXJkLGkubXVsPXRkLGkucG93PW5kLGkucmFuZG9tPWlkLGkucm91bmQ9b2QsaS5zaWduPXNkLGkuc2luPWFkLGkuc2luaD1sZCxpLnNxcnQ9dWQsaS5zdWI9Y2QsaS5zdW09cGQsaS50YW49ZGQsaS50YW5oPW1kLGkudHJ1bmM9ZmQsZT09PXZvaWQgMCYmKGU9e30pLGUmJmUuZGVmYXVsdHMhPT0hMClmb3Iobj1bXCJwcmVjaXNpb25cIixcInJvdW5kaW5nXCIsXCJ0b0V4cE5lZ1wiLFwidG9FeHBQb3NcIixcIm1heEVcIixcIm1pbkVcIixcIm1vZHVsb1wiLFwiY3J5cHRvXCJdLHI9MDtyPG4ubGVuZ3RoOyllLmhhc093blByb3BlcnR5KHQ9bltyKytdKXx8KGVbdF09dGhpc1t0XSk7cmV0dXJuIGkuY29uZmlnKGUpLGl9ZnVuY3Rpb24gUXAoZSxyKXtyZXR1cm4gbmV3IHRoaXMoZSkuZGl2KHIpfWZ1bmN0aW9uIFdwKGUpe3JldHVybiBuZXcgdGhpcyhlKS5leHAoKX1mdW5jdGlvbiBKcChlKXtyZXR1cm4geShlPW5ldyB0aGlzKGUpLGUuZSsxLDMpfWZ1bmN0aW9uIEhwKCl7dmFyIGUscix0PW5ldyB0aGlzKDApO2Zvcih3PSExLGU9MDtlPGFyZ3VtZW50cy5sZW5ndGg7KWlmKHI9bmV3IHRoaXMoYXJndW1lbnRzW2UrK10pLHIuZCl0LmQmJih0PXQucGx1cyhyLnRpbWVzKHIpKSk7ZWxzZXtpZihyLnMpcmV0dXJuIHc9ITAsbmV3IHRoaXMoMS8wKTt0PXJ9cmV0dXJuIHc9ITAsdC5zcXJ0KCl9ZnVuY3Rpb24ganMoZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBhcnx8ZSYmZS50b1N0cmluZ1RhZz09PUdzfHwhMX1mdW5jdGlvbiBLcChlKXtyZXR1cm4gbmV3IHRoaXMoZSkubG4oKX1mdW5jdGlvbiBZcChlLHIpe3JldHVybiBuZXcgdGhpcyhlKS5sb2cocil9ZnVuY3Rpb24genAoZSl7cmV0dXJuIG5ldyB0aGlzKGUpLmxvZygyKX1mdW5jdGlvbiBacChlKXtyZXR1cm4gbmV3IHRoaXMoZSkubG9nKDEwKX1mdW5jdGlvbiBYcCgpe3JldHVybiBIcyh0aGlzLGFyZ3VtZW50cywtMSl9ZnVuY3Rpb24gZWQoKXtyZXR1cm4gSHModGhpcyxhcmd1bWVudHMsMSl9ZnVuY3Rpb24gcmQoZSxyKXtyZXR1cm4gbmV3IHRoaXMoZSkubW9kKHIpfWZ1bmN0aW9uIHRkKGUscil7cmV0dXJuIG5ldyB0aGlzKGUpLm11bChyKX1mdW5jdGlvbiBuZChlLHIpe3JldHVybiBuZXcgdGhpcyhlKS5wb3cocil9ZnVuY3Rpb24gaWQoZSl7dmFyIHIsdCxuLGksbz0wLHM9bmV3IHRoaXMoMSksYT1bXTtpZihlPT09dm9pZCAwP2U9dGhpcy5wcmVjaXNpb246aWUoZSwxLEtlKSxuPU1hdGguY2VpbChlL0UpLHRoaXMuY3J5cHRvKWlmKGNyeXB0by5nZXRSYW5kb21WYWx1ZXMpZm9yKHI9Y3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDMyQXJyYXkobikpO288bjspaT1yW29dLGk+PTQyOWU3P3Jbb109Y3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDMyQXJyYXkoMSkpWzBdOmFbbysrXT1pJTFlNztlbHNlIGlmKGNyeXB0by5yYW5kb21CeXRlcyl7Zm9yKHI9Y3J5cHRvLnJhbmRvbUJ5dGVzKG4qPTQpO288bjspaT1yW29dKyhyW28rMV08PDgpKyhyW28rMl08PDE2KSsoKHJbbyszXSYxMjcpPDwyNCksaT49MjE0ZTc/Y3J5cHRvLnJhbmRvbUJ5dGVzKDQpLmNvcHkocixvKTooYS5wdXNoKGklMWU3KSxvKz00KTtvPW4vNH1lbHNlIHRocm93IEVycm9yKFVzKTtlbHNlIGZvcig7bzxuOylhW28rK109TWF0aC5yYW5kb20oKSoxZTd8MDtmb3Iobj1hWy0tb10sZSU9RSxuJiZlJiYoaT1VKDEwLEUtZSksYVtvXT0obi9pfDApKmkpO2Fbb109PT0wO28tLSlhLnBvcCgpO2lmKG88MCl0PTAsYT1bMF07ZWxzZXtmb3IodD0tMTthWzBdPT09MDt0LT1FKWEuc2hpZnQoKTtmb3Iobj0xLGk9YVswXTtpPj0xMDtpLz0xMCluKys7bjxFJiYodC09RS1uKX1yZXR1cm4gcy5lPXQscy5kPWEsc31mdW5jdGlvbiBvZChlKXtyZXR1cm4geShlPW5ldyB0aGlzKGUpLGUuZSsxLHRoaXMucm91bmRpbmcpfWZ1bmN0aW9uIHNkKGUpe3JldHVybiBlPW5ldyB0aGlzKGUpLGUuZD9lLmRbMF0/ZS5zOjAqZS5zOmUuc3x8TmFOfWZ1bmN0aW9uIGFkKGUpe3JldHVybiBuZXcgdGhpcyhlKS5zaW4oKX1mdW5jdGlvbiBsZChlKXtyZXR1cm4gbmV3IHRoaXMoZSkuc2luaCgpfWZ1bmN0aW9uIHVkKGUpe3JldHVybiBuZXcgdGhpcyhlKS5zcXJ0KCl9ZnVuY3Rpb24gY2QoZSxyKXtyZXR1cm4gbmV3IHRoaXMoZSkuc3ViKHIpfWZ1bmN0aW9uIHBkKCl7dmFyIGU9MCxyPWFyZ3VtZW50cyx0PW5ldyB0aGlzKHJbZV0pO2Zvcih3PSExO3QucyYmKytlPHIubGVuZ3RoOyl0PXQucGx1cyhyW2VdKTtyZXR1cm4gdz0hMCx5KHQsdGhpcy5wcmVjaXNpb24sdGhpcy5yb3VuZGluZyl9ZnVuY3Rpb24gZGQoZSl7cmV0dXJuIG5ldyB0aGlzKGUpLnRhbigpfWZ1bmN0aW9uIG1kKGUpe3JldHVybiBuZXcgdGhpcyhlKS50YW5oKCl9ZnVuY3Rpb24gZmQoZSl7cmV0dXJuIHkoZT1uZXcgdGhpcyhlKSxlLmUrMSwxKX1tW1N5bWJvbC5mb3IoXCJub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbVwiKV09bS50b1N0cmluZzttW1N5bWJvbC50b1N0cmluZ1RhZ109XCJEZWNpbWFsXCI7dmFyIGFyPW0uY29uc3RydWN0b3I9enMoR2kpO2ZuPW5ldyBhcihmbik7Z249bmV3IGFyKGduKTt2YXIgdmU9YXI7ZnVuY3Rpb24gVHIoZSl7cmV0dXJuIGU9PT1udWxsP2U6QXJyYXkuaXNBcnJheShlKT9lLm1hcChUcik6dHlwZW9mIGU9PVwib2JqZWN0XCI/Z2QoZSk/aGQoZSk6ZS5jb25zdHJ1Y3RvciE9PW51bGwmJmUuY29uc3RydWN0b3IubmFtZSE9PVwiT2JqZWN0XCI/ZTp4cihlLFRyKTplfWZ1bmN0aW9uIGdkKGUpe3JldHVybiBlIT09bnVsbCYmdHlwZW9mIGU9PVwib2JqZWN0XCImJnR5cGVvZiBlLiR0eXBlPT1cInN0cmluZ1wifWZ1bmN0aW9uIGhkKHskdHlwZTplLHZhbHVlOnJ9KXtzd2l0Y2goZSl7Y2FzZVwiQmlnSW50XCI6cmV0dXJuIEJpZ0ludChyKTtjYXNlXCJCeXRlc1wiOntsZXR7YnVmZmVyOnQsYnl0ZU9mZnNldDpuLGJ5dGVMZW5ndGg6aX09QnVmZmVyLmZyb20ocixcImJhc2U2NFwiKTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkodCxuLGkpfWNhc2VcIkRhdGVUaW1lXCI6cmV0dXJuIG5ldyBEYXRlKHIpO2Nhc2VcIkRlY2ltYWxcIjpyZXR1cm4gbmV3IHZlKHIpO2Nhc2VcIkpzb25cIjpyZXR1cm4gSlNPTi5wYXJzZShyKTtkZWZhdWx0Ok5lKHIsXCJVbmtub3duIHRhZ2dlZCB2YWx1ZVwiKX19dmFyIFBlPWNsYXNze19tYXA9bmV3IE1hcDtnZXQocil7cmV0dXJuIHRoaXMuX21hcC5nZXQocik/LnZhbHVlfXNldChyLHQpe3RoaXMuX21hcC5zZXQocix7dmFsdWU6dH0pfWdldE9yQ3JlYXRlKHIsdCl7bGV0IG49dGhpcy5fbWFwLmdldChyKTtpZihuKXJldHVybiBuLnZhbHVlO2xldCBpPXQoKTtyZXR1cm4gdGhpcy5zZXQocixpKSxpfX07ZnVuY3Rpb24gWWUoZSl7cmV0dXJuIGUuc3Vic3RyaW5nKDAsMSkudG9Mb3dlckNhc2UoKStlLnN1YnN0cmluZygxKX1mdW5jdGlvbiBacyhlLHIpe2xldCB0PXt9O2ZvcihsZXQgbiBvZiBlKXtsZXQgaT1uW3JdO3RbaV09bn1yZXR1cm4gdH1mdW5jdGlvbiB1dChlKXtsZXQgcjtyZXR1cm57Z2V0KCl7cmV0dXJuIHJ8fChyPXt2YWx1ZTplKCl9KSxyLnZhbHVlfX19ZnVuY3Rpb24gWHMoZSl7cmV0dXJue21vZGVsczpIaShlLm1vZGVscyksZW51bXM6SGkoZS5lbnVtcyksdHlwZXM6SGkoZS50eXBlcyl9fWZ1bmN0aW9uIEhpKGUpe2xldCByPXt9O2ZvcihsZXR7bmFtZTp0LC4uLm59b2YgZSlyW3RdPW47cmV0dXJuIHJ9ZnVuY3Rpb24gU3IoZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBEYXRlfHxPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSk9PT1cIltvYmplY3QgRGF0ZV1cIn1mdW5jdGlvbiB3bihlKXtyZXR1cm4gZS50b1N0cmluZygpIT09XCJJbnZhbGlkIERhdGVcIn1mdW5jdGlvbiBScihlKXtyZXR1cm4gYXIuaXNEZWNpbWFsKGUpPyEwOmUhPT1udWxsJiZ0eXBlb2YgZT09XCJvYmplY3RcIiYmdHlwZW9mIGUucz09XCJudW1iZXJcIiYmdHlwZW9mIGUuZT09XCJudW1iZXJcIiYmdHlwZW9mIGUudG9GaXhlZD09XCJmdW5jdGlvblwiJiZBcnJheS5pc0FycmF5KGUuZCl9dmFyIGN0PXt9O3RyKGN0LHtNb2RlbEFjdGlvbjooKT0+QXIsZGF0YW1vZGVsRW51bVRvU2NoZW1hRW51bTooKT0+eWR9KTtmdW5jdGlvbiB5ZChlKXtyZXR1cm57bmFtZTplLm5hbWUsdmFsdWVzOmUudmFsdWVzLm1hcChyPT5yLm5hbWUpfX12YXIgQXI9KGI9PihiLmZpbmRVbmlxdWU9XCJmaW5kVW5pcXVlXCIsYi5maW5kVW5pcXVlT3JUaHJvdz1cImZpbmRVbmlxdWVPclRocm93XCIsYi5maW5kRmlyc3Q9XCJmaW5kRmlyc3RcIixiLmZpbmRGaXJzdE9yVGhyb3c9XCJmaW5kRmlyc3RPclRocm93XCIsYi5maW5kTWFueT1cImZpbmRNYW55XCIsYi5jcmVhdGU9XCJjcmVhdGVcIixiLmNyZWF0ZU1hbnk9XCJjcmVhdGVNYW55XCIsYi5jcmVhdGVNYW55QW5kUmV0dXJuPVwiY3JlYXRlTWFueUFuZFJldHVyblwiLGIudXBkYXRlPVwidXBkYXRlXCIsYi51cGRhdGVNYW55PVwidXBkYXRlTWFueVwiLGIudXBkYXRlTWFueUFuZFJldHVybj1cInVwZGF0ZU1hbnlBbmRSZXR1cm5cIixiLnVwc2VydD1cInVwc2VydFwiLGIuZGVsZXRlPVwiZGVsZXRlXCIsYi5kZWxldGVNYW55PVwiZGVsZXRlTWFueVwiLGIuZ3JvdXBCeT1cImdyb3VwQnlcIixiLmNvdW50PVwiY291bnRcIixiLmFnZ3JlZ2F0ZT1cImFnZ3JlZ2F0ZVwiLGIuZmluZFJhdz1cImZpbmRSYXdcIixiLmFnZ3JlZ2F0ZVJhdz1cImFnZ3JlZ2F0ZVJhd1wiLGIpKShBcnx8e30pO3ZhciBpYT1DKERpKCkpO3ZhciBuYT1DKHJlcXVpcmUoXCJub2RlOmZzXCIpKTt2YXIgZWE9e2tleXdvcmQ6RGUsZW50aXR5OkRlLHZhbHVlOmU9PlcobnIoZSkpLHB1bmN0dWF0aW9uOm5yLGRpcmVjdGl2ZTpEZSxmdW5jdGlvbjpEZSx2YXJpYWJsZTplPT5XKG5yKGUpKSxzdHJpbmc6ZT0+VyhxZShlKSksYm9vbGVhbjprZSxudW1iZXI6RGUsY29tbWVudDpLcn07dmFyIGJkPWU9PmUseG49e30sRWQ9MCx2PXttYW51YWw6eG4uUHJpc20mJnhuLlByaXNtLm1hbnVhbCxkaXNhYmxlV29ya2VyTWVzc2FnZUhhbmRsZXI6eG4uUHJpc20mJnhuLlByaXNtLmRpc2FibGVXb3JrZXJNZXNzYWdlSGFuZGxlcix1dGlsOntlbmNvZGU6ZnVuY3Rpb24oZSl7aWYoZSBpbnN0YW5jZW9mIGdlKXtsZXQgcj1lO3JldHVybiBuZXcgZ2Uoci50eXBlLHYudXRpbC5lbmNvZGUoci5jb250ZW50KSxyLmFsaWFzKX1lbHNlIHJldHVybiBBcnJheS5pc0FycmF5KGUpP2UubWFwKHYudXRpbC5lbmNvZGUpOmUucmVwbGFjZSgvJi9nLFwiJmFtcDtcIikucmVwbGFjZSgvPC9nLFwiJmx0O1wiKS5yZXBsYWNlKC9cXHUwMGEwL2csXCIgXCIpfSx0eXBlOmZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSl9LG9iaklkOmZ1bmN0aW9uKGUpe3JldHVybiBlLl9faWR8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19pZFwiLHt2YWx1ZTorK0VkfSksZS5fX2lkfSxjbG9uZTpmdW5jdGlvbiBlKHIsdCl7bGV0IG4saSxvPXYudXRpbC50eXBlKHIpO3N3aXRjaCh0PXR8fHt9LG8pe2Nhc2VcIk9iamVjdFwiOmlmKGk9di51dGlsLm9iaklkKHIpLHRbaV0pcmV0dXJuIHRbaV07bj17fSx0W2ldPW47Zm9yKGxldCBzIGluIHIpci5oYXNPd25Qcm9wZXJ0eShzKSYmKG5bc109ZShyW3NdLHQpKTtyZXR1cm4gbjtjYXNlXCJBcnJheVwiOnJldHVybiBpPXYudXRpbC5vYmpJZChyKSx0W2ldP3RbaV06KG49W10sdFtpXT1uLHIuZm9yRWFjaChmdW5jdGlvbihzLGEpe25bYV09ZShzLHQpfSksbik7ZGVmYXVsdDpyZXR1cm4gcn19fSxsYW5ndWFnZXM6e2V4dGVuZDpmdW5jdGlvbihlLHIpe2xldCB0PXYudXRpbC5jbG9uZSh2Lmxhbmd1YWdlc1tlXSk7Zm9yKGxldCBuIGluIHIpdFtuXT1yW25dO3JldHVybiB0fSxpbnNlcnRCZWZvcmU6ZnVuY3Rpb24oZSxyLHQsbil7bj1ufHx2Lmxhbmd1YWdlcztsZXQgaT1uW2VdLG89e307Zm9yKGxldCBhIGluIGkpaWYoaS5oYXNPd25Qcm9wZXJ0eShhKSl7aWYoYT09cilmb3IobGV0IGwgaW4gdCl0Lmhhc093blByb3BlcnR5KGwpJiYob1tsXT10W2xdKTt0Lmhhc093blByb3BlcnR5KGEpfHwob1thXT1pW2FdKX1sZXQgcz1uW2VdO3JldHVybiBuW2VdPW8sdi5sYW5ndWFnZXMuREZTKHYubGFuZ3VhZ2VzLGZ1bmN0aW9uKGEsbCl7bD09PXMmJmEhPWUmJih0aGlzW2FdPW8pfSksb30sREZTOmZ1bmN0aW9uIGUocix0LG4saSl7aT1pfHx7fTtsZXQgbz12LnV0aWwub2JqSWQ7Zm9yKGxldCBzIGluIHIpaWYoci5oYXNPd25Qcm9wZXJ0eShzKSl7dC5jYWxsKHIscyxyW3NdLG58fHMpO2xldCBhPXJbc10sbD12LnV0aWwudHlwZShhKTtsPT09XCJPYmplY3RcIiYmIWlbbyhhKV0/KGlbbyhhKV09ITAsZShhLHQsbnVsbCxpKSk6bD09PVwiQXJyYXlcIiYmIWlbbyhhKV0mJihpW28oYSldPSEwLGUoYSx0LHMsaSkpfX19LHBsdWdpbnM6e30saGlnaGxpZ2h0OmZ1bmN0aW9uKGUscix0KXtsZXQgbj17Y29kZTplLGdyYW1tYXI6cixsYW5ndWFnZTp0fTtyZXR1cm4gdi5ob29rcy5ydW4oXCJiZWZvcmUtdG9rZW5pemVcIixuKSxuLnRva2Vucz12LnRva2VuaXplKG4uY29kZSxuLmdyYW1tYXIpLHYuaG9va3MucnVuKFwiYWZ0ZXItdG9rZW5pemVcIixuKSxnZS5zdHJpbmdpZnkodi51dGlsLmVuY29kZShuLnRva2Vucyksbi5sYW5ndWFnZSl9LG1hdGNoR3JhbW1hcjpmdW5jdGlvbihlLHIsdCxuLGksbyxzKXtmb3IobGV0IGcgaW4gdCl7aWYoIXQuaGFzT3duUHJvcGVydHkoZyl8fCF0W2ddKWNvbnRpbnVlO2lmKGc9PXMpcmV0dXJuO2xldCBTPXRbZ107Uz12LnV0aWwudHlwZShTKT09PVwiQXJyYXlcIj9TOltTXTtmb3IobGV0IFA9MDtQPFMubGVuZ3RoOysrUCl7bGV0IFI9U1tQXSxiPVIuaW5zaWRlLEQ9ISFSLmxvb2tiZWhpbmQsbWU9ISFSLmdyZWVkeSxhZT0wLEhyPVIuYWxpYXM7aWYobWUmJiFSLnBhdHRlcm4uZ2xvYmFsKXtsZXQgVj1SLnBhdHRlcm4udG9TdHJpbmcoKS5tYXRjaCgvW2ltdXldKiQvKVswXTtSLnBhdHRlcm49UmVnRXhwKFIucGF0dGVybi5zb3VyY2UsVitcImdcIil9Uj1SLnBhdHRlcm58fFI7Zm9yKGxldCBWPW4sdGU9aTtWPHIubGVuZ3RoO3RlKz1yW1ZdLmxlbmd0aCwrK1Ype2xldCBDZT1yW1ZdO2lmKHIubGVuZ3RoPmUubGVuZ3RoKXJldHVybjtpZihDZSBpbnN0YW5jZW9mIGdlKWNvbnRpbnVlO2lmKG1lJiZWIT1yLmxlbmd0aC0xKXtSLmxhc3RJbmRleD10ZTt2YXIgcD1SLmV4ZWMoZSk7aWYoIXApYnJlYWs7dmFyIGM9cC5pbmRleCsoRD9wWzFdLmxlbmd0aDowKSxkPXAuaW5kZXgrcFswXS5sZW5ndGgsYT1WLGw9dGU7Zm9yKGxldCBfPXIubGVuZ3RoO2E8XyYmKGw8ZHx8IXJbYV0udHlwZSYmIXJbYS0xXS5ncmVlZHkpOysrYSlsKz1yW2FdLmxlbmd0aCxjPj1sJiYoKytWLHRlPWwpO2lmKHJbVl1pbnN0YW5jZW9mIGdlKWNvbnRpbnVlO3U9YS1WLENlPWUuc2xpY2UodGUsbCkscC5pbmRleC09dGV9ZWxzZXtSLmxhc3RJbmRleD0wO3ZhciBwPVIuZXhlYyhDZSksdT0xfWlmKCFwKXtpZihvKWJyZWFrO2NvbnRpbnVlfUQmJihhZT1wWzFdP3BbMV0ubGVuZ3RoOjApO3ZhciBjPXAuaW5kZXgrYWUscD1wWzBdLnNsaWNlKGFlKSxkPWMrcC5sZW5ndGgsZj1DZS5zbGljZSgwLGMpLGg9Q2Uuc2xpY2UoZCk7bGV0IEg9W1YsdV07ZiYmKCsrVix0ZSs9Zi5sZW5ndGgsSC5wdXNoKGYpKTtsZXQgZnI9bmV3IGdlKGcsYj92LnRva2VuaXplKHAsYik6cCxIcixwLG1lKTtpZihILnB1c2goZnIpLGgmJkgucHVzaChoKSxBcnJheS5wcm90b3R5cGUuc3BsaWNlLmFwcGx5KHIsSCksdSE9MSYmdi5tYXRjaEdyYW1tYXIoZSxyLHQsVix0ZSwhMCxnKSxvKWJyZWFrfX19fSx0b2tlbml6ZTpmdW5jdGlvbihlLHIpe2xldCB0PVtlXSxuPXIucmVzdDtpZihuKXtmb3IobGV0IGkgaW4gbilyW2ldPW5baV07ZGVsZXRlIHIucmVzdH1yZXR1cm4gdi5tYXRjaEdyYW1tYXIoZSx0LHIsMCwwLCExKSx0fSxob29rczp7YWxsOnt9LGFkZDpmdW5jdGlvbihlLHIpe2xldCB0PXYuaG9va3MuYWxsO3RbZV09dFtlXXx8W10sdFtlXS5wdXNoKHIpfSxydW46ZnVuY3Rpb24oZSxyKXtsZXQgdD12Lmhvb2tzLmFsbFtlXTtpZighKCF0fHwhdC5sZW5ndGgpKWZvcih2YXIgbj0wLGk7aT10W24rK107KWkocil9fSxUb2tlbjpnZX07di5sYW5ndWFnZXMuY2xpa2U9e2NvbW1lbnQ6W3twYXR0ZXJuOi8oXnxbXlxcXFxdKVxcL1xcKltcXHNcXFNdKj8oPzpcXCpcXC98JCkvLGxvb2tiZWhpbmQ6ITB9LHtwYXR0ZXJuOi8oXnxbXlxcXFw6XSlcXC9cXC8uKi8sbG9va2JlaGluZDohMCxncmVlZHk6ITB9XSxzdHJpbmc6e3BhdHRlcm46LyhbXCInXSkoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxLyxncmVlZHk6ITB9LFwiY2xhc3MtbmFtZVwiOntwYXR0ZXJuOi8oKD86XFxiKD86Y2xhc3N8aW50ZXJmYWNlfGV4dGVuZHN8aW1wbGVtZW50c3x0cmFpdHxpbnN0YW5jZW9mfG5ldylcXHMrKXwoPzpjYXRjaFxccytcXCgpKVtcXHcuXFxcXF0rL2ksbG9va2JlaGluZDohMCxpbnNpZGU6e3B1bmN0dWF0aW9uOi9bLlxcXFxdL319LGtleXdvcmQ6L1xcYig/OmlmfGVsc2V8d2hpbGV8ZG98Zm9yfHJldHVybnxpbnxpbnN0YW5jZW9mfGZ1bmN0aW9ufG5ld3x0cnl8dGhyb3d8Y2F0Y2h8ZmluYWxseXxudWxsfGJyZWFrfGNvbnRpbnVlKVxcYi8sYm9vbGVhbjovXFxiKD86dHJ1ZXxmYWxzZSlcXGIvLGZ1bmN0aW9uOi9cXHcrKD89XFwoKS8sbnVtYmVyOi9cXGIweFtcXGRhLWZdK1xcYnwoPzpcXGJcXGQrXFwuP1xcZCp8XFxCXFwuXFxkKykoPzplWystXT9cXGQrKT8vaSxvcGVyYXRvcjovLS0/fFxcK1xcKz98IT0/PT98PD0/fD49P3w9PT89P3wmJj98XFx8XFx8P3xcXD98XFwqfFxcL3x+fFxcXnwlLyxwdW5jdHVhdGlvbjovW3t9W1xcXTsoKSwuOl0vfTt2Lmxhbmd1YWdlcy5qYXZhc2NyaXB0PXYubGFuZ3VhZ2VzLmV4dGVuZChcImNsaWtlXCIse1wiY2xhc3MtbmFtZVwiOlt2Lmxhbmd1YWdlcy5jbGlrZVtcImNsYXNzLW5hbWVcIl0se3BhdHRlcm46LyhefFteJFxcd1xceEEwLVxcdUZGRkZdKVtfJEEtWlxceEEwLVxcdUZGRkZdWyRcXHdcXHhBMC1cXHVGRkZGXSooPz1cXC4oPzpwcm90b3R5cGV8Y29uc3RydWN0b3IpKS8sbG9va2JlaGluZDohMH1dLGtleXdvcmQ6W3twYXR0ZXJuOi8oKD86Xnx9KVxccyopKD86Y2F0Y2h8ZmluYWxseSlcXGIvLGxvb2tiZWhpbmQ6ITB9LHtwYXR0ZXJuOi8oXnxbXi5dKVxcYig/OmFzfGFzeW5jKD89XFxzKig/OmZ1bmN0aW9uXFxifFxcKHxbJFxcd1xceEEwLVxcdUZGRkZdfCQpKXxhd2FpdHxicmVha3xjYXNlfGNsYXNzfGNvbnN0fGNvbnRpbnVlfGRlYnVnZ2VyfGRlZmF1bHR8ZGVsZXRlfGRvfGVsc2V8ZW51bXxleHBvcnR8ZXh0ZW5kc3xmb3J8ZnJvbXxmdW5jdGlvbnxnZXR8aWZ8aW1wbGVtZW50c3xpbXBvcnR8aW58aW5zdGFuY2VvZnxpbnRlcmZhY2V8bGV0fG5ld3xudWxsfG9mfHBhY2thZ2V8cHJpdmF0ZXxwcm90ZWN0ZWR8cHVibGljfHJldHVybnxzZXR8c3RhdGljfHN1cGVyfHN3aXRjaHx0aGlzfHRocm93fHRyeXx0eXBlb2Z8dW5kZWZpbmVkfHZhcnx2b2lkfHdoaWxlfHdpdGh8eWllbGQpXFxiLyxsb29rYmVoaW5kOiEwfV0sbnVtYmVyOi9cXGIoPzooPzowW3hYXSg/OltcXGRBLUZhLWZdKD86X1tcXGRBLUZhLWZdKT8pK3wwW2JCXSg/OlswMV0oPzpfWzAxXSk/KSt8MFtvT10oPzpbMC03XSg/Ol9bMC03XSk/KSspbj98KD86XFxkKD86X1xcZCk/KStufE5hTnxJbmZpbml0eSlcXGJ8KD86XFxiKD86XFxkKD86X1xcZCk/KStcXC4/KD86XFxkKD86X1xcZCk/KSp8XFxCXFwuKD86XFxkKD86X1xcZCk/KSspKD86W0VlXVsrLV0/KD86XFxkKD86X1xcZCk/KSspPy8sZnVuY3Rpb246L1tfJGEtekEtWlxceEEwLVxcdUZGRkZdWyRcXHdcXHhBMC1cXHVGRkZGXSooPz1cXHMqKD86XFwuXFxzKig/OmFwcGx5fGJpbmR8Y2FsbClcXHMqKT9cXCgpLyxvcGVyYXRvcjovLVstPV0/fFxcK1srPV0/fCE9Pz0/fDw8Pz0/fD4+Pz4/PT98PSg/Oj09P3w+KT98JlsmPV0/fFxcfFt8PV0/fFxcKlxcKj89P3xcXC89P3x+fFxcXj0/fCU9P3xcXD98XFwuezN9L30pO3YubGFuZ3VhZ2VzLmphdmFzY3JpcHRbXCJjbGFzcy1uYW1lXCJdWzBdLnBhdHRlcm49LyhcXGIoPzpjbGFzc3xpbnRlcmZhY2V8ZXh0ZW5kc3xpbXBsZW1lbnRzfGluc3RhbmNlb2Z8bmV3KVxccyspW1xcdy5cXFxcXSsvO3YubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcImphdmFzY3JpcHRcIixcImtleXdvcmRcIix7cmVnZXg6e3BhdHRlcm46LygoPzpefFteJFxcd1xceEEwLVxcdUZGRkYuXCInXFxdKVxcc10pXFxzKilcXC8oXFxbKD86W15cXF1cXFxcXFxyXFxuXXxcXFxcLikqXXxcXFxcLnxbXi9cXFxcXFxbXFxyXFxuXSkrXFwvW2dpbXl1c117MCw2fSg/PVxccyooJHxbXFxyXFxuLC47fSlcXF1dKSkvLGxvb2tiZWhpbmQ6ITAsZ3JlZWR5OiEwfSxcImZ1bmN0aW9uLXZhcmlhYmxlXCI6e3BhdHRlcm46L1tfJGEtekEtWlxceEEwLVxcdUZGRkZdWyRcXHdcXHhBMC1cXHVGRkZGXSooPz1cXHMqWz06XVxccyooPzphc3luY1xccyopPyg/OlxcYmZ1bmN0aW9uXFxifCg/OlxcKCg/OlteKCldfFxcKFteKCldKlxcKSkqXFwpfFtfJGEtekEtWlxceEEwLVxcdUZGRkZdWyRcXHdcXHhBMC1cXHVGRkZGXSopXFxzKj0+KSkvLGFsaWFzOlwiZnVuY3Rpb25cIn0scGFyYW1ldGVyOlt7cGF0dGVybjovKGZ1bmN0aW9uKD86XFxzK1tfJEEtWmEtelxceEEwLVxcdUZGRkZdWyRcXHdcXHhBMC1cXHVGRkZGXSopP1xccypcXChcXHMqKSg/IVxccykoPzpbXigpXXxcXChbXigpXSpcXCkpKz8oPz1cXHMqXFwpKS8sbG9va2JlaGluZDohMCxpbnNpZGU6di5sYW5ndWFnZXMuamF2YXNjcmlwdH0se3BhdHRlcm46L1tfJGEtelxceEEwLVxcdUZGRkZdWyRcXHdcXHhBMC1cXHVGRkZGXSooPz1cXHMqPT4pL2ksaW5zaWRlOnYubGFuZ3VhZ2VzLmphdmFzY3JpcHR9LHtwYXR0ZXJuOi8oXFwoXFxzKikoPyFcXHMpKD86W14oKV18XFwoW14oKV0qXFwpKSs/KD89XFxzKlxcKVxccyo9PikvLGxvb2tiZWhpbmQ6ITAsaW5zaWRlOnYubGFuZ3VhZ2VzLmphdmFzY3JpcHR9LHtwYXR0ZXJuOi8oKD86XFxifFxcc3xeKSg/ISg/OmFzfGFzeW5jfGF3YWl0fGJyZWFrfGNhc2V8Y2F0Y2h8Y2xhc3N8Y29uc3R8Y29udGludWV8ZGVidWdnZXJ8ZGVmYXVsdHxkZWxldGV8ZG98ZWxzZXxlbnVtfGV4cG9ydHxleHRlbmRzfGZpbmFsbHl8Zm9yfGZyb218ZnVuY3Rpb258Z2V0fGlmfGltcGxlbWVudHN8aW1wb3J0fGlufGluc3RhbmNlb2Z8aW50ZXJmYWNlfGxldHxuZXd8bnVsbHxvZnxwYWNrYWdlfHByaXZhdGV8cHJvdGVjdGVkfHB1YmxpY3xyZXR1cm58c2V0fHN0YXRpY3xzdXBlcnxzd2l0Y2h8dGhpc3x0aHJvd3x0cnl8dHlwZW9mfHVuZGVmaW5lZHx2YXJ8dm9pZHx3aGlsZXx3aXRofHlpZWxkKSg/IVskXFx3XFx4QTAtXFx1RkZGRl0pKSg/OltfJEEtWmEtelxceEEwLVxcdUZGRkZdWyRcXHdcXHhBMC1cXHVGRkZGXSpcXHMqKVxcKFxccyopKD8hXFxzKSg/OlteKCldfFxcKFteKCldKlxcKSkrPyg/PVxccypcXClcXHMqXFx7KS8sbG9va2JlaGluZDohMCxpbnNpZGU6di5sYW5ndWFnZXMuamF2YXNjcmlwdH1dLGNvbnN0YW50Oi9cXGJbQS1aXSg/OltBLVpfXXxcXGR4PykqXFxiL30pO3YubGFuZ3VhZ2VzLm1hcmt1cCYmdi5sYW5ndWFnZXMubWFya3VwLnRhZy5hZGRJbmxpbmVkKFwic2NyaXB0XCIsXCJqYXZhc2NyaXB0XCIpO3YubGFuZ3VhZ2VzLmpzPXYubGFuZ3VhZ2VzLmphdmFzY3JpcHQ7di5sYW5ndWFnZXMudHlwZXNjcmlwdD12Lmxhbmd1YWdlcy5leHRlbmQoXCJqYXZhc2NyaXB0XCIse2tleXdvcmQ6L1xcYig/OmFic3RyYWN0fGFzfGFzeW5jfGF3YWl0fGJyZWFrfGNhc2V8Y2F0Y2h8Y2xhc3N8Y29uc3R8Y29uc3RydWN0b3J8Y29udGludWV8ZGVidWdnZXJ8ZGVjbGFyZXxkZWZhdWx0fGRlbGV0ZXxkb3xlbHNlfGVudW18ZXhwb3J0fGV4dGVuZHN8ZmluYWxseXxmb3J8ZnJvbXxmdW5jdGlvbnxnZXR8aWZ8aW1wbGVtZW50c3xpbXBvcnR8aW58aW5zdGFuY2VvZnxpbnRlcmZhY2V8aXN8a2V5b2Z8bGV0fG1vZHVsZXxuYW1lc3BhY2V8bmV3fG51bGx8b2Z8cGFja2FnZXxwcml2YXRlfHByb3RlY3RlZHxwdWJsaWN8cmVhZG9ubHl8cmV0dXJufHJlcXVpcmV8c2V0fHN0YXRpY3xzdXBlcnxzd2l0Y2h8dGhpc3x0aHJvd3x0cnl8dHlwZXx0eXBlb2Z8dmFyfHZvaWR8d2hpbGV8d2l0aHx5aWVsZClcXGIvLGJ1aWx0aW46L1xcYig/OnN0cmluZ3xGdW5jdGlvbnxhbnl8bnVtYmVyfGJvb2xlYW58QXJyYXl8c3ltYm9sfGNvbnNvbGV8UHJvbWlzZXx1bmtub3dufG5ldmVyKVxcYi99KTt2Lmxhbmd1YWdlcy50cz12Lmxhbmd1YWdlcy50eXBlc2NyaXB0O2Z1bmN0aW9uIGdlKGUscix0LG4saSl7dGhpcy50eXBlPWUsdGhpcy5jb250ZW50PXIsdGhpcy5hbGlhcz10LHRoaXMubGVuZ3RoPShufHxcIlwiKS5sZW5ndGh8MCx0aGlzLmdyZWVkeT0hIWl9Z2Uuc3RyaW5naWZ5PWZ1bmN0aW9uKGUscil7cmV0dXJuIHR5cGVvZiBlPT1cInN0cmluZ1wiP2U6QXJyYXkuaXNBcnJheShlKT9lLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gZ2Uuc3RyaW5naWZ5KHQscil9KS5qb2luKFwiXCIpOndkKGUudHlwZSkoZS5jb250ZW50KX07ZnVuY3Rpb24gd2QoZSl7cmV0dXJuIGVhW2VdfHxiZH1mdW5jdGlvbiByYShlKXtyZXR1cm4geGQoZSx2Lmxhbmd1YWdlcy5qYXZhc2NyaXB0KX1mdW5jdGlvbiB4ZChlLHIpe3JldHVybiB2LnRva2VuaXplKGUscikubWFwKG49PmdlLnN0cmluZ2lmeShuKSkuam9pbihcIlwiKX1mdW5jdGlvbiB0YShlKXtyZXR1cm4gSWkoZSl9dmFyIHZuPWNsYXNzIGV7Zmlyc3RMaW5lTnVtYmVyO2xpbmVzO3N0YXRpYyByZWFkKHIpe2xldCB0O3RyeXt0PW5hLmRlZmF1bHQucmVhZEZpbGVTeW5jKHIsXCJ1dGYtOFwiKX1jYXRjaHtyZXR1cm4gbnVsbH1yZXR1cm4gZS5mcm9tQ29udGVudCh0KX1zdGF0aWMgZnJvbUNvbnRlbnQocil7bGV0IHQ9ci5zcGxpdCgvXFxyP1xcbi8pO3JldHVybiBuZXcgZSgxLHQpfWNvbnN0cnVjdG9yKHIsdCl7dGhpcy5maXJzdExpbmVOdW1iZXI9cix0aGlzLmxpbmVzPXR9Z2V0IGxhc3RMaW5lTnVtYmVyKCl7cmV0dXJuIHRoaXMuZmlyc3RMaW5lTnVtYmVyK3RoaXMubGluZXMubGVuZ3RoLTF9bWFwTGluZUF0KHIsdCl7aWYocjx0aGlzLmZpcnN0TGluZU51bWJlcnx8cj50aGlzLmxpbmVzLmxlbmd0aCt0aGlzLmZpcnN0TGluZU51bWJlcilyZXR1cm4gdGhpcztsZXQgbj1yLXRoaXMuZmlyc3RMaW5lTnVtYmVyLGk9Wy4uLnRoaXMubGluZXNdO3JldHVybiBpW25dPXQoaVtuXSksbmV3IGUodGhpcy5maXJzdExpbmVOdW1iZXIsaSl9bWFwTGluZXMocil7cmV0dXJuIG5ldyBlKHRoaXMuZmlyc3RMaW5lTnVtYmVyLHRoaXMubGluZXMubWFwKCh0LG4pPT5yKHQsdGhpcy5maXJzdExpbmVOdW1iZXIrbikpKX1saW5lQXQocil7cmV0dXJuIHRoaXMubGluZXNbci10aGlzLmZpcnN0TGluZU51bWJlcl19cHJlcGVuZFN5bWJvbEF0KHIsdCl7cmV0dXJuIHRoaXMubWFwTGluZXMoKG4saSk9Pmk9PT1yP2Ake3R9ICR7bn1gOmAgICR7bn1gKX1zbGljZShyLHQpe2xldCBuPXRoaXMubGluZXMuc2xpY2Uoci0xLHQpLmpvaW4oYFxuYCk7cmV0dXJuIG5ldyBlKHIsdGEobikuc3BsaXQoYFxuYCkpfWhpZ2hsaWdodCgpe2xldCByPXJhKHRoaXMudG9TdHJpbmcoKSk7cmV0dXJuIG5ldyBlKHRoaXMuZmlyc3RMaW5lTnVtYmVyLHIuc3BsaXQoYFxuYCkpfXRvU3RyaW5nKCl7cmV0dXJuIHRoaXMubGluZXMuam9pbihgXG5gKX19O3ZhciB2ZD17cmVkOmNlLGdyYXk6S3IsZGltOkllLGJvbGQ6Vyx1bmRlcmxpbmU6WSxoaWdobGlnaHRTb3VyY2U6ZT0+ZS5oaWdobGlnaHQoKX0sUGQ9e3JlZDplPT5lLGdyYXk6ZT0+ZSxkaW06ZT0+ZSxib2xkOmU9PmUsdW5kZXJsaW5lOmU9PmUsaGlnaGxpZ2h0U291cmNlOmU9PmV9O2Z1bmN0aW9uIFRkKHttZXNzYWdlOmUsb3JpZ2luYWxNZXRob2Q6cixpc1BhbmljOnQsY2FsbEFyZ3VtZW50czpufSl7cmV0dXJue2Z1bmN0aW9uTmFtZTpgcHJpc21hLiR7cn0oKWAsbWVzc2FnZTplLGlzUGFuaWM6dD8/ITEsY2FsbEFyZ3VtZW50czpufX1mdW5jdGlvbiBTZCh7Y2FsbHNpdGU6ZSxtZXNzYWdlOnIsb3JpZ2luYWxNZXRob2Q6dCxpc1BhbmljOm4sY2FsbEFyZ3VtZW50czppfSxvKXtsZXQgcz1UZCh7bWVzc2FnZTpyLG9yaWdpbmFsTWV0aG9kOnQsaXNQYW5pYzpuLGNhbGxBcmd1bWVudHM6aX0pO2lmKCFlfHx0eXBlb2Ygd2luZG93PFwidVwifHxwcm9jZXNzLmVudi5OT0RFX0VOVj09PVwicHJvZHVjdGlvblwiKXJldHVybiBzO2xldCBhPWUuZ2V0TG9jYXRpb24oKTtpZighYXx8IWEubGluZU51bWJlcnx8IWEuY29sdW1uTnVtYmVyKXJldHVybiBzO2xldCBsPU1hdGgubWF4KDEsYS5saW5lTnVtYmVyLTMpLHU9dm4ucmVhZChhLmZpbGVOYW1lKT8uc2xpY2UobCxhLmxpbmVOdW1iZXIpLGM9dT8ubGluZUF0KGEubGluZU51bWJlcik7aWYodSYmYyl7bGV0IHA9QWQoYyksZD1SZChjKTtpZighZClyZXR1cm4gcztzLmZ1bmN0aW9uTmFtZT1gJHtkLmNvZGV9KWAscy5sb2NhdGlvbj1hLG58fCh1PXUubWFwTGluZUF0KGEubGluZU51bWJlcixoPT5oLnNsaWNlKDAsZC5vcGVuaW5nQnJhY2VJbmRleCkpKSx1PW8uaGlnaGxpZ2h0U291cmNlKHUpO2xldCBmPVN0cmluZyh1Lmxhc3RMaW5lTnVtYmVyKS5sZW5ndGg7aWYocy5jb250ZXh0TGluZXM9dS5tYXBMaW5lcygoaCxnKT0+by5ncmF5KFN0cmluZyhnKS5wYWRTdGFydChmKSkrXCIgXCIraCkubWFwTGluZXMoaD0+by5kaW0oaCkpLnByZXBlbmRTeW1ib2xBdChhLmxpbmVOdW1iZXIsby5ib2xkKG8ucmVkKFwiXFx1MjE5MlwiKSkpLGkpe2xldCBoPXArZisxO2grPTIscy5jYWxsQXJndW1lbnRzPSgwLGlhLmRlZmF1bHQpKGksaCkuc2xpY2UoaCl9fXJldHVybiBzfWZ1bmN0aW9uIFJkKGUpe2xldCByPU9iamVjdC5rZXlzKEFyKS5qb2luKFwifFwiKSxuPW5ldyBSZWdFeHAoU3RyaW5nLnJhd2BcXC4oJHtyfSlcXChgKS5leGVjKGUpO2lmKG4pe2xldCBpPW4uaW5kZXgrblswXS5sZW5ndGgsbz1lLmxhc3RJbmRleE9mKFwiIFwiLG4uaW5kZXgpKzE7cmV0dXJue2NvZGU6ZS5zbGljZShvLGkpLG9wZW5pbmdCcmFjZUluZGV4Oml9fXJldHVybiBudWxsfWZ1bmN0aW9uIEFkKGUpe2xldCByPTA7Zm9yKGxldCB0PTA7dDxlLmxlbmd0aDt0Kyspe2lmKGUuY2hhckF0KHQpIT09XCIgXCIpcmV0dXJuIHI7cisrfXJldHVybiByfWZ1bmN0aW9uIENkKHtmdW5jdGlvbk5hbWU6ZSxsb2NhdGlvbjpyLG1lc3NhZ2U6dCxpc1BhbmljOm4sY29udGV4dExpbmVzOmksY2FsbEFyZ3VtZW50czpvfSxzKXtsZXQgYT1bXCJcIl0sbD1yP1wiIGluXCI6XCI6XCI7aWYobj8oYS5wdXNoKHMucmVkKGBPb3BzLCBhbiB1bmtub3duIGVycm9yIG9jY3VycmVkISBUaGlzIGlzICR7cy5ib2xkKFwib24gdXNcIil9LCB5b3UgZGlkIG5vdGhpbmcgd3JvbmcuYCkpLGEucHVzaChzLnJlZChgSXQgb2NjdXJyZWQgaW4gdGhlICR7cy5ib2xkKGBcXGAke2V9XFxgYCl9IGludm9jYXRpb24ke2x9YCkpKTphLnB1c2gocy5yZWQoYEludmFsaWQgJHtzLmJvbGQoYFxcYCR7ZX1cXGBgKX0gaW52b2NhdGlvbiR7bH1gKSksciYmYS5wdXNoKHMudW5kZXJsaW5lKElkKHIpKSksaSl7YS5wdXNoKFwiXCIpO2xldCB1PVtpLnRvU3RyaW5nKCldO28mJih1LnB1c2gobyksdS5wdXNoKHMuZGltKFwiKVwiKSkpLGEucHVzaCh1LmpvaW4oXCJcIikpLG8mJmEucHVzaChcIlwiKX1lbHNlIGEucHVzaChcIlwiKSxvJiZhLnB1c2gobyksYS5wdXNoKFwiXCIpO3JldHVybiBhLnB1c2godCksYS5qb2luKGBcbmApfWZ1bmN0aW9uIElkKGUpe2xldCByPVtlLmZpbGVOYW1lXTtyZXR1cm4gZS5saW5lTnVtYmVyJiZyLnB1c2goU3RyaW5nKGUubGluZU51bWJlcikpLGUuY29sdW1uTnVtYmVyJiZyLnB1c2goU3RyaW5nKGUuY29sdW1uTnVtYmVyKSksci5qb2luKFwiOlwiKX1mdW5jdGlvbiBQbihlKXtsZXQgcj1lLnNob3dDb2xvcnM/dmQ6UGQsdDtyZXR1cm4gdD1TZChlLHIpLENkKHQscil9dmFyIG1hPUMoS2koKSk7ZnVuY3Rpb24gbGEoZSxyLHQpe2xldCBuPXVhKGUpLGk9a2Qobiksbz1PZChpKTtvP1RuKG8scix0KTpyLmFkZEVycm9yTWVzc2FnZSgoKT0+XCJVbmtub3duIGVycm9yXCIpfWZ1bmN0aW9uIHVhKGUpe3JldHVybiBlLmVycm9ycy5mbGF0TWFwKHI9PnIua2luZD09PVwiVW5pb25cIj91YShyKTpbcl0pfWZ1bmN0aW9uIGtkKGUpe2xldCByPW5ldyBNYXAsdD1bXTtmb3IobGV0IG4gb2YgZSl7aWYobi5raW5kIT09XCJJbnZhbGlkQXJndW1lbnRUeXBlXCIpe3QucHVzaChuKTtjb250aW51ZX1sZXQgaT1gJHtuLnNlbGVjdGlvblBhdGguam9pbihcIi5cIil9OiR7bi5hcmd1bWVudFBhdGguam9pbihcIi5cIil9YCxvPXIuZ2V0KGkpO28/ci5zZXQoaSx7Li4ubixhcmd1bWVudDp7Li4ubi5hcmd1bWVudCx0eXBlTmFtZXM6RGQoby5hcmd1bWVudC50eXBlTmFtZXMsbi5hcmd1bWVudC50eXBlTmFtZXMpfX0pOnIuc2V0KGksbil9cmV0dXJuIHQucHVzaCguLi5yLnZhbHVlcygpKSx0fWZ1bmN0aW9uIERkKGUscil7cmV0dXJuWy4uLm5ldyBTZXQoZS5jb25jYXQocikpXX1mdW5jdGlvbiBPZChlKXtyZXR1cm4gQmkoZSwocix0KT0+e2xldCBuPXNhKHIpLGk9c2EodCk7cmV0dXJuIG4hPT1pP24taTphYShyKS1hYSh0KX0pfWZ1bmN0aW9uIHNhKGUpe2xldCByPTA7cmV0dXJuIEFycmF5LmlzQXJyYXkoZS5zZWxlY3Rpb25QYXRoKSYmKHIrPWUuc2VsZWN0aW9uUGF0aC5sZW5ndGgpLEFycmF5LmlzQXJyYXkoZS5hcmd1bWVudFBhdGgpJiYocis9ZS5hcmd1bWVudFBhdGgubGVuZ3RoKSxyfWZ1bmN0aW9uIGFhKGUpe3N3aXRjaChlLmtpbmQpe2Nhc2VcIkludmFsaWRBcmd1bWVudFZhbHVlXCI6Y2FzZVwiVmFsdWVUb29MYXJnZVwiOnJldHVybiAyMDtjYXNlXCJJbnZhbGlkQXJndW1lbnRUeXBlXCI6cmV0dXJuIDEwO2Nhc2VcIlJlcXVpcmVkQXJndW1lbnRNaXNzaW5nXCI6cmV0dXJuLTEwO2RlZmF1bHQ6cmV0dXJuIDB9fXZhciB1ZT1jbGFzc3tjb25zdHJ1Y3RvcihyLHQpe3RoaXMubmFtZT1yO3RoaXMudmFsdWU9dH1pc1JlcXVpcmVkPSExO21ha2VSZXF1aXJlZCgpe3JldHVybiB0aGlzLmlzUmVxdWlyZWQ9ITAsdGhpc313cml0ZShyKXtsZXR7Y29sb3JzOntncmVlbjp0fX09ci5jb250ZXh0O3IuYWRkTWFyZ2luU3ltYm9sKHQodGhpcy5pc1JlcXVpcmVkP1wiK1wiOlwiP1wiKSksci53cml0ZSh0KHRoaXMubmFtZSkpLHRoaXMuaXNSZXF1aXJlZHx8ci53cml0ZSh0KFwiP1wiKSksci53cml0ZSh0KFwiOiBcIikpLHR5cGVvZiB0aGlzLnZhbHVlPT1cInN0cmluZ1wiP3Iud3JpdGUodCh0aGlzLnZhbHVlKSk6ci53cml0ZSh0aGlzLnZhbHVlKX19O3BhKCk7dmFyIENyPWNsYXNze2NvbnN0cnVjdG9yKHI9MCx0KXt0aGlzLmNvbnRleHQ9dDt0aGlzLmN1cnJlbnRJbmRlbnQ9cn1saW5lcz1bXTtjdXJyZW50TGluZT1cIlwiO2N1cnJlbnRJbmRlbnQ9MDttYXJnaW5TeW1ib2w7YWZ0ZXJOZXh0TmV3TGluZUNhbGxiYWNrO3dyaXRlKHIpe3JldHVybiB0eXBlb2Ygcj09XCJzdHJpbmdcIj90aGlzLmN1cnJlbnRMaW5lKz1yOnIud3JpdGUodGhpcyksdGhpc313cml0ZUpvaW5lZChyLHQsbj0oaSxvKT0+by53cml0ZShpKSl7bGV0IGk9dC5sZW5ndGgtMTtmb3IobGV0IG89MDtvPHQubGVuZ3RoO28rKyluKHRbb10sdGhpcyksbyE9PWkmJnRoaXMud3JpdGUocik7cmV0dXJuIHRoaXN9d3JpdGVMaW5lKHIpe3JldHVybiB0aGlzLndyaXRlKHIpLm5ld0xpbmUoKX1uZXdMaW5lKCl7dGhpcy5saW5lcy5wdXNoKHRoaXMuaW5kZW50ZWRDdXJyZW50TGluZSgpKSx0aGlzLmN1cnJlbnRMaW5lPVwiXCIsdGhpcy5tYXJnaW5TeW1ib2w9dm9pZCAwO2xldCByPXRoaXMuYWZ0ZXJOZXh0TmV3TGluZUNhbGxiYWNrO3JldHVybiB0aGlzLmFmdGVyTmV4dE5ld0xpbmVDYWxsYmFjaz12b2lkIDAscj8uKCksdGhpc313aXRoSW5kZW50KHIpe3JldHVybiB0aGlzLmluZGVudCgpLHIodGhpcyksdGhpcy51bmluZGVudCgpLHRoaXN9YWZ0ZXJOZXh0TmV3bGluZShyKXtyZXR1cm4gdGhpcy5hZnRlck5leHROZXdMaW5lQ2FsbGJhY2s9cix0aGlzfWluZGVudCgpe3JldHVybiB0aGlzLmN1cnJlbnRJbmRlbnQrKyx0aGlzfXVuaW5kZW50KCl7cmV0dXJuIHRoaXMuY3VycmVudEluZGVudD4wJiZ0aGlzLmN1cnJlbnRJbmRlbnQtLSx0aGlzfWFkZE1hcmdpblN5bWJvbChyKXtyZXR1cm4gdGhpcy5tYXJnaW5TeW1ib2w9cix0aGlzfXRvU3RyaW5nKCl7cmV0dXJuIHRoaXMubGluZXMuY29uY2F0KHRoaXMuaW5kZW50ZWRDdXJyZW50TGluZSgpKS5qb2luKGBcbmApfWdldEN1cnJlbnRMaW5lTGVuZ3RoKCl7cmV0dXJuIHRoaXMuY3VycmVudExpbmUubGVuZ3RofWluZGVudGVkQ3VycmVudExpbmUoKXtsZXQgcj10aGlzLmN1cnJlbnRMaW5lLnBhZFN0YXJ0KHRoaXMuY3VycmVudExpbmUubGVuZ3RoKzIqdGhpcy5jdXJyZW50SW5kZW50KTtyZXR1cm4gdGhpcy5tYXJnaW5TeW1ib2w/dGhpcy5tYXJnaW5TeW1ib2wrci5zbGljZSgxKTpyfX07Y2EoKTt2YXIgU249Y2xhc3N7Y29uc3RydWN0b3Iocil7dGhpcy52YWx1ZT1yfXdyaXRlKHIpe3Iud3JpdGUodGhpcy52YWx1ZSl9bWFya0FzRXJyb3IoKXt0aGlzLnZhbHVlLm1hcmtBc0Vycm9yKCl9fTt2YXIgUm49ZT0+ZSxBbj17Ym9sZDpSbixyZWQ6Um4sZ3JlZW46Um4sZGltOlJuLGVuYWJsZWQ6ITF9LGRhPXtib2xkOlcscmVkOmNlLGdyZWVuOnFlLGRpbTpJZSxlbmFibGVkOiEwfSxJcj17d3JpdGUoZSl7ZS53cml0ZUxpbmUoXCIsXCIpfX07dmFyIFRlPWNsYXNze2NvbnN0cnVjdG9yKHIpe3RoaXMuY29udGVudHM9cn1pc1VuZGVybGluZWQ9ITE7Y29sb3I9cj0+cjt1bmRlcmxpbmUoKXtyZXR1cm4gdGhpcy5pc1VuZGVybGluZWQ9ITAsdGhpc31zZXRDb2xvcihyKXtyZXR1cm4gdGhpcy5jb2xvcj1yLHRoaXN9d3JpdGUocil7bGV0IHQ9ci5nZXRDdXJyZW50TGluZUxlbmd0aCgpO3Iud3JpdGUodGhpcy5jb2xvcih0aGlzLmNvbnRlbnRzKSksdGhpcy5pc1VuZGVybGluZWQmJnIuYWZ0ZXJOZXh0TmV3bGluZSgoKT0+e3Iud3JpdGUoXCIgXCIucmVwZWF0KHQpKS53cml0ZUxpbmUodGhpcy5jb2xvcihcIn5cIi5yZXBlYXQodGhpcy5jb250ZW50cy5sZW5ndGgpKSl9KX19O3ZhciB6ZT1jbGFzc3toYXNFcnJvcj0hMTttYXJrQXNFcnJvcigpe3JldHVybiB0aGlzLmhhc0Vycm9yPSEwLHRoaXN9fTt2YXIga3I9Y2xhc3MgZXh0ZW5kcyB6ZXtpdGVtcz1bXTthZGRJdGVtKHIpe3JldHVybiB0aGlzLml0ZW1zLnB1c2gobmV3IFNuKHIpKSx0aGlzfWdldEZpZWxkKHIpe3JldHVybiB0aGlzLml0ZW1zW3JdfWdldFByaW50V2lkdGgoKXtyZXR1cm4gdGhpcy5pdGVtcy5sZW5ndGg9PT0wPzI6TWF0aC5tYXgoLi4udGhpcy5pdGVtcy5tYXAodD0+dC52YWx1ZS5nZXRQcmludFdpZHRoKCkpKSsyfXdyaXRlKHIpe2lmKHRoaXMuaXRlbXMubGVuZ3RoPT09MCl7dGhpcy53cml0ZUVtcHR5KHIpO3JldHVybn10aGlzLndyaXRlV2l0aEl0ZW1zKHIpfXdyaXRlRW1wdHkocil7bGV0IHQ9bmV3IFRlKFwiW11cIik7dGhpcy5oYXNFcnJvciYmdC5zZXRDb2xvcihyLmNvbnRleHQuY29sb3JzLnJlZCkudW5kZXJsaW5lKCksci53cml0ZSh0KX13cml0ZVdpdGhJdGVtcyhyKXtsZXR7Y29sb3JzOnR9PXIuY29udGV4dDtyLndyaXRlTGluZShcIltcIikud2l0aEluZGVudCgoKT0+ci53cml0ZUpvaW5lZChJcix0aGlzLml0ZW1zKS5uZXdMaW5lKCkpLndyaXRlKFwiXVwiKSx0aGlzLmhhc0Vycm9yJiZyLmFmdGVyTmV4dE5ld2xpbmUoKCk9PntyLndyaXRlTGluZSh0LnJlZChcIn5cIi5yZXBlYXQodGhpcy5nZXRQcmludFdpZHRoKCkpKSl9KX1hc09iamVjdCgpe319O3ZhciBEcj1jbGFzcyBlIGV4dGVuZHMgemV7ZmllbGRzPXt9O3N1Z2dlc3Rpb25zPVtdO2FkZEZpZWxkKHIpe3RoaXMuZmllbGRzW3IubmFtZV09cn1hZGRTdWdnZXN0aW9uKHIpe3RoaXMuc3VnZ2VzdGlvbnMucHVzaChyKX1nZXRGaWVsZChyKXtyZXR1cm4gdGhpcy5maWVsZHNbcl19Z2V0RGVlcEZpZWxkKHIpe2xldFt0LC4uLm5dPXIsaT10aGlzLmdldEZpZWxkKHQpO2lmKCFpKXJldHVybjtsZXQgbz1pO2ZvcihsZXQgcyBvZiBuKXtsZXQgYTtpZihvLnZhbHVlIGluc3RhbmNlb2YgZT9hPW8udmFsdWUuZ2V0RmllbGQocyk6by52YWx1ZSBpbnN0YW5jZW9mIGtyJiYoYT1vLnZhbHVlLmdldEZpZWxkKE51bWJlcihzKSkpLCFhKXJldHVybjtvPWF9cmV0dXJuIG99Z2V0RGVlcEZpZWxkVmFsdWUocil7cmV0dXJuIHIubGVuZ3RoPT09MD90aGlzOnRoaXMuZ2V0RGVlcEZpZWxkKHIpPy52YWx1ZX1oYXNGaWVsZChyKXtyZXR1cm4hIXRoaXMuZ2V0RmllbGQocil9cmVtb3ZlQWxsRmllbGRzKCl7dGhpcy5maWVsZHM9e319cmVtb3ZlRmllbGQocil7ZGVsZXRlIHRoaXMuZmllbGRzW3JdfWdldEZpZWxkcygpe3JldHVybiB0aGlzLmZpZWxkc31pc0VtcHR5KCl7cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuZmllbGRzKS5sZW5ndGg9PT0wfWdldEZpZWxkVmFsdWUocil7cmV0dXJuIHRoaXMuZ2V0RmllbGQocik/LnZhbHVlfWdldERlZXBTdWJTZWxlY3Rpb25WYWx1ZShyKXtsZXQgdD10aGlzO2ZvcihsZXQgbiBvZiByKXtpZighKHQgaW5zdGFuY2VvZiBlKSlyZXR1cm47bGV0IGk9dC5nZXRTdWJTZWxlY3Rpb25WYWx1ZShuKTtpZighaSlyZXR1cm47dD1pfXJldHVybiB0fWdldERlZXBTZWxlY3Rpb25QYXJlbnQocil7bGV0IHQ9dGhpcy5nZXRTZWxlY3Rpb25QYXJlbnQoKTtpZighdClyZXR1cm47bGV0IG49dDtmb3IobGV0IGkgb2Ygcil7bGV0IG89bi52YWx1ZS5nZXRGaWVsZFZhbHVlKGkpO2lmKCFvfHwhKG8gaW5zdGFuY2VvZiBlKSlyZXR1cm47bGV0IHM9by5nZXRTZWxlY3Rpb25QYXJlbnQoKTtpZighcylyZXR1cm47bj1zfXJldHVybiBufWdldFNlbGVjdGlvblBhcmVudCgpe2xldCByPXRoaXMuZ2V0RmllbGQoXCJzZWxlY3RcIik/LnZhbHVlLmFzT2JqZWN0KCk7aWYocilyZXR1cm57a2luZDpcInNlbGVjdFwiLHZhbHVlOnJ9O2xldCB0PXRoaXMuZ2V0RmllbGQoXCJpbmNsdWRlXCIpPy52YWx1ZS5hc09iamVjdCgpO2lmKHQpcmV0dXJue2tpbmQ6XCJpbmNsdWRlXCIsdmFsdWU6dH19Z2V0U3ViU2VsZWN0aW9uVmFsdWUocil7cmV0dXJuIHRoaXMuZ2V0U2VsZWN0aW9uUGFyZW50KCk/LnZhbHVlLmZpZWxkc1tyXS52YWx1ZX1nZXRQcmludFdpZHRoKCl7bGV0IHI9T2JqZWN0LnZhbHVlcyh0aGlzLmZpZWxkcyk7cmV0dXJuIHIubGVuZ3RoPT0wPzI6TWF0aC5tYXgoLi4uci5tYXAobj0+bi5nZXRQcmludFdpZHRoKCkpKSsyfXdyaXRlKHIpe2xldCB0PU9iamVjdC52YWx1ZXModGhpcy5maWVsZHMpO2lmKHQubGVuZ3RoPT09MCYmdGhpcy5zdWdnZXN0aW9ucy5sZW5ndGg9PT0wKXt0aGlzLndyaXRlRW1wdHkocik7cmV0dXJufXRoaXMud3JpdGVXaXRoQ29udGVudHMocix0KX1hc09iamVjdCgpe3JldHVybiB0aGlzfXdyaXRlRW1wdHkocil7bGV0IHQ9bmV3IFRlKFwie31cIik7dGhpcy5oYXNFcnJvciYmdC5zZXRDb2xvcihyLmNvbnRleHQuY29sb3JzLnJlZCkudW5kZXJsaW5lKCksci53cml0ZSh0KX13cml0ZVdpdGhDb250ZW50cyhyLHQpe3Iud3JpdGVMaW5lKFwie1wiKS53aXRoSW5kZW50KCgpPT57ci53cml0ZUpvaW5lZChJcixbLi4udCwuLi50aGlzLnN1Z2dlc3Rpb25zXSkubmV3TGluZSgpfSksci53cml0ZShcIn1cIiksdGhpcy5oYXNFcnJvciYmci5hZnRlck5leHROZXdsaW5lKCgpPT57ci53cml0ZUxpbmUoci5jb250ZXh0LmNvbG9ycy5yZWQoXCJ+XCIucmVwZWF0KHRoaXMuZ2V0UHJpbnRXaWR0aCgpKSkpfSl9fTt2YXIgUT1jbGFzcyBleHRlbmRzIHple2NvbnN0cnVjdG9yKHQpe3N1cGVyKCk7dGhpcy50ZXh0PXR9Z2V0UHJpbnRXaWR0aCgpe3JldHVybiB0aGlzLnRleHQubGVuZ3RofXdyaXRlKHQpe2xldCBuPW5ldyBUZSh0aGlzLnRleHQpO3RoaXMuaGFzRXJyb3ImJm4udW5kZXJsaW5lKCkuc2V0Q29sb3IodC5jb250ZXh0LmNvbG9ycy5yZWQpLHQud3JpdGUobil9YXNPYmplY3QoKXt9fTt2YXIgcHQ9Y2xhc3N7ZmllbGRzPVtdO2FkZEZpZWxkKHIsdCl7cmV0dXJuIHRoaXMuZmllbGRzLnB1c2goe3dyaXRlKG4pe2xldHtncmVlbjppLGRpbTpvfT1uLmNvbnRleHQuY29sb3JzO24ud3JpdGUoaShvKGAke3J9OiAke3R9YCkpKS5hZGRNYXJnaW5TeW1ib2woaShvKFwiK1wiKSkpfX0pLHRoaXN9d3JpdGUocil7bGV0e2NvbG9yczp7Z3JlZW46dH19PXIuY29udGV4dDtyLndyaXRlTGluZSh0KFwie1wiKSkud2l0aEluZGVudCgoKT0+e3Iud3JpdGVKb2luZWQoSXIsdGhpcy5maWVsZHMpLm5ld0xpbmUoKX0pLndyaXRlKHQoXCJ9XCIpKS5hZGRNYXJnaW5TeW1ib2wodChcIitcIikpfX07ZnVuY3Rpb24gVG4oZSxyLHQpe3N3aXRjaChlLmtpbmQpe2Nhc2VcIk11dHVhbGx5RXhjbHVzaXZlRmllbGRzXCI6X2QoZSxyKTticmVhaztjYXNlXCJJbmNsdWRlT25TY2FsYXJcIjpOZChlLHIpO2JyZWFrO2Nhc2VcIkVtcHR5U2VsZWN0aW9uXCI6TGQoZSxyLHQpO2JyZWFrO2Nhc2VcIlVua25vd25TZWxlY3Rpb25GaWVsZFwiOnFkKGUscik7YnJlYWs7Y2FzZVwiSW52YWxpZFNlbGVjdGlvblZhbHVlXCI6amQoZSxyKTticmVhaztjYXNlXCJVbmtub3duQXJndW1lbnRcIjpWZChlLHIpO2JyZWFrO2Nhc2VcIlVua25vd25JbnB1dEZpZWxkXCI6QmQoZSxyKTticmVhaztjYXNlXCJSZXF1aXJlZEFyZ3VtZW50TWlzc2luZ1wiOlVkKGUscik7YnJlYWs7Y2FzZVwiSW52YWxpZEFyZ3VtZW50VHlwZVwiOkdkKGUscik7YnJlYWs7Y2FzZVwiSW52YWxpZEFyZ3VtZW50VmFsdWVcIjpRZChlLHIpO2JyZWFrO2Nhc2VcIlZhbHVlVG9vTGFyZ2VcIjpXZChlLHIpO2JyZWFrO2Nhc2VcIlNvbWVGaWVsZHNNaXNzaW5nXCI6SmQoZSxyKTticmVhaztjYXNlXCJUb29NYW55RmllbGRzR2l2ZW5cIjpIZChlLHIpO2JyZWFrO2Nhc2VcIlVuaW9uXCI6bGEoZSxyLHQpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFwibm90IGltcGxlbWVudGVkOiBcIitlLmtpbmQpfX1mdW5jdGlvbiBfZChlLHIpe2xldCB0PXIuYXJndW1lbnRzLmdldERlZXBTdWJTZWxlY3Rpb25WYWx1ZShlLnNlbGVjdGlvblBhdGgpPy5hc09iamVjdCgpO3QmJih0LmdldEZpZWxkKGUuZmlyc3RGaWVsZCk/Lm1hcmtBc0Vycm9yKCksdC5nZXRGaWVsZChlLnNlY29uZEZpZWxkKT8ubWFya0FzRXJyb3IoKSksci5hZGRFcnJvck1lc3NhZ2Uobj0+YFBsZWFzZSAke24uYm9sZChcImVpdGhlclwiKX0gdXNlICR7bi5ncmVlbihgXFxgJHtlLmZpcnN0RmllbGR9XFxgYCl9IG9yICR7bi5ncmVlbihgXFxgJHtlLnNlY29uZEZpZWxkfVxcYGApfSwgYnV0ICR7bi5yZWQoXCJub3QgYm90aFwiKX0gYXQgdGhlIHNhbWUgdGltZS5gKX1mdW5jdGlvbiBOZChlLHIpe2xldFt0LG5dPU9yKGUuc2VsZWN0aW9uUGF0aCksaT1lLm91dHB1dFR5cGUsbz1yLmFyZ3VtZW50cy5nZXREZWVwU2VsZWN0aW9uUGFyZW50KHQpPy52YWx1ZTtpZihvJiYoby5nZXRGaWVsZChuKT8ubWFya0FzRXJyb3IoKSxpKSlmb3IobGV0IHMgb2YgaS5maWVsZHMpcy5pc1JlbGF0aW9uJiZvLmFkZFN1Z2dlc3Rpb24obmV3IHVlKHMubmFtZSxcInRydWVcIikpO3IuYWRkRXJyb3JNZXNzYWdlKHM9PntsZXQgYT1gSW52YWxpZCBzY2FsYXIgZmllbGQgJHtzLnJlZChgXFxgJHtufVxcYGApfSBmb3IgJHtzLmJvbGQoXCJpbmNsdWRlXCIpfSBzdGF0ZW1lbnRgO3JldHVybiBpP2ErPWAgb24gbW9kZWwgJHtzLmJvbGQoaS5uYW1lKX0uICR7ZHQocyl9YDphKz1cIi5cIixhKz1gXG5Ob3RlIHRoYXQgJHtzLmJvbGQoXCJpbmNsdWRlXCIpfSBzdGF0ZW1lbnRzIG9ubHkgYWNjZXB0IHJlbGF0aW9uIGZpZWxkcy5gLGF9KX1mdW5jdGlvbiBMZChlLHIsdCl7bGV0IG49ci5hcmd1bWVudHMuZ2V0RGVlcFN1YlNlbGVjdGlvblZhbHVlKGUuc2VsZWN0aW9uUGF0aCk/LmFzT2JqZWN0KCk7aWYobil7bGV0IGk9bi5nZXRGaWVsZChcIm9taXRcIik/LnZhbHVlLmFzT2JqZWN0KCk7aWYoaSl7RmQoZSxyLGkpO3JldHVybn1pZihuLmhhc0ZpZWxkKFwic2VsZWN0XCIpKXtNZChlLHIpO3JldHVybn19aWYodD8uW1llKGUub3V0cHV0VHlwZS5uYW1lKV0peyRkKGUscik7cmV0dXJufXIuYWRkRXJyb3JNZXNzYWdlKCgpPT5gVW5rbm93biBmaWVsZCBhdCBcIiR7ZS5zZWxlY3Rpb25QYXRoLmpvaW4oXCIuXCIpfSBzZWxlY3Rpb25cImApfWZ1bmN0aW9uIEZkKGUscix0KXt0LnJlbW92ZUFsbEZpZWxkcygpO2ZvcihsZXQgbiBvZiBlLm91dHB1dFR5cGUuZmllbGRzKXQuYWRkU3VnZ2VzdGlvbihuZXcgdWUobi5uYW1lLFwiZmFsc2VcIikpO3IuYWRkRXJyb3JNZXNzYWdlKG49PmBUaGUgJHtuLnJlZChcIm9taXRcIil9IHN0YXRlbWVudCBpbmNsdWRlcyBldmVyeSBmaWVsZCBvZiB0aGUgbW9kZWwgJHtuLmJvbGQoZS5vdXRwdXRUeXBlLm5hbWUpfS4gQXQgbGVhc3Qgb25lIGZpZWxkIG11c3QgYmUgaW5jbHVkZWQgaW4gdGhlIHJlc3VsdGApfWZ1bmN0aW9uIE1kKGUscil7bGV0IHQ9ZS5vdXRwdXRUeXBlLG49ci5hcmd1bWVudHMuZ2V0RGVlcFNlbGVjdGlvblBhcmVudChlLnNlbGVjdGlvblBhdGgpPy52YWx1ZSxpPW4/LmlzRW1wdHkoKT8/ITE7biYmKG4ucmVtb3ZlQWxsRmllbGRzKCksaGEobix0KSksci5hZGRFcnJvck1lc3NhZ2Uobz0+aT9gVGhlICR7by5yZWQoXCJgc2VsZWN0YFwiKX0gc3RhdGVtZW50IGZvciB0eXBlICR7by5ib2xkKHQubmFtZSl9IG11c3Qgbm90IGJlIGVtcHR5LiAke2R0KG8pfWA6YFRoZSAke28ucmVkKFwiYHNlbGVjdGBcIil9IHN0YXRlbWVudCBmb3IgdHlwZSAke28uYm9sZCh0Lm5hbWUpfSBuZWVkcyAke28uYm9sZChcImF0IGxlYXN0IG9uZSB0cnV0aHkgdmFsdWVcIil9LmApfWZ1bmN0aW9uICRkKGUscil7bGV0IHQ9bmV3IHB0O2ZvcihsZXQgaSBvZiBlLm91dHB1dFR5cGUuZmllbGRzKWkuaXNSZWxhdGlvbnx8dC5hZGRGaWVsZChpLm5hbWUsXCJmYWxzZVwiKTtsZXQgbj1uZXcgdWUoXCJvbWl0XCIsdCkubWFrZVJlcXVpcmVkKCk7aWYoZS5zZWxlY3Rpb25QYXRoLmxlbmd0aD09PTApci5hcmd1bWVudHMuYWRkU3VnZ2VzdGlvbihuKTtlbHNle2xldFtpLG9dPU9yKGUuc2VsZWN0aW9uUGF0aCksYT1yLmFyZ3VtZW50cy5nZXREZWVwU2VsZWN0aW9uUGFyZW50KGkpPy52YWx1ZS5hc09iamVjdCgpPy5nZXRGaWVsZChvKTtpZihhKXtsZXQgbD1hPy52YWx1ZS5hc09iamVjdCgpPz9uZXcgRHI7bC5hZGRTdWdnZXN0aW9uKG4pLGEudmFsdWU9bH19ci5hZGRFcnJvck1lc3NhZ2UoaT0+YFRoZSBnbG9iYWwgJHtpLnJlZChcIm9taXRcIil9IGNvbmZpZ3VyYXRpb24gZXhjbHVkZXMgZXZlcnkgZmllbGQgb2YgdGhlIG1vZGVsICR7aS5ib2xkKGUub3V0cHV0VHlwZS5uYW1lKX0uIEF0IGxlYXN0IG9uZSBmaWVsZCBtdXN0IGJlIGluY2x1ZGVkIGluIHRoZSByZXN1bHRgKX1mdW5jdGlvbiBxZChlLHIpe2xldCB0PXlhKGUuc2VsZWN0aW9uUGF0aCxyKTtpZih0LnBhcmVudEtpbmQhPT1cInVua25vd25cIil7dC5maWVsZC5tYXJrQXNFcnJvcigpO2xldCBuPXQucGFyZW50O3N3aXRjaCh0LnBhcmVudEtpbmQpe2Nhc2VcInNlbGVjdFwiOmhhKG4sZS5vdXRwdXRUeXBlKTticmVhaztjYXNlXCJpbmNsdWRlXCI6S2QobixlLm91dHB1dFR5cGUpO2JyZWFrO2Nhc2VcIm9taXRcIjpZZChuLGUub3V0cHV0VHlwZSk7YnJlYWt9fXIuYWRkRXJyb3JNZXNzYWdlKG49PntsZXQgaT1bYFVua25vd24gZmllbGQgJHtuLnJlZChgXFxgJHt0LmZpZWxkTmFtZX1cXGBgKX1gXTtyZXR1cm4gdC5wYXJlbnRLaW5kIT09XCJ1bmtub3duXCImJmkucHVzaChgZm9yICR7bi5ib2xkKHQucGFyZW50S2luZCl9IHN0YXRlbWVudGApLGkucHVzaChgb24gbW9kZWwgJHtuLmJvbGQoYFxcYCR7ZS5vdXRwdXRUeXBlLm5hbWV9XFxgYCl9LmApLGkucHVzaChkdChuKSksaS5qb2luKFwiIFwiKX0pfWZ1bmN0aW9uIGpkKGUscil7bGV0IHQ9eWEoZS5zZWxlY3Rpb25QYXRoLHIpO3QucGFyZW50S2luZCE9PVwidW5rbm93blwiJiZ0LmZpZWxkLnZhbHVlLm1hcmtBc0Vycm9yKCksci5hZGRFcnJvck1lc3NhZ2Uobj0+YEludmFsaWQgdmFsdWUgZm9yIHNlbGVjdGlvbiBmaWVsZCBcXGAke24ucmVkKHQuZmllbGROYW1lKX1cXGA6ICR7ZS51bmRlcmx5aW5nRXJyb3J9YCl9ZnVuY3Rpb24gVmQoZSxyKXtsZXQgdD1lLmFyZ3VtZW50UGF0aFswXSxuPXIuYXJndW1lbnRzLmdldERlZXBTdWJTZWxlY3Rpb25WYWx1ZShlLnNlbGVjdGlvblBhdGgpPy5hc09iamVjdCgpO24mJihuLmdldEZpZWxkKHQpPy5tYXJrQXNFcnJvcigpLHpkKG4sZS5hcmd1bWVudHMpKSxyLmFkZEVycm9yTWVzc2FnZShpPT5mYShpLHQsZS5hcmd1bWVudHMubWFwKG89Pm8ubmFtZSkpKX1mdW5jdGlvbiBCZChlLHIpe2xldFt0LG5dPU9yKGUuYXJndW1lbnRQYXRoKSxpPXIuYXJndW1lbnRzLmdldERlZXBTdWJTZWxlY3Rpb25WYWx1ZShlLnNlbGVjdGlvblBhdGgpPy5hc09iamVjdCgpO2lmKGkpe2kuZ2V0RGVlcEZpZWxkKGUuYXJndW1lbnRQYXRoKT8ubWFya0FzRXJyb3IoKTtsZXQgbz1pLmdldERlZXBGaWVsZFZhbHVlKHQpPy5hc09iamVjdCgpO28mJmJhKG8sZS5pbnB1dFR5cGUpfXIuYWRkRXJyb3JNZXNzYWdlKG89PmZhKG8sbixlLmlucHV0VHlwZS5maWVsZHMubWFwKHM9PnMubmFtZSkpKX1mdW5jdGlvbiBmYShlLHIsdCl7bGV0IG49W2BVbmtub3duIGFyZ3VtZW50IFxcYCR7ZS5yZWQocil9XFxgLmBdLGk9WGQocix0KTtyZXR1cm4gaSYmbi5wdXNoKGBEaWQgeW91IG1lYW4gXFxgJHtlLmdyZWVuKGkpfVxcYD9gKSx0Lmxlbmd0aD4wJiZuLnB1c2goZHQoZSkpLG4uam9pbihcIiBcIil9ZnVuY3Rpb24gVWQoZSxyKXtsZXQgdDtyLmFkZEVycm9yTWVzc2FnZShsPT50Py52YWx1ZSBpbnN0YW5jZW9mIFEmJnQudmFsdWUudGV4dD09PVwibnVsbFwiP2BBcmd1bWVudCBcXGAke2wuZ3JlZW4obyl9XFxgIG11c3Qgbm90IGJlICR7bC5yZWQoXCJudWxsXCIpfS5gOmBBcmd1bWVudCBcXGAke2wuZ3JlZW4obyl9XFxgIGlzIG1pc3NpbmcuYCk7bGV0IG49ci5hcmd1bWVudHMuZ2V0RGVlcFN1YlNlbGVjdGlvblZhbHVlKGUuc2VsZWN0aW9uUGF0aCk/LmFzT2JqZWN0KCk7aWYoIW4pcmV0dXJuO2xldFtpLG9dPU9yKGUuYXJndW1lbnRQYXRoKSxzPW5ldyBwdCxhPW4uZ2V0RGVlcEZpZWxkVmFsdWUoaSk/LmFzT2JqZWN0KCk7aWYoYSl7aWYodD1hLmdldEZpZWxkKG8pLHQmJmEucmVtb3ZlRmllbGQobyksZS5pbnB1dFR5cGVzLmxlbmd0aD09PTEmJmUuaW5wdXRUeXBlc1swXS5raW5kPT09XCJvYmplY3RcIil7Zm9yKGxldCBsIG9mIGUuaW5wdXRUeXBlc1swXS5maWVsZHMpcy5hZGRGaWVsZChsLm5hbWUsbC50eXBlTmFtZXMuam9pbihcIiB8IFwiKSk7YS5hZGRTdWdnZXN0aW9uKG5ldyB1ZShvLHMpLm1ha2VSZXF1aXJlZCgpKX1lbHNle2xldCBsPWUuaW5wdXRUeXBlcy5tYXAoZ2EpLmpvaW4oXCIgfCBcIik7YS5hZGRTdWdnZXN0aW9uKG5ldyB1ZShvLGwpLm1ha2VSZXF1aXJlZCgpKX1pZihlLmRlcGVuZGVudEFyZ3VtZW50UGF0aCl7bi5nZXREZWVwRmllbGQoZS5kZXBlbmRlbnRBcmd1bWVudFBhdGgpPy5tYXJrQXNFcnJvcigpO2xldFssbF09T3IoZS5kZXBlbmRlbnRBcmd1bWVudFBhdGgpO3IuYWRkRXJyb3JNZXNzYWdlKHU9PmBBcmd1bWVudCBcXGAke3UuZ3JlZW4obyl9XFxgIGlzIHJlcXVpcmVkIGJlY2F1c2UgYXJndW1lbnQgXFxgJHt1LmdyZWVuKGwpfVxcYCB3YXMgcHJvdmlkZWQuYCl9fX1mdW5jdGlvbiBnYShlKXtyZXR1cm4gZS5raW5kPT09XCJsaXN0XCI/YCR7Z2EoZS5lbGVtZW50VHlwZSl9W11gOmUubmFtZX1mdW5jdGlvbiBHZChlLHIpe2xldCB0PWUuYXJndW1lbnQubmFtZSxuPXIuYXJndW1lbnRzLmdldERlZXBTdWJTZWxlY3Rpb25WYWx1ZShlLnNlbGVjdGlvblBhdGgpPy5hc09iamVjdCgpO24mJm4uZ2V0RGVlcEZpZWxkVmFsdWUoZS5hcmd1bWVudFBhdGgpPy5tYXJrQXNFcnJvcigpLHIuYWRkRXJyb3JNZXNzYWdlKGk9PntsZXQgbz1DbihcIm9yXCIsZS5hcmd1bWVudC50eXBlTmFtZXMubWFwKHM9PmkuZ3JlZW4ocykpKTtyZXR1cm5gQXJndW1lbnQgXFxgJHtpLmJvbGQodCl9XFxgOiBJbnZhbGlkIHZhbHVlIHByb3ZpZGVkLiBFeHBlY3RlZCAke299LCBwcm92aWRlZCAke2kucmVkKGUuaW5mZXJyZWRUeXBlKX0uYH0pfWZ1bmN0aW9uIFFkKGUscil7bGV0IHQ9ZS5hcmd1bWVudC5uYW1lLG49ci5hcmd1bWVudHMuZ2V0RGVlcFN1YlNlbGVjdGlvblZhbHVlKGUuc2VsZWN0aW9uUGF0aCk/LmFzT2JqZWN0KCk7biYmbi5nZXREZWVwRmllbGRWYWx1ZShlLmFyZ3VtZW50UGF0aCk/Lm1hcmtBc0Vycm9yKCksci5hZGRFcnJvck1lc3NhZ2UoaT0+e2xldCBvPVtgSW52YWxpZCB2YWx1ZSBmb3IgYXJndW1lbnQgXFxgJHtpLmJvbGQodCl9XFxgYF07aWYoZS51bmRlcmx5aW5nRXJyb3ImJm8ucHVzaChgOiAke2UudW5kZXJseWluZ0Vycm9yfWApLG8ucHVzaChcIi5cIiksZS5hcmd1bWVudC50eXBlTmFtZXMubGVuZ3RoPjApe2xldCBzPUNuKFwib3JcIixlLmFyZ3VtZW50LnR5cGVOYW1lcy5tYXAoYT0+aS5ncmVlbihhKSkpO28ucHVzaChgIEV4cGVjdGVkICR7c30uYCl9cmV0dXJuIG8uam9pbihcIlwiKX0pfWZ1bmN0aW9uIFdkKGUscil7bGV0IHQ9ZS5hcmd1bWVudC5uYW1lLG49ci5hcmd1bWVudHMuZ2V0RGVlcFN1YlNlbGVjdGlvblZhbHVlKGUuc2VsZWN0aW9uUGF0aCk/LmFzT2JqZWN0KCksaTtpZihuKXtsZXQgcz1uLmdldERlZXBGaWVsZChlLmFyZ3VtZW50UGF0aCk/LnZhbHVlO3M/Lm1hcmtBc0Vycm9yKCkscyBpbnN0YW5jZW9mIFEmJihpPXMudGV4dCl9ci5hZGRFcnJvck1lc3NhZ2Uobz0+e2xldCBzPVtcIlVuYWJsZSB0byBmaXQgdmFsdWVcIl07cmV0dXJuIGkmJnMucHVzaChvLnJlZChpKSkscy5wdXNoKGBpbnRvIGEgNjQtYml0IHNpZ25lZCBpbnRlZ2VyIGZvciBmaWVsZCBcXGAke28uYm9sZCh0KX1cXGBgKSxzLmpvaW4oXCIgXCIpfSl9ZnVuY3Rpb24gSmQoZSxyKXtsZXQgdD1lLmFyZ3VtZW50UGF0aFtlLmFyZ3VtZW50UGF0aC5sZW5ndGgtMV0sbj1yLmFyZ3VtZW50cy5nZXREZWVwU3ViU2VsZWN0aW9uVmFsdWUoZS5zZWxlY3Rpb25QYXRoKT8uYXNPYmplY3QoKTtpZihuKXtsZXQgaT1uLmdldERlZXBGaWVsZFZhbHVlKGUuYXJndW1lbnRQYXRoKT8uYXNPYmplY3QoKTtpJiZiYShpLGUuaW5wdXRUeXBlKX1yLmFkZEVycm9yTWVzc2FnZShpPT57bGV0IG89W2BBcmd1bWVudCBcXGAke2kuYm9sZCh0KX1cXGAgb2YgdHlwZSAke2kuYm9sZChlLmlucHV0VHlwZS5uYW1lKX0gbmVlZHNgXTtyZXR1cm4gZS5jb25zdHJhaW50cy5taW5GaWVsZENvdW50PT09MT9lLmNvbnN0cmFpbnRzLnJlcXVpcmVkRmllbGRzP28ucHVzaChgJHtpLmdyZWVuKFwiYXQgbGVhc3Qgb25lIG9mXCIpfSAke0NuKFwib3JcIixlLmNvbnN0cmFpbnRzLnJlcXVpcmVkRmllbGRzLm1hcChzPT5gXFxgJHtpLmJvbGQocyl9XFxgYCkpfSBhcmd1bWVudHMuYCk6by5wdXNoKGAke2kuZ3JlZW4oXCJhdCBsZWFzdCBvbmVcIil9IGFyZ3VtZW50LmApOm8ucHVzaChgJHtpLmdyZWVuKGBhdCBsZWFzdCAke2UuY29uc3RyYWludHMubWluRmllbGRDb3VudH1gKX0gYXJndW1lbnRzLmApLG8ucHVzaChkdChpKSksby5qb2luKFwiIFwiKX0pfWZ1bmN0aW9uIEhkKGUscil7bGV0IHQ9ZS5hcmd1bWVudFBhdGhbZS5hcmd1bWVudFBhdGgubGVuZ3RoLTFdLG49ci5hcmd1bWVudHMuZ2V0RGVlcFN1YlNlbGVjdGlvblZhbHVlKGUuc2VsZWN0aW9uUGF0aCk/LmFzT2JqZWN0KCksaT1bXTtpZihuKXtsZXQgbz1uLmdldERlZXBGaWVsZFZhbHVlKGUuYXJndW1lbnRQYXRoKT8uYXNPYmplY3QoKTtvJiYoby5tYXJrQXNFcnJvcigpLGk9T2JqZWN0LmtleXMoby5nZXRGaWVsZHMoKSkpfXIuYWRkRXJyb3JNZXNzYWdlKG89PntsZXQgcz1bYEFyZ3VtZW50IFxcYCR7by5ib2xkKHQpfVxcYCBvZiB0eXBlICR7by5ib2xkKGUuaW5wdXRUeXBlLm5hbWUpfSBuZWVkc2BdO3JldHVybiBlLmNvbnN0cmFpbnRzLm1pbkZpZWxkQ291bnQ9PT0xJiZlLmNvbnN0cmFpbnRzLm1heEZpZWxkQ291bnQ9PTE/cy5wdXNoKGAke28uZ3JlZW4oXCJleGFjdGx5IG9uZVwiKX0gYXJndW1lbnQsYCk6ZS5jb25zdHJhaW50cy5tYXhGaWVsZENvdW50PT0xP3MucHVzaChgJHtvLmdyZWVuKFwiYXQgbW9zdCBvbmVcIil9IGFyZ3VtZW50LGApOnMucHVzaChgJHtvLmdyZWVuKGBhdCBtb3N0ICR7ZS5jb25zdHJhaW50cy5tYXhGaWVsZENvdW50fWApfSBhcmd1bWVudHMsYCkscy5wdXNoKGBidXQgeW91IHByb3ZpZGVkICR7Q24oXCJhbmRcIixpLm1hcChhPT5vLnJlZChhKSkpfS4gUGxlYXNlIGNob29zZWApLGUuY29uc3RyYWludHMubWF4RmllbGRDb3VudD09PTE/cy5wdXNoKFwib25lLlwiKTpzLnB1c2goYCR7ZS5jb25zdHJhaW50cy5tYXhGaWVsZENvdW50fS5gKSxzLmpvaW4oXCIgXCIpfSl9ZnVuY3Rpb24gaGEoZSxyKXtmb3IobGV0IHQgb2Ygci5maWVsZHMpZS5oYXNGaWVsZCh0Lm5hbWUpfHxlLmFkZFN1Z2dlc3Rpb24obmV3IHVlKHQubmFtZSxcInRydWVcIikpfWZ1bmN0aW9uIEtkKGUscil7Zm9yKGxldCB0IG9mIHIuZmllbGRzKXQuaXNSZWxhdGlvbiYmIWUuaGFzRmllbGQodC5uYW1lKSYmZS5hZGRTdWdnZXN0aW9uKG5ldyB1ZSh0Lm5hbWUsXCJ0cnVlXCIpKX1mdW5jdGlvbiBZZChlLHIpe2ZvcihsZXQgdCBvZiByLmZpZWxkcykhZS5oYXNGaWVsZCh0Lm5hbWUpJiYhdC5pc1JlbGF0aW9uJiZlLmFkZFN1Z2dlc3Rpb24obmV3IHVlKHQubmFtZSxcInRydWVcIikpfWZ1bmN0aW9uIHpkKGUscil7Zm9yKGxldCB0IG9mIHIpZS5oYXNGaWVsZCh0Lm5hbWUpfHxlLmFkZFN1Z2dlc3Rpb24obmV3IHVlKHQubmFtZSx0LnR5cGVOYW1lcy5qb2luKFwiIHwgXCIpKSl9ZnVuY3Rpb24geWEoZSxyKXtsZXRbdCxuXT1PcihlKSxpPXIuYXJndW1lbnRzLmdldERlZXBTdWJTZWxlY3Rpb25WYWx1ZSh0KT8uYXNPYmplY3QoKTtpZighaSlyZXR1cm57cGFyZW50S2luZDpcInVua25vd25cIixmaWVsZE5hbWU6bn07bGV0IG89aS5nZXRGaWVsZFZhbHVlKFwic2VsZWN0XCIpPy5hc09iamVjdCgpLHM9aS5nZXRGaWVsZFZhbHVlKFwiaW5jbHVkZVwiKT8uYXNPYmplY3QoKSxhPWkuZ2V0RmllbGRWYWx1ZShcIm9taXRcIik/LmFzT2JqZWN0KCksbD1vPy5nZXRGaWVsZChuKTtyZXR1cm4gbyYmbD97cGFyZW50S2luZDpcInNlbGVjdFwiLHBhcmVudDpvLGZpZWxkOmwsZmllbGROYW1lOm59OihsPXM/LmdldEZpZWxkKG4pLHMmJmw/e3BhcmVudEtpbmQ6XCJpbmNsdWRlXCIsZmllbGQ6bCxwYXJlbnQ6cyxmaWVsZE5hbWU6bn06KGw9YT8uZ2V0RmllbGQobiksYSYmbD97cGFyZW50S2luZDpcIm9taXRcIixmaWVsZDpsLHBhcmVudDphLGZpZWxkTmFtZTpufTp7cGFyZW50S2luZDpcInVua25vd25cIixmaWVsZE5hbWU6bn0pKX1mdW5jdGlvbiBiYShlLHIpe2lmKHIua2luZD09PVwib2JqZWN0XCIpZm9yKGxldCB0IG9mIHIuZmllbGRzKWUuaGFzRmllbGQodC5uYW1lKXx8ZS5hZGRTdWdnZXN0aW9uKG5ldyB1ZSh0Lm5hbWUsdC50eXBlTmFtZXMuam9pbihcIiB8IFwiKSkpfWZ1bmN0aW9uIE9yKGUpe2xldCByPVsuLi5lXSx0PXIucG9wKCk7aWYoIXQpdGhyb3cgbmV3IEVycm9yKFwidW5leHBlY3RlZCBlbXB0eSBwYXRoXCIpO3JldHVybltyLHRdfWZ1bmN0aW9uIGR0KHtncmVlbjplLGVuYWJsZWQ6cn0pe3JldHVyblwiQXZhaWxhYmxlIG9wdGlvbnMgYXJlIFwiKyhyP2BsaXN0ZWQgaW4gJHtlKFwiZ3JlZW5cIil9YDpcIm1hcmtlZCB3aXRoID9cIikrXCIuXCJ9ZnVuY3Rpb24gQ24oZSxyKXtpZihyLmxlbmd0aD09PTEpcmV0dXJuIHJbMF07bGV0IHQ9Wy4uLnJdLG49dC5wb3AoKTtyZXR1cm5gJHt0LmpvaW4oXCIsIFwiKX0gJHtlfSAke259YH12YXIgWmQ9MztmdW5jdGlvbiBYZChlLHIpe2xldCB0PTEvMCxuO2ZvcihsZXQgaSBvZiByKXtsZXQgbz0oMCxtYS5kZWZhdWx0KShlLGkpO28+WmR8fG88dCYmKHQ9byxuPWkpfXJldHVybiBufXZhciBtdD1jbGFzc3ttb2RlbE5hbWU7bmFtZTt0eXBlTmFtZTtpc0xpc3Q7aXNFbnVtO2NvbnN0cnVjdG9yKHIsdCxuLGksbyl7dGhpcy5tb2RlbE5hbWU9cix0aGlzLm5hbWU9dCx0aGlzLnR5cGVOYW1lPW4sdGhpcy5pc0xpc3Q9aSx0aGlzLmlzRW51bT1vfV90b0dyYXBoUUxJbnB1dFR5cGUoKXtsZXQgcj10aGlzLmlzTGlzdD9cIkxpc3RcIjpcIlwiLHQ9dGhpcy5pc0VudW0/XCJFbnVtXCI6XCJcIjtyZXR1cm5gJHtyfSR7dH0ke3RoaXMudHlwZU5hbWV9RmllbGRSZWZJbnB1dDwke3RoaXMubW9kZWxOYW1lfT5gfX07ZnVuY3Rpb24gX3IoZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBtdH12YXIgSW49U3ltYm9sKCksemk9bmV3IFdlYWtNYXAsTWU9Y2xhc3N7Y29uc3RydWN0b3Iocil7cj09PUluP3ppLnNldCh0aGlzLGBQcmlzbWEuJHt0aGlzLl9nZXROYW1lKCl9YCk6emkuc2V0KHRoaXMsYG5ldyBQcmlzbWEuJHt0aGlzLl9nZXROYW1lc3BhY2UoKX0uJHt0aGlzLl9nZXROYW1lKCl9KClgKX1fZ2V0TmFtZSgpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5hbWV9dG9TdHJpbmcoKXtyZXR1cm4gemkuZ2V0KHRoaXMpfX0sZnQ9Y2xhc3MgZXh0ZW5kcyBNZXtfZ2V0TmFtZXNwYWNlKCl7cmV0dXJuXCJOdWxsVHlwZXNcIn19LGd0PWNsYXNzIGV4dGVuZHMgZnR7I2V9O1ppKGd0LFwiRGJOdWxsXCIpO3ZhciBodD1jbGFzcyBleHRlbmRzIGZ0eyNlfTtaaShodCxcIkpzb25OdWxsXCIpO3ZhciB5dD1jbGFzcyBleHRlbmRzIGZ0eyNlfTtaaSh5dCxcIkFueU51bGxcIik7dmFyIGtuPXtjbGFzc2VzOntEYk51bGw6Z3QsSnNvbk51bGw6aHQsQW55TnVsbDp5dH0saW5zdGFuY2VzOntEYk51bGw6bmV3IGd0KEluKSxKc29uTnVsbDpuZXcgaHQoSW4pLEFueU51bGw6bmV3IHl0KEluKX19O2Z1bmN0aW9uIFppKGUscil7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJuYW1lXCIse3ZhbHVlOnIsY29uZmlndXJhYmxlOiEwfSl9dmFyIEVhPVwiOiBcIixEbj1jbGFzc3tjb25zdHJ1Y3RvcihyLHQpe3RoaXMubmFtZT1yO3RoaXMudmFsdWU9dH1oYXNFcnJvcj0hMTttYXJrQXNFcnJvcigpe3RoaXMuaGFzRXJyb3I9ITB9Z2V0UHJpbnRXaWR0aCgpe3JldHVybiB0aGlzLm5hbWUubGVuZ3RoK3RoaXMudmFsdWUuZ2V0UHJpbnRXaWR0aCgpK0VhLmxlbmd0aH13cml0ZShyKXtsZXQgdD1uZXcgVGUodGhpcy5uYW1lKTt0aGlzLmhhc0Vycm9yJiZ0LnVuZGVybGluZSgpLnNldENvbG9yKHIuY29udGV4dC5jb2xvcnMucmVkKSxyLndyaXRlKHQpLndyaXRlKEVhKS53cml0ZSh0aGlzLnZhbHVlKX19O3ZhciBYaT1jbGFzc3thcmd1bWVudHM7ZXJyb3JNZXNzYWdlcz1bXTtjb25zdHJ1Y3RvcihyKXt0aGlzLmFyZ3VtZW50cz1yfXdyaXRlKHIpe3Iud3JpdGUodGhpcy5hcmd1bWVudHMpfWFkZEVycm9yTWVzc2FnZShyKXt0aGlzLmVycm9yTWVzc2FnZXMucHVzaChyKX1yZW5kZXJBbGxNZXNzYWdlcyhyKXtyZXR1cm4gdGhpcy5lcnJvck1lc3NhZ2VzLm1hcCh0PT50KHIpKS5qb2luKGBcbmApfX07ZnVuY3Rpb24gTnIoZSl7cmV0dXJuIG5ldyBYaSh3YShlKSl9ZnVuY3Rpb24gd2EoZSl7bGV0IHI9bmV3IERyO2ZvcihsZXRbdCxuXW9mIE9iamVjdC5lbnRyaWVzKGUpKXtsZXQgaT1uZXcgRG4odCx4YShuKSk7ci5hZGRGaWVsZChpKX1yZXR1cm4gcn1mdW5jdGlvbiB4YShlKXtpZih0eXBlb2YgZT09XCJzdHJpbmdcIilyZXR1cm4gbmV3IFEoSlNPTi5zdHJpbmdpZnkoZSkpO2lmKHR5cGVvZiBlPT1cIm51bWJlclwifHx0eXBlb2YgZT09XCJib29sZWFuXCIpcmV0dXJuIG5ldyBRKFN0cmluZyhlKSk7aWYodHlwZW9mIGU9PVwiYmlnaW50XCIpcmV0dXJuIG5ldyBRKGAke2V9bmApO2lmKGU9PT1udWxsKXJldHVybiBuZXcgUShcIm51bGxcIik7aWYoZT09PXZvaWQgMClyZXR1cm4gbmV3IFEoXCJ1bmRlZmluZWRcIik7aWYoUnIoZSkpcmV0dXJuIG5ldyBRKGBuZXcgUHJpc21hLkRlY2ltYWwoXCIke2UudG9GaXhlZCgpfVwiKWApO2lmKGUgaW5zdGFuY2VvZiBVaW50OEFycmF5KXJldHVybiBCdWZmZXIuaXNCdWZmZXIoZSk/bmV3IFEoYEJ1ZmZlci5hbGxvYygke2UuYnl0ZUxlbmd0aH0pYCk6bmV3IFEoYG5ldyBVaW50OEFycmF5KCR7ZS5ieXRlTGVuZ3RofSlgKTtpZihlIGluc3RhbmNlb2YgRGF0ZSl7bGV0IHI9d24oZSk/ZS50b0lTT1N0cmluZygpOlwiSW52YWxpZCBEYXRlXCI7cmV0dXJuIG5ldyBRKGBuZXcgRGF0ZShcIiR7cn1cIilgKX1yZXR1cm4gZSBpbnN0YW5jZW9mIE1lP25ldyBRKGBQcmlzbWEuJHtlLl9nZXROYW1lKCl9YCk6X3IoZSk/bmV3IFEoYHByaXNtYS4ke1llKGUubW9kZWxOYW1lKX0uJGZpZWxkcy4ke2UubmFtZX1gKTpBcnJheS5pc0FycmF5KGUpP2VtKGUpOnR5cGVvZiBlPT1cIm9iamVjdFwiP3dhKGUpOm5ldyBRKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKSl9ZnVuY3Rpb24gZW0oZSl7bGV0IHI9bmV3IGtyO2ZvcihsZXQgdCBvZiBlKXIuYWRkSXRlbSh4YSh0KSk7cmV0dXJuIHJ9ZnVuY3Rpb24gT24oZSxyKXtsZXQgdD1yPT09XCJwcmV0dHlcIj9kYTpBbixuPWUucmVuZGVyQWxsTWVzc2FnZXModCksaT1uZXcgQ3IoMCx7Y29sb3JzOnR9KS53cml0ZShlKS50b1N0cmluZygpO3JldHVybnttZXNzYWdlOm4sYXJnczppfX1mdW5jdGlvbiBfbih7YXJnczplLGVycm9yczpyLGVycm9yRm9ybWF0OnQsY2FsbHNpdGU6bixvcmlnaW5hbE1ldGhvZDppLGNsaWVudFZlcnNpb246byxnbG9iYWxPbWl0OnN9KXtsZXQgYT1OcihlKTtmb3IobGV0IHAgb2YgcilUbihwLGEscyk7bGV0e21lc3NhZ2U6bCxhcmdzOnV9PU9uKGEsdCksYz1Qbih7bWVzc2FnZTpsLGNhbGxzaXRlOm4sb3JpZ2luYWxNZXRob2Q6aSxzaG93Q29sb3JzOnQ9PT1cInByZXR0eVwiLGNhbGxBcmd1bWVudHM6dX0pO3Rocm93IG5ldyBaKGMse2NsaWVudFZlcnNpb246b30pfWZ1bmN0aW9uIFNlKGUpe3JldHVybiBlLnJlcGxhY2UoL14uLyxyPT5yLnRvTG93ZXJDYXNlKCkpfWZ1bmN0aW9uIFBhKGUscix0KXtsZXQgbj1TZSh0KTtyZXR1cm4hci5yZXN1bHR8fCEoci5yZXN1bHQuJGFsbE1vZGVsc3x8ci5yZXN1bHRbbl0pP2U6cm0oey4uLmUsLi4udmEoci5uYW1lLGUsci5yZXN1bHQuJGFsbE1vZGVscyksLi4udmEoci5uYW1lLGUsci5yZXN1bHRbbl0pfSl9ZnVuY3Rpb24gcm0oZSl7bGV0IHI9bmV3IFBlLHQ9KG4saSk9PnIuZ2V0T3JDcmVhdGUobiwoKT0+aS5oYXMobik/W25dOihpLmFkZChuKSxlW25dP2Vbbl0ubmVlZHMuZmxhdE1hcChvPT50KG8saSkpOltuXSkpO3JldHVybiB4cihlLG49Pih7Li4ubixuZWVkczp0KG4ubmFtZSxuZXcgU2V0KX0pKX1mdW5jdGlvbiB2YShlLHIsdCl7cmV0dXJuIHQ/eHIodCwoe25lZWRzOm4sY29tcHV0ZTppfSxvKT0+KHtuYW1lOm8sbmVlZHM6bj9PYmplY3Qua2V5cyhuKS5maWx0ZXIocz0+bltzXSk6W10sY29tcHV0ZTp0bShyLG8saSl9KSk6e319ZnVuY3Rpb24gdG0oZSxyLHQpe2xldCBuPWU/LltyXT8uY29tcHV0ZTtyZXR1cm4gbj9pPT50KHsuLi5pLFtyXTpuKGkpfSk6dH1mdW5jdGlvbiBUYShlLHIpe2lmKCFyKXJldHVybiBlO2xldCB0PXsuLi5lfTtmb3IobGV0IG4gb2YgT2JqZWN0LnZhbHVlcyhyKSlpZihlW24ubmFtZV0pZm9yKGxldCBpIG9mIG4ubmVlZHMpdFtpXT0hMDtyZXR1cm4gdH1mdW5jdGlvbiBTYShlLHIpe2lmKCFyKXJldHVybiBlO2xldCB0PXsuLi5lfTtmb3IobGV0IG4gb2YgT2JqZWN0LnZhbHVlcyhyKSlpZighZVtuLm5hbWVdKWZvcihsZXQgaSBvZiBuLm5lZWRzKWRlbGV0ZSB0W2ldO3JldHVybiB0fXZhciBObj1jbGFzc3tjb25zdHJ1Y3RvcihyLHQpe3RoaXMuZXh0ZW5zaW9uPXI7dGhpcy5wcmV2aW91cz10fWNvbXB1dGVkRmllbGRzQ2FjaGU9bmV3IFBlO21vZGVsRXh0ZW5zaW9uc0NhY2hlPW5ldyBQZTtxdWVyeUNhbGxiYWNrc0NhY2hlPW5ldyBQZTtjbGllbnRFeHRlbnNpb25zPXV0KCgpPT50aGlzLmV4dGVuc2lvbi5jbGllbnQ/ey4uLnRoaXMucHJldmlvdXM/LmdldEFsbENsaWVudEV4dGVuc2lvbnMoKSwuLi50aGlzLmV4dGVuc2lvbi5jbGllbnR9OnRoaXMucHJldmlvdXM/LmdldEFsbENsaWVudEV4dGVuc2lvbnMoKSk7YmF0Y2hDYWxsYmFja3M9dXQoKCk9PntsZXQgcj10aGlzLnByZXZpb3VzPy5nZXRBbGxCYXRjaFF1ZXJ5Q2FsbGJhY2tzKCk/P1tdLHQ9dGhpcy5leHRlbnNpb24ucXVlcnk/LiRfX2ludGVybmFsQmF0Y2g7cmV0dXJuIHQ/ci5jb25jYXQodCk6cn0pO2dldEFsbENvbXB1dGVkRmllbGRzKHIpe3JldHVybiB0aGlzLmNvbXB1dGVkRmllbGRzQ2FjaGUuZ2V0T3JDcmVhdGUociwoKT0+UGEodGhpcy5wcmV2aW91cz8uZ2V0QWxsQ29tcHV0ZWRGaWVsZHMociksdGhpcy5leHRlbnNpb24scikpfWdldEFsbENsaWVudEV4dGVuc2lvbnMoKXtyZXR1cm4gdGhpcy5jbGllbnRFeHRlbnNpb25zLmdldCgpfWdldEFsbE1vZGVsRXh0ZW5zaW9ucyhyKXtyZXR1cm4gdGhpcy5tb2RlbEV4dGVuc2lvbnNDYWNoZS5nZXRPckNyZWF0ZShyLCgpPT57bGV0IHQ9U2Uocik7cmV0dXJuIXRoaXMuZXh0ZW5zaW9uLm1vZGVsfHwhKHRoaXMuZXh0ZW5zaW9uLm1vZGVsW3RdfHx0aGlzLmV4dGVuc2lvbi5tb2RlbC4kYWxsTW9kZWxzKT90aGlzLnByZXZpb3VzPy5nZXRBbGxNb2RlbEV4dGVuc2lvbnMocik6ey4uLnRoaXMucHJldmlvdXM/LmdldEFsbE1vZGVsRXh0ZW5zaW9ucyhyKSwuLi50aGlzLmV4dGVuc2lvbi5tb2RlbC4kYWxsTW9kZWxzLC4uLnRoaXMuZXh0ZW5zaW9uLm1vZGVsW3RdfX0pfWdldEFsbFF1ZXJ5Q2FsbGJhY2tzKHIsdCl7cmV0dXJuIHRoaXMucXVlcnlDYWxsYmFja3NDYWNoZS5nZXRPckNyZWF0ZShgJHtyfToke3R9YCwoKT0+e2xldCBuPXRoaXMucHJldmlvdXM/LmdldEFsbFF1ZXJ5Q2FsbGJhY2tzKHIsdCk/P1tdLGk9W10sbz10aGlzLmV4dGVuc2lvbi5xdWVyeTtyZXR1cm4hb3x8IShvW3JdfHxvLiRhbGxNb2RlbHN8fG9bdF18fG8uJGFsbE9wZXJhdGlvbnMpP246KG9bcl0hPT12b2lkIDAmJihvW3JdW3RdIT09dm9pZCAwJiZpLnB1c2gob1tyXVt0XSksb1tyXS4kYWxsT3BlcmF0aW9ucyE9PXZvaWQgMCYmaS5wdXNoKG9bcl0uJGFsbE9wZXJhdGlvbnMpKSxyIT09XCIkbm9uZVwiJiZvLiRhbGxNb2RlbHMhPT12b2lkIDAmJihvLiRhbGxNb2RlbHNbdF0hPT12b2lkIDAmJmkucHVzaChvLiRhbGxNb2RlbHNbdF0pLG8uJGFsbE1vZGVscy4kYWxsT3BlcmF0aW9ucyE9PXZvaWQgMCYmaS5wdXNoKG8uJGFsbE1vZGVscy4kYWxsT3BlcmF0aW9ucykpLG9bdF0hPT12b2lkIDAmJmkucHVzaChvW3RdKSxvLiRhbGxPcGVyYXRpb25zIT09dm9pZCAwJiZpLnB1c2goby4kYWxsT3BlcmF0aW9ucyksbi5jb25jYXQoaSkpfSl9Z2V0QWxsQmF0Y2hRdWVyeUNhbGxiYWNrcygpe3JldHVybiB0aGlzLmJhdGNoQ2FsbGJhY2tzLmdldCgpfX0sTHI9Y2xhc3MgZXtjb25zdHJ1Y3RvcihyKXt0aGlzLmhlYWQ9cn1zdGF0aWMgZW1wdHkoKXtyZXR1cm4gbmV3IGV9c3RhdGljIHNpbmdsZShyKXtyZXR1cm4gbmV3IGUobmV3IE5uKHIpKX1pc0VtcHR5KCl7cmV0dXJuIHRoaXMuaGVhZD09PXZvaWQgMH1hcHBlbmQocil7cmV0dXJuIG5ldyBlKG5ldyBObihyLHRoaXMuaGVhZCkpfWdldEFsbENvbXB1dGVkRmllbGRzKHIpe3JldHVybiB0aGlzLmhlYWQ/LmdldEFsbENvbXB1dGVkRmllbGRzKHIpfWdldEFsbENsaWVudEV4dGVuc2lvbnMoKXtyZXR1cm4gdGhpcy5oZWFkPy5nZXRBbGxDbGllbnRFeHRlbnNpb25zKCl9Z2V0QWxsTW9kZWxFeHRlbnNpb25zKHIpe3JldHVybiB0aGlzLmhlYWQ/LmdldEFsbE1vZGVsRXh0ZW5zaW9ucyhyKX1nZXRBbGxRdWVyeUNhbGxiYWNrcyhyLHQpe3JldHVybiB0aGlzLmhlYWQ/LmdldEFsbFF1ZXJ5Q2FsbGJhY2tzKHIsdCk/P1tdfWdldEFsbEJhdGNoUXVlcnlDYWxsYmFja3MoKXtyZXR1cm4gdGhpcy5oZWFkPy5nZXRBbGxCYXRjaFF1ZXJ5Q2FsbGJhY2tzKCk/P1tdfX07dmFyIExuPWNsYXNze2NvbnN0cnVjdG9yKHIpe3RoaXMubmFtZT1yfX07ZnVuY3Rpb24gUmEoZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBMbn1mdW5jdGlvbiBBYShlKXtyZXR1cm4gbmV3IExuKGUpfXZhciBDYT1TeW1ib2woKSxidD1jbGFzc3tjb25zdHJ1Y3RvcihyKXtpZihyIT09Q2EpdGhyb3cgbmV3IEVycm9yKFwiU2tpcCBpbnN0YW5jZSBjYW4gbm90IGJlIGNvbnN0cnVjdGVkIGRpcmVjdGx5XCIpfWlmVW5kZWZpbmVkKHIpe3JldHVybiByPT09dm9pZCAwP0ZuOnJ9fSxGbj1uZXcgYnQoQ2EpO2Z1bmN0aW9uIFJlKGUpe3JldHVybiBlIGluc3RhbmNlb2YgYnR9dmFyIG5tPXtmaW5kVW5pcXVlOlwiZmluZFVuaXF1ZVwiLGZpbmRVbmlxdWVPclRocm93OlwiZmluZFVuaXF1ZU9yVGhyb3dcIixmaW5kRmlyc3Q6XCJmaW5kRmlyc3RcIixmaW5kRmlyc3RPclRocm93OlwiZmluZEZpcnN0T3JUaHJvd1wiLGZpbmRNYW55OlwiZmluZE1hbnlcIixjb3VudDpcImFnZ3JlZ2F0ZVwiLGNyZWF0ZTpcImNyZWF0ZU9uZVwiLGNyZWF0ZU1hbnk6XCJjcmVhdGVNYW55XCIsY3JlYXRlTWFueUFuZFJldHVybjpcImNyZWF0ZU1hbnlBbmRSZXR1cm5cIix1cGRhdGU6XCJ1cGRhdGVPbmVcIix1cGRhdGVNYW55OlwidXBkYXRlTWFueVwiLHVwZGF0ZU1hbnlBbmRSZXR1cm46XCJ1cGRhdGVNYW55QW5kUmV0dXJuXCIsdXBzZXJ0OlwidXBzZXJ0T25lXCIsZGVsZXRlOlwiZGVsZXRlT25lXCIsZGVsZXRlTWFueTpcImRlbGV0ZU1hbnlcIixleGVjdXRlUmF3OlwiZXhlY3V0ZVJhd1wiLHF1ZXJ5UmF3OlwicXVlcnlSYXdcIixhZ2dyZWdhdGU6XCJhZ2dyZWdhdGVcIixncm91cEJ5OlwiZ3JvdXBCeVwiLHJ1bkNvbW1hbmRSYXc6XCJydW5Db21tYW5kUmF3XCIsZmluZFJhdzpcImZpbmRSYXdcIixhZ2dyZWdhdGVSYXc6XCJhZ2dyZWdhdGVSYXdcIn0sSWE9XCJleHBsaWNpdGx5IGB1bmRlZmluZWRgIHZhbHVlcyBhcmUgbm90IGFsbG93ZWRcIjtmdW5jdGlvbiBNbih7bW9kZWxOYW1lOmUsYWN0aW9uOnIsYXJnczp0LHJ1bnRpbWVEYXRhTW9kZWw6bixleHRlbnNpb25zOmk9THIuZW1wdHkoKSxjYWxsc2l0ZTpvLGNsaWVudE1ldGhvZDpzLGVycm9yRm9ybWF0OmEsY2xpZW50VmVyc2lvbjpsLHByZXZpZXdGZWF0dXJlczp1LGdsb2JhbE9taXQ6Y30pe2xldCBwPW5ldyBlbyh7cnVudGltZURhdGFNb2RlbDpuLG1vZGVsTmFtZTplLGFjdGlvbjpyLHJvb3RBcmdzOnQsY2FsbHNpdGU6byxleHRlbnNpb25zOmksc2VsZWN0aW9uUGF0aDpbXSxhcmd1bWVudFBhdGg6W10sb3JpZ2luYWxNZXRob2Q6cyxlcnJvckZvcm1hdDphLGNsaWVudFZlcnNpb246bCxwcmV2aWV3RmVhdHVyZXM6dSxnbG9iYWxPbWl0OmN9KTtyZXR1cm57bW9kZWxOYW1lOmUsYWN0aW9uOm5tW3JdLHF1ZXJ5OkV0KHQscCl9fWZ1bmN0aW9uIEV0KHtzZWxlY3Q6ZSxpbmNsdWRlOnIsLi4udH09e30sbil7bGV0IGk9dC5vbWl0O3JldHVybiBkZWxldGUgdC5vbWl0LHthcmd1bWVudHM6RGEodCxuKSxzZWxlY3Rpb246aW0oZSxyLGksbil9fWZ1bmN0aW9uIGltKGUscix0LG4pe3JldHVybiBlPyhyP24udGhyb3dWYWxpZGF0aW9uRXJyb3Ioe2tpbmQ6XCJNdXR1YWxseUV4Y2x1c2l2ZUZpZWxkc1wiLGZpcnN0RmllbGQ6XCJpbmNsdWRlXCIsc2Vjb25kRmllbGQ6XCJzZWxlY3RcIixzZWxlY3Rpb25QYXRoOm4uZ2V0U2VsZWN0aW9uUGF0aCgpfSk6dCYmbi50aHJvd1ZhbGlkYXRpb25FcnJvcih7a2luZDpcIk11dHVhbGx5RXhjbHVzaXZlRmllbGRzXCIsZmlyc3RGaWVsZDpcIm9taXRcIixzZWNvbmRGaWVsZDpcInNlbGVjdFwiLHNlbGVjdGlvblBhdGg6bi5nZXRTZWxlY3Rpb25QYXRoKCl9KSxsbShlLG4pKTpvbShuLHIsdCl9ZnVuY3Rpb24gb20oZSxyLHQpe2xldCBuPXt9O3JldHVybiBlLm1vZGVsT3JUeXBlJiYhZS5pc1Jhd0FjdGlvbigpJiYobi4kY29tcG9zaXRlcz0hMCxuLiRzY2FsYXJzPSEwKSxyJiZzbShuLHIsZSksYW0obix0LGUpLG59ZnVuY3Rpb24gc20oZSxyLHQpe2ZvcihsZXRbbixpXW9mIE9iamVjdC5lbnRyaWVzKHIpKXtpZihSZShpKSljb250aW51ZTtsZXQgbz10Lm5lc3RTZWxlY3Rpb24obik7aWYocm8oaSxvKSxpPT09ITF8fGk9PT12b2lkIDApe2Vbbl09ITE7Y29udGludWV9bGV0IHM9dC5maW5kRmllbGQobik7aWYocyYmcy5raW5kIT09XCJvYmplY3RcIiYmdC50aHJvd1ZhbGlkYXRpb25FcnJvcih7a2luZDpcIkluY2x1ZGVPblNjYWxhclwiLHNlbGVjdGlvblBhdGg6dC5nZXRTZWxlY3Rpb25QYXRoKCkuY29uY2F0KG4pLG91dHB1dFR5cGU6dC5nZXRPdXRwdXRUeXBlRGVzY3JpcHRpb24oKX0pLHMpe2Vbbl09RXQoaT09PSEwP3t9Omksbyk7Y29udGludWV9aWYoaT09PSEwKXtlW25dPSEwO2NvbnRpbnVlfWVbbl09RXQoaSxvKX19ZnVuY3Rpb24gYW0oZSxyLHQpe2xldCBuPXQuZ2V0Q29tcHV0ZWRGaWVsZHMoKSxpPXsuLi50LmdldEdsb2JhbE9taXQoKSwuLi5yfSxvPVNhKGksbik7Zm9yKGxldFtzLGFdb2YgT2JqZWN0LmVudHJpZXMobykpe2lmKFJlKGEpKWNvbnRpbnVlO3JvKGEsdC5uZXN0U2VsZWN0aW9uKHMpKTtsZXQgbD10LmZpbmRGaWVsZChzKTtuPy5bc10mJiFsfHwoZVtzXT0hYSl9fWZ1bmN0aW9uIGxtKGUscil7bGV0IHQ9e30sbj1yLmdldENvbXB1dGVkRmllbGRzKCksaT1UYShlLG4pO2ZvcihsZXRbbyxzXW9mIE9iamVjdC5lbnRyaWVzKGkpKXtpZihSZShzKSljb250aW51ZTtsZXQgYT1yLm5lc3RTZWxlY3Rpb24obyk7cm8ocyxhKTtsZXQgbD1yLmZpbmRGaWVsZChvKTtpZighKG4/LltvXSYmIWwpKXtpZihzPT09ITF8fHM9PT12b2lkIDB8fFJlKHMpKXt0W29dPSExO2NvbnRpbnVlfWlmKHM9PT0hMCl7bD8ua2luZD09PVwib2JqZWN0XCI/dFtvXT1FdCh7fSxhKTp0W29dPSEwO2NvbnRpbnVlfXRbb109RXQocyxhKX19cmV0dXJuIHR9ZnVuY3Rpb24ga2EoZSxyKXtpZihlPT09bnVsbClyZXR1cm4gbnVsbDtpZih0eXBlb2YgZT09XCJzdHJpbmdcInx8dHlwZW9mIGU9PVwibnVtYmVyXCJ8fHR5cGVvZiBlPT1cImJvb2xlYW5cIilyZXR1cm4gZTtpZih0eXBlb2YgZT09XCJiaWdpbnRcIilyZXR1cm57JHR5cGU6XCJCaWdJbnRcIix2YWx1ZTpTdHJpbmcoZSl9O2lmKFNyKGUpKXtpZih3bihlKSlyZXR1cm57JHR5cGU6XCJEYXRlVGltZVwiLHZhbHVlOmUudG9JU09TdHJpbmcoKX07ci50aHJvd1ZhbGlkYXRpb25FcnJvcih7a2luZDpcIkludmFsaWRBcmd1bWVudFZhbHVlXCIsc2VsZWN0aW9uUGF0aDpyLmdldFNlbGVjdGlvblBhdGgoKSxhcmd1bWVudFBhdGg6ci5nZXRBcmd1bWVudFBhdGgoKSxhcmd1bWVudDp7bmFtZTpyLmdldEFyZ3VtZW50TmFtZSgpLHR5cGVOYW1lczpbXCJEYXRlXCJdfSx1bmRlcmx5aW5nRXJyb3I6XCJQcm92aWRlZCBEYXRlIG9iamVjdCBpcyBpbnZhbGlkXCJ9KX1pZihSYShlKSlyZXR1cm57JHR5cGU6XCJQYXJhbVwiLHZhbHVlOmUubmFtZX07aWYoX3IoZSkpcmV0dXJueyR0eXBlOlwiRmllbGRSZWZcIix2YWx1ZTp7X3JlZjplLm5hbWUsX2NvbnRhaW5lcjplLm1vZGVsTmFtZX19O2lmKEFycmF5LmlzQXJyYXkoZSkpcmV0dXJuIHVtKGUscik7aWYoQXJyYXlCdWZmZXIuaXNWaWV3KGUpKXtsZXR7YnVmZmVyOnQsYnl0ZU9mZnNldDpuLGJ5dGVMZW5ndGg6aX09ZTtyZXR1cm57JHR5cGU6XCJCeXRlc1wiLHZhbHVlOkJ1ZmZlci5mcm9tKHQsbixpKS50b1N0cmluZyhcImJhc2U2NFwiKX19aWYoY20oZSkpcmV0dXJuIGUudmFsdWVzO2lmKFJyKGUpKXJldHVybnskdHlwZTpcIkRlY2ltYWxcIix2YWx1ZTplLnRvRml4ZWQoKX07aWYoZSBpbnN0YW5jZW9mIE1lKXtpZihlIT09a24uaW5zdGFuY2VzW2UuX2dldE5hbWUoKV0pdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBPYmplY3RFbnVtVmFsdWVcIik7cmV0dXJueyR0eXBlOlwiRW51bVwiLHZhbHVlOmUuX2dldE5hbWUoKX19aWYocG0oZSkpcmV0dXJuIGUudG9KU09OKCk7aWYodHlwZW9mIGU9PVwib2JqZWN0XCIpcmV0dXJuIERhKGUscik7ci50aHJvd1ZhbGlkYXRpb25FcnJvcih7a2luZDpcIkludmFsaWRBcmd1bWVudFZhbHVlXCIsc2VsZWN0aW9uUGF0aDpyLmdldFNlbGVjdGlvblBhdGgoKSxhcmd1bWVudFBhdGg6ci5nZXRBcmd1bWVudFBhdGgoKSxhcmd1bWVudDp7bmFtZTpyLmdldEFyZ3VtZW50TmFtZSgpLHR5cGVOYW1lczpbXX0sdW5kZXJseWluZ0Vycm9yOmBXZSBjb3VsZCBub3Qgc2VyaWFsaXplICR7T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfSB2YWx1ZS4gU2VyaWFsaXplIHRoZSBvYmplY3QgdG8gSlNPTiBvciBpbXBsZW1lbnQgYSBcIi50b0pTT04oKVwiIG1ldGhvZCBvbiBpdGB9KX1mdW5jdGlvbiBEYShlLHIpe2lmKGUuJHR5cGUpcmV0dXJueyR0eXBlOlwiUmF3XCIsdmFsdWU6ZX07bGV0IHQ9e307Zm9yKGxldCBuIGluIGUpe2xldCBpPWVbbl0sbz1yLm5lc3RBcmd1bWVudChuKTtSZShpKXx8KGkhPT12b2lkIDA/dFtuXT1rYShpLG8pOnIuaXNQcmV2aWV3RmVhdHVyZU9uKFwic3RyaWN0VW5kZWZpbmVkQ2hlY2tzXCIpJiZyLnRocm93VmFsaWRhdGlvbkVycm9yKHtraW5kOlwiSW52YWxpZEFyZ3VtZW50VmFsdWVcIixhcmd1bWVudFBhdGg6by5nZXRBcmd1bWVudFBhdGgoKSxzZWxlY3Rpb25QYXRoOnIuZ2V0U2VsZWN0aW9uUGF0aCgpLGFyZ3VtZW50OntuYW1lOnIuZ2V0QXJndW1lbnROYW1lKCksdHlwZU5hbWVzOltdfSx1bmRlcmx5aW5nRXJyb3I6SWF9KSl9cmV0dXJuIHR9ZnVuY3Rpb24gdW0oZSxyKXtsZXQgdD1bXTtmb3IobGV0IG49MDtuPGUubGVuZ3RoO24rKyl7bGV0IGk9ci5uZXN0QXJndW1lbnQoU3RyaW5nKG4pKSxvPWVbbl07aWYobz09PXZvaWQgMHx8UmUobykpe2xldCBzPW89PT12b2lkIDA/XCJ1bmRlZmluZWRcIjpcIlByaXNtYS5za2lwXCI7ci50aHJvd1ZhbGlkYXRpb25FcnJvcih7a2luZDpcIkludmFsaWRBcmd1bWVudFZhbHVlXCIsc2VsZWN0aW9uUGF0aDppLmdldFNlbGVjdGlvblBhdGgoKSxhcmd1bWVudFBhdGg6aS5nZXRBcmd1bWVudFBhdGgoKSxhcmd1bWVudDp7bmFtZTpgJHtyLmdldEFyZ3VtZW50TmFtZSgpfVske259XWAsdHlwZU5hbWVzOltdfSx1bmRlcmx5aW5nRXJyb3I6YENhbiBub3QgdXNlIFxcYCR7c31cXGAgdmFsdWUgd2l0aGluIGFycmF5LiBVc2UgXFxgbnVsbFxcYCBvciBmaWx0ZXIgb3V0IFxcYCR7c31cXGAgdmFsdWVzYH0pfXQucHVzaChrYShvLGkpKX1yZXR1cm4gdH1mdW5jdGlvbiBjbShlKXtyZXR1cm4gdHlwZW9mIGU9PVwib2JqZWN0XCImJmUhPT1udWxsJiZlLl9fcHJpc21hUmF3UGFyYW1ldGVyc19fPT09ITB9ZnVuY3Rpb24gcG0oZSl7cmV0dXJuIHR5cGVvZiBlPT1cIm9iamVjdFwiJiZlIT09bnVsbCYmdHlwZW9mIGUudG9KU09OPT1cImZ1bmN0aW9uXCJ9ZnVuY3Rpb24gcm8oZSxyKXtlPT09dm9pZCAwJiZyLmlzUHJldmlld0ZlYXR1cmVPbihcInN0cmljdFVuZGVmaW5lZENoZWNrc1wiKSYmci50aHJvd1ZhbGlkYXRpb25FcnJvcih7a2luZDpcIkludmFsaWRTZWxlY3Rpb25WYWx1ZVwiLHNlbGVjdGlvblBhdGg6ci5nZXRTZWxlY3Rpb25QYXRoKCksdW5kZXJseWluZ0Vycm9yOklhfSl9dmFyIGVvPWNsYXNzIGV7Y29uc3RydWN0b3Iocil7dGhpcy5wYXJhbXM9cjt0aGlzLnBhcmFtcy5tb2RlbE5hbWUmJih0aGlzLm1vZGVsT3JUeXBlPXRoaXMucGFyYW1zLnJ1bnRpbWVEYXRhTW9kZWwubW9kZWxzW3RoaXMucGFyYW1zLm1vZGVsTmFtZV0/P3RoaXMucGFyYW1zLnJ1bnRpbWVEYXRhTW9kZWwudHlwZXNbdGhpcy5wYXJhbXMubW9kZWxOYW1lXSl9bW9kZWxPclR5cGU7dGhyb3dWYWxpZGF0aW9uRXJyb3Iocil7X24oe2Vycm9yczpbcl0sb3JpZ2luYWxNZXRob2Q6dGhpcy5wYXJhbXMub3JpZ2luYWxNZXRob2QsYXJnczp0aGlzLnBhcmFtcy5yb290QXJncz8/e30sY2FsbHNpdGU6dGhpcy5wYXJhbXMuY2FsbHNpdGUsZXJyb3JGb3JtYXQ6dGhpcy5wYXJhbXMuZXJyb3JGb3JtYXQsY2xpZW50VmVyc2lvbjp0aGlzLnBhcmFtcy5jbGllbnRWZXJzaW9uLGdsb2JhbE9taXQ6dGhpcy5wYXJhbXMuZ2xvYmFsT21pdH0pfWdldFNlbGVjdGlvblBhdGgoKXtyZXR1cm4gdGhpcy5wYXJhbXMuc2VsZWN0aW9uUGF0aH1nZXRBcmd1bWVudFBhdGgoKXtyZXR1cm4gdGhpcy5wYXJhbXMuYXJndW1lbnRQYXRofWdldEFyZ3VtZW50TmFtZSgpe3JldHVybiB0aGlzLnBhcmFtcy5hcmd1bWVudFBhdGhbdGhpcy5wYXJhbXMuYXJndW1lbnRQYXRoLmxlbmd0aC0xXX1nZXRPdXRwdXRUeXBlRGVzY3JpcHRpb24oKXtpZighKCF0aGlzLnBhcmFtcy5tb2RlbE5hbWV8fCF0aGlzLm1vZGVsT3JUeXBlKSlyZXR1cm57bmFtZTp0aGlzLnBhcmFtcy5tb2RlbE5hbWUsZmllbGRzOnRoaXMubW9kZWxPclR5cGUuZmllbGRzLm1hcChyPT4oe25hbWU6ci5uYW1lLHR5cGVOYW1lOlwiYm9vbGVhblwiLGlzUmVsYXRpb246ci5raW5kPT09XCJvYmplY3RcIn0pKX19aXNSYXdBY3Rpb24oKXtyZXR1cm5bXCJleGVjdXRlUmF3XCIsXCJxdWVyeVJhd1wiLFwicnVuQ29tbWFuZFJhd1wiLFwiZmluZFJhd1wiLFwiYWdncmVnYXRlUmF3XCJdLmluY2x1ZGVzKHRoaXMucGFyYW1zLmFjdGlvbil9aXNQcmV2aWV3RmVhdHVyZU9uKHIpe3JldHVybiB0aGlzLnBhcmFtcy5wcmV2aWV3RmVhdHVyZXMuaW5jbHVkZXMocil9Z2V0Q29tcHV0ZWRGaWVsZHMoKXtpZih0aGlzLnBhcmFtcy5tb2RlbE5hbWUpcmV0dXJuIHRoaXMucGFyYW1zLmV4dGVuc2lvbnMuZ2V0QWxsQ29tcHV0ZWRGaWVsZHModGhpcy5wYXJhbXMubW9kZWxOYW1lKX1maW5kRmllbGQocil7cmV0dXJuIHRoaXMubW9kZWxPclR5cGU/LmZpZWxkcy5maW5kKHQ9PnQubmFtZT09PXIpfW5lc3RTZWxlY3Rpb24ocil7bGV0IHQ9dGhpcy5maW5kRmllbGQociksbj10Py5raW5kPT09XCJvYmplY3RcIj90LnR5cGU6dm9pZCAwO3JldHVybiBuZXcgZSh7Li4udGhpcy5wYXJhbXMsbW9kZWxOYW1lOm4sc2VsZWN0aW9uUGF0aDp0aGlzLnBhcmFtcy5zZWxlY3Rpb25QYXRoLmNvbmNhdChyKX0pfWdldEdsb2JhbE9taXQoKXtyZXR1cm4gdGhpcy5wYXJhbXMubW9kZWxOYW1lJiZ0aGlzLnNob3VsZEFwcGx5R2xvYmFsT21pdCgpP3RoaXMucGFyYW1zLmdsb2JhbE9taXQ/LltZZSh0aGlzLnBhcmFtcy5tb2RlbE5hbWUpXT8/e306e319c2hvdWxkQXBwbHlHbG9iYWxPbWl0KCl7c3dpdGNoKHRoaXMucGFyYW1zLmFjdGlvbil7Y2FzZVwiZmluZEZpcnN0XCI6Y2FzZVwiZmluZEZpcnN0T3JUaHJvd1wiOmNhc2VcImZpbmRVbmlxdWVPclRocm93XCI6Y2FzZVwiZmluZE1hbnlcIjpjYXNlXCJ1cHNlcnRcIjpjYXNlXCJmaW5kVW5pcXVlXCI6Y2FzZVwiY3JlYXRlTWFueUFuZFJldHVyblwiOmNhc2VcImNyZWF0ZVwiOmNhc2VcInVwZGF0ZVwiOmNhc2VcInVwZGF0ZU1hbnlBbmRSZXR1cm5cIjpjYXNlXCJkZWxldGVcIjpyZXR1cm4hMDtjYXNlXCJleGVjdXRlUmF3XCI6Y2FzZVwiYWdncmVnYXRlUmF3XCI6Y2FzZVwicnVuQ29tbWFuZFJhd1wiOmNhc2VcImZpbmRSYXdcIjpjYXNlXCJjcmVhdGVNYW55XCI6Y2FzZVwiZGVsZXRlTWFueVwiOmNhc2VcImdyb3VwQnlcIjpjYXNlXCJ1cGRhdGVNYW55XCI6Y2FzZVwiY291bnRcIjpjYXNlXCJhZ2dyZWdhdGVcIjpjYXNlXCJxdWVyeVJhd1wiOnJldHVybiExO2RlZmF1bHQ6TmUodGhpcy5wYXJhbXMuYWN0aW9uLFwiVW5rbm93biBhY3Rpb25cIil9fW5lc3RBcmd1bWVudChyKXtyZXR1cm4gbmV3IGUoey4uLnRoaXMucGFyYW1zLGFyZ3VtZW50UGF0aDp0aGlzLnBhcmFtcy5hcmd1bWVudFBhdGguY29uY2F0KHIpfSl9fTtmdW5jdGlvbiBPYShlKXtpZighZS5faGFzUHJldmlld0ZsYWcoXCJtZXRyaWNzXCIpKXRocm93IG5ldyBaKFwiYG1ldHJpY3NgIHByZXZpZXcgZmVhdHVyZSBtdXN0IGJlIGVuYWJsZWQgaW4gb3JkZXIgdG8gYWNjZXNzIG1ldHJpY3MgQVBJXCIse2NsaWVudFZlcnNpb246ZS5fY2xpZW50VmVyc2lvbn0pfXZhciBGcj1jbGFzc3tfY2xpZW50O2NvbnN0cnVjdG9yKHIpe3RoaXMuX2NsaWVudD1yfXByb21ldGhldXMocil7cmV0dXJuIE9hKHRoaXMuX2NsaWVudCksdGhpcy5fY2xpZW50Ll9lbmdpbmUubWV0cmljcyh7Zm9ybWF0OlwicHJvbWV0aGV1c1wiLC4uLnJ9KX1qc29uKHIpe3JldHVybiBPYSh0aGlzLl9jbGllbnQpLHRoaXMuX2NsaWVudC5fZW5naW5lLm1ldHJpY3Moe2Zvcm1hdDpcImpzb25cIiwuLi5yfSl9fTtmdW5jdGlvbiBfYShlLHIpe2xldCB0PXV0KCgpPT5kbShyKSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJkbW1mXCIse2dldDooKT0+dC5nZXQoKX0pfWZ1bmN0aW9uIGRtKGUpe3JldHVybntkYXRhbW9kZWw6e21vZGVsczp0byhlLm1vZGVscyksZW51bXM6dG8oZS5lbnVtcyksdHlwZXM6dG8oZS50eXBlcyl9fX1mdW5jdGlvbiB0byhlKXtyZXR1cm4gT2JqZWN0LmVudHJpZXMoZSkubWFwKChbcix0XSk9Pih7bmFtZTpyLC4uLnR9KSl9dmFyIG5vPW5ldyBXZWFrTWFwLCRuPVwiJCRQcmlzbWFUeXBlZFNxbFwiLHd0PWNsYXNze2NvbnN0cnVjdG9yKHIsdCl7bm8uc2V0KHRoaXMse3NxbDpyLHZhbHVlczp0fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsJG4se3ZhbHVlOiRufSl9Z2V0IHNxbCgpe3JldHVybiBuby5nZXQodGhpcykuc3FsfWdldCB2YWx1ZXMoKXtyZXR1cm4gbm8uZ2V0KHRoaXMpLnZhbHVlc319O2Z1bmN0aW9uIE5hKGUpe3JldHVybiguLi5yKT0+bmV3IHd0KGUscil9ZnVuY3Rpb24gcW4oZSl7cmV0dXJuIGUhPW51bGwmJmVbJG5dPT09JG59dmFyIGZ1PUMoU2koKSk7dmFyIGd1PXJlcXVpcmUoXCJub2RlOmFzeW5jX2hvb2tzXCIpLGh1PXJlcXVpcmUoXCJub2RlOmV2ZW50c1wiKSx5dT1DKHJlcXVpcmUoXCJub2RlOmZzXCIpKSx0aT1DKHJlcXVpcmUoXCJub2RlOnBhdGhcIikpO3ZhciBvZT1jbGFzcyBle2NvbnN0cnVjdG9yKHIsdCl7aWYoci5sZW5ndGgtMSE9PXQubGVuZ3RoKXRocm93IHIubGVuZ3RoPT09MD9uZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgYXQgbGVhc3QgMSBzdHJpbmdcIik6bmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgJHtyLmxlbmd0aH0gc3RyaW5ncyB0byBoYXZlICR7ci5sZW5ndGgtMX0gdmFsdWVzYCk7bGV0IG49dC5yZWR1Y2UoKHMsYSk9PnMrKGEgaW5zdGFuY2VvZiBlP2EudmFsdWVzLmxlbmd0aDoxKSwwKTt0aGlzLnZhbHVlcz1uZXcgQXJyYXkobiksdGhpcy5zdHJpbmdzPW5ldyBBcnJheShuKzEpLHRoaXMuc3RyaW5nc1swXT1yWzBdO2xldCBpPTAsbz0wO2Zvcig7aTx0Lmxlbmd0aDspe2xldCBzPXRbaSsrXSxhPXJbaV07aWYocyBpbnN0YW5jZW9mIGUpe3RoaXMuc3RyaW5nc1tvXSs9cy5zdHJpbmdzWzBdO2xldCBsPTA7Zm9yKDtsPHMudmFsdWVzLmxlbmd0aDspdGhpcy52YWx1ZXNbbysrXT1zLnZhbHVlc1tsKytdLHRoaXMuc3RyaW5nc1tvXT1zLnN0cmluZ3NbbF07dGhpcy5zdHJpbmdzW29dKz1hfWVsc2UgdGhpcy52YWx1ZXNbbysrXT1zLHRoaXMuc3RyaW5nc1tvXT1hfX1nZXQgc3FsKCl7bGV0IHI9dGhpcy5zdHJpbmdzLmxlbmd0aCx0PTEsbj10aGlzLnN0cmluZ3NbMF07Zm9yKDt0PHI7KW4rPWA/JHt0aGlzLnN0cmluZ3NbdCsrXX1gO3JldHVybiBufWdldCBzdGF0ZW1lbnQoKXtsZXQgcj10aGlzLnN0cmluZ3MubGVuZ3RoLHQ9MSxuPXRoaXMuc3RyaW5nc1swXTtmb3IoO3Q8cjspbis9YDoke3R9JHt0aGlzLnN0cmluZ3NbdCsrXX1gO3JldHVybiBufWdldCB0ZXh0KCl7bGV0IHI9dGhpcy5zdHJpbmdzLmxlbmd0aCx0PTEsbj10aGlzLnN0cmluZ3NbMF07Zm9yKDt0PHI7KW4rPWAkJHt0fSR7dGhpcy5zdHJpbmdzW3QrK119YDtyZXR1cm4gbn1pbnNwZWN0KCl7cmV0dXJue3NxbDp0aGlzLnNxbCxzdGF0ZW1lbnQ6dGhpcy5zdGF0ZW1lbnQsdGV4dDp0aGlzLnRleHQsdmFsdWVzOnRoaXMudmFsdWVzfX19O2Z1bmN0aW9uIExhKGUscj1cIixcIix0PVwiXCIsbj1cIlwiKXtpZihlLmxlbmd0aD09PTApdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIGBqb2luKFtdKWAgdG8gYmUgY2FsbGVkIHdpdGggYW4gYXJyYXkgb2YgbXVsdGlwbGUgZWxlbWVudHMsIGJ1dCBnb3QgYW4gZW1wdHkgYXJyYXlcIik7cmV0dXJuIG5ldyBvZShbdCwuLi5BcnJheShlLmxlbmd0aC0xKS5maWxsKHIpLG5dLGUpfWZ1bmN0aW9uIGlvKGUpe3JldHVybiBuZXcgb2UoW2VdLFtdKX12YXIgRmE9aW8oXCJcIik7ZnVuY3Rpb24gb28oZSwuLi5yKXtyZXR1cm4gbmV3IG9lKGUscil9ZnVuY3Rpb24geHQoZSl7cmV0dXJue2dldEtleXMoKXtyZXR1cm4gT2JqZWN0LmtleXMoZSl9LGdldFByb3BlcnR5VmFsdWUocil7cmV0dXJuIGVbcl19fX1mdW5jdGlvbiByZShlLHIpe3JldHVybntnZXRLZXlzKCl7cmV0dXJuW2VdfSxnZXRQcm9wZXJ0eVZhbHVlKCl7cmV0dXJuIHIoKX19fWZ1bmN0aW9uIGxyKGUpe2xldCByPW5ldyBQZTtyZXR1cm57Z2V0S2V5cygpe3JldHVybiBlLmdldEtleXMoKX0sZ2V0UHJvcGVydHlWYWx1ZSh0KXtyZXR1cm4gci5nZXRPckNyZWF0ZSh0LCgpPT5lLmdldFByb3BlcnR5VmFsdWUodCkpfSxnZXRQcm9wZXJ0eURlc2NyaXB0b3IodCl7cmV0dXJuIGUuZ2V0UHJvcGVydHlEZXNjcmlwdG9yPy4odCl9fX12YXIgam49e2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfTtmdW5jdGlvbiBWbihlKXtsZXQgcj1uZXcgU2V0KGUpO3JldHVybntnZXRQcm90b3R5cGVPZjooKT0+T2JqZWN0LnByb3RvdHlwZSxnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6KCk9PmpuLGhhczoodCxuKT0+ci5oYXMobiksc2V0Oih0LG4saSk9PnIuYWRkKG4pJiZSZWZsZWN0LnNldCh0LG4saSksb3duS2V5czooKT0+Wy4uLnJdfX12YXIgTWE9U3ltYm9sLmZvcihcIm5vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tXCIpO2Z1bmN0aW9uIGhlKGUscil7bGV0IHQ9bW0ociksbj1uZXcgU2V0LGk9bmV3IFByb3h5KGUse2dldChvLHMpe2lmKG4uaGFzKHMpKXJldHVybiBvW3NdO2xldCBhPXQuZ2V0KHMpO3JldHVybiBhP2EuZ2V0UHJvcGVydHlWYWx1ZShzKTpvW3NdfSxoYXMobyxzKXtpZihuLmhhcyhzKSlyZXR1cm4hMDtsZXQgYT10LmdldChzKTtyZXR1cm4gYT9hLmhhcz8uKHMpPz8hMDpSZWZsZWN0LmhhcyhvLHMpfSxvd25LZXlzKG8pe2xldCBzPSRhKFJlZmxlY3Qub3duS2V5cyhvKSx0KSxhPSRhKEFycmF5LmZyb20odC5rZXlzKCkpLHQpO3JldHVyblsuLi5uZXcgU2V0KFsuLi5zLC4uLmEsLi4ubl0pXX0sc2V0KG8scyxhKXtyZXR1cm4gdC5nZXQocyk/LmdldFByb3BlcnR5RGVzY3JpcHRvcj8uKHMpPy53cml0YWJsZT09PSExPyExOihuLmFkZChzKSxSZWZsZWN0LnNldChvLHMsYSkpfSxnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobyxzKXtsZXQgYT1SZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvLHMpO2lmKGEmJiFhLmNvbmZpZ3VyYWJsZSlyZXR1cm4gYTtsZXQgbD10LmdldChzKTtyZXR1cm4gbD9sLmdldFByb3BlcnR5RGVzY3JpcHRvcj97Li4uam4sLi4ubD8uZ2V0UHJvcGVydHlEZXNjcmlwdG9yKHMpfTpqbjphfSxkZWZpbmVQcm9wZXJ0eShvLHMsYSl7cmV0dXJuIG4uYWRkKHMpLFJlZmxlY3QuZGVmaW5lUHJvcGVydHkobyxzLGEpfSxnZXRQcm90b3R5cGVPZjooKT0+T2JqZWN0LnByb3RvdHlwZX0pO3JldHVybiBpW01hXT1mdW5jdGlvbigpe2xldCBvPXsuLi50aGlzfTtyZXR1cm4gZGVsZXRlIG9bTWFdLG99LGl9ZnVuY3Rpb24gbW0oZSl7bGV0IHI9bmV3IE1hcDtmb3IobGV0IHQgb2YgZSl7bGV0IG49dC5nZXRLZXlzKCk7Zm9yKGxldCBpIG9mIG4pci5zZXQoaSx0KX1yZXR1cm4gcn1mdW5jdGlvbiAkYShlLHIpe3JldHVybiBlLmZpbHRlcih0PT5yLmdldCh0KT8uaGFzPy4odCk/PyEwKX1mdW5jdGlvbiBNcihlKXtyZXR1cm57Z2V0S2V5cygpe3JldHVybiBlfSxoYXMoKXtyZXR1cm4hMX0sZ2V0UHJvcGVydHlWYWx1ZSgpe319fWZ1bmN0aW9uICRyKGUscil7cmV0dXJue2JhdGNoOmUsdHJhbnNhY3Rpb246cj8ua2luZD09PVwiYmF0Y2hcIj97aXNvbGF0aW9uTGV2ZWw6ci5vcHRpb25zLmlzb2xhdGlvbkxldmVsfTp2b2lkIDB9fWZ1bmN0aW9uIHFhKGUpe2lmKGU9PT12b2lkIDApcmV0dXJuXCJcIjtsZXQgcj1OcihlKTtyZXR1cm4gbmV3IENyKDAse2NvbG9yczpBbn0pLndyaXRlKHIpLnRvU3RyaW5nKCl9dmFyIGZtPVwiUDIwMzdcIjtmdW5jdGlvbiBxcih7ZXJyb3I6ZSx1c2VyX2ZhY2luZ19lcnJvcjpyfSx0LG4pe3JldHVybiByLmVycm9yX2NvZGU/bmV3IHooZ20ocixuKSx7Y29kZTpyLmVycm9yX2NvZGUsY2xpZW50VmVyc2lvbjp0LG1ldGE6ci5tZXRhLGJhdGNoUmVxdWVzdElkeDpyLmJhdGNoX3JlcXVlc3RfaWR4fSk6bmV3IGooZSx7Y2xpZW50VmVyc2lvbjp0LGJhdGNoUmVxdWVzdElkeDpyLmJhdGNoX3JlcXVlc3RfaWR4fSl9ZnVuY3Rpb24gZ20oZSxyKXtsZXQgdD1lLm1lc3NhZ2U7cmV0dXJuKHI9PT1cInBvc3RncmVzcWxcInx8cj09PVwicG9zdGdyZXNcInx8cj09PVwibXlzcWxcIikmJmUuZXJyb3JfY29kZT09PWZtJiYodCs9YFxuUHJpc21hIEFjY2VsZXJhdGUgaGFzIGJ1aWx0LWluIGNvbm5lY3Rpb24gcG9vbGluZyB0byBwcmV2ZW50IHN1Y2ggZXJyb3JzOiBodHRwczovL3ByaXMubHkvY2xpZW50L2Vycm9yLWFjY2VsZXJhdGVgKSx0fXZhciB2dD1cIjx1bmtub3duPlwiO2Z1bmN0aW9uIGphKGUpe3ZhciByPWUuc3BsaXQoYFxuYCk7cmV0dXJuIHIucmVkdWNlKGZ1bmN0aW9uKHQsbil7dmFyIGk9Ym0obil8fHdtKG4pfHxQbShuKXx8QW0obil8fFNtKG4pO3JldHVybiBpJiZ0LnB1c2goaSksdH0sW10pfXZhciBobT0vXlxccyphdCAoLio/KSA/XFwoKCg/OmZpbGV8aHR0cHM/fGJsb2J8Y2hyb21lLWV4dGVuc2lvbnxuYXRpdmV8ZXZhbHx3ZWJwYWNrfHJzY3w8YW5vbnltb3VzPnxcXC98W2Etel06XFxcXHxcXFxcXFxcXCkuKj8pKD86OihcXGQrKSk/KD86OihcXGQrKSk/XFwpP1xccyokL2kseW09L1xcKChcXFMqKSg/OjooXFxkKykpKD86OihcXGQrKSlcXCkvO2Z1bmN0aW9uIGJtKGUpe3ZhciByPWhtLmV4ZWMoZSk7aWYoIXIpcmV0dXJuIG51bGw7dmFyIHQ9clsyXSYmclsyXS5pbmRleE9mKFwibmF0aXZlXCIpPT09MCxuPXJbMl0mJnJbMl0uaW5kZXhPZihcImV2YWxcIik9PT0wLGk9eW0uZXhlYyhyWzJdKTtyZXR1cm4gbiYmaSE9bnVsbCYmKHJbMl09aVsxXSxyWzNdPWlbMl0scls0XT1pWzNdKSx7ZmlsZTp0P251bGw6clsyXSxtZXRob2ROYW1lOnJbMV18fHZ0LGFyZ3VtZW50czp0P1tyWzJdXTpbXSxsaW5lTnVtYmVyOnJbM10/K3JbM106bnVsbCxjb2x1bW46cls0XT8rcls0XTpudWxsfX12YXIgRW09L15cXHMqYXQgKD86KCg/OlxcW29iamVjdCBvYmplY3RcXF0pPy4rKSApP1xcKD8oKD86ZmlsZXxtcy1hcHB4fGh0dHBzP3x3ZWJwYWNrfHJzY3xibG9iKTouKj8pOihcXGQrKSg/OjooXFxkKykpP1xcKT9cXHMqJC9pO2Z1bmN0aW9uIHdtKGUpe3ZhciByPUVtLmV4ZWMoZSk7cmV0dXJuIHI/e2ZpbGU6clsyXSxtZXRob2ROYW1lOnJbMV18fHZ0LGFyZ3VtZW50czpbXSxsaW5lTnVtYmVyOityWzNdLGNvbHVtbjpyWzRdPytyWzRdOm51bGx9Om51bGx9dmFyIHhtPS9eXFxzKiguKj8pKD86XFwoKC4qPylcXCkpPyg/Ol58QCkoKD86ZmlsZXxodHRwcz98YmxvYnxjaHJvbWV8d2VicGFja3xyc2N8cmVzb3VyY2V8XFxbbmF0aXZlKS4qP3xbXkBdKmJ1bmRsZSkoPzo6KFxcZCspKT8oPzo6KFxcZCspKT9cXHMqJC9pLHZtPS8oXFxTKykgbGluZSAoXFxkKykoPzogPiBldmFsIGxpbmUgXFxkKykqID4gZXZhbC9pO2Z1bmN0aW9uIFBtKGUpe3ZhciByPXhtLmV4ZWMoZSk7aWYoIXIpcmV0dXJuIG51bGw7dmFyIHQ9clszXSYmclszXS5pbmRleE9mKFwiID4gZXZhbFwiKT4tMSxuPXZtLmV4ZWMoclszXSk7cmV0dXJuIHQmJm4hPW51bGwmJihyWzNdPW5bMV0scls0XT1uWzJdLHJbNV09bnVsbCkse2ZpbGU6clszXSxtZXRob2ROYW1lOnJbMV18fHZ0LGFyZ3VtZW50czpyWzJdP3JbMl0uc3BsaXQoXCIsXCIpOltdLGxpbmVOdW1iZXI6cls0XT8rcls0XTpudWxsLGNvbHVtbjpyWzVdPytyWzVdOm51bGx9fXZhciBUbT0vXlxccyooPzooW15AXSopKD86XFwoKC4qPylcXCkpP0ApPyhcXFMuKj8pOihcXGQrKSg/OjooXFxkKykpP1xccyokL2k7ZnVuY3Rpb24gU20oZSl7dmFyIHI9VG0uZXhlYyhlKTtyZXR1cm4gcj97ZmlsZTpyWzNdLG1ldGhvZE5hbWU6clsxXXx8dnQsYXJndW1lbnRzOltdLGxpbmVOdW1iZXI6K3JbNF0sY29sdW1uOnJbNV0/K3JbNV06bnVsbH06bnVsbH12YXIgUm09L15cXHMqYXQgKD86KCg/OlxcW29iamVjdCBvYmplY3RcXF0pP1teXFxcXC9dKyg/OiBcXFthcyBcXFMrXFxdKT8pICk/XFwoPyguKj8pOihcXGQrKSg/OjooXFxkKykpP1xcKT9cXHMqJC9pO2Z1bmN0aW9uIEFtKGUpe3ZhciByPVJtLmV4ZWMoZSk7cmV0dXJuIHI/e2ZpbGU6clsyXSxtZXRob2ROYW1lOnJbMV18fHZ0LGFyZ3VtZW50czpbXSxsaW5lTnVtYmVyOityWzNdLGNvbHVtbjpyWzRdPytyWzRdOm51bGx9Om51bGx9dmFyIHNvPWNsYXNze2dldExvY2F0aW9uKCl7cmV0dXJuIG51bGx9fSxhbz1jbGFzc3tfZXJyb3I7Y29uc3RydWN0b3IoKXt0aGlzLl9lcnJvcj1uZXcgRXJyb3J9Z2V0TG9jYXRpb24oKXtsZXQgcj10aGlzLl9lcnJvci5zdGFjaztpZighcilyZXR1cm4gbnVsbDtsZXQgbj1qYShyKS5maW5kKGk9PntpZighaS5maWxlKXJldHVybiExO2xldCBvPUZpKGkuZmlsZSk7cmV0dXJuIG8hPT1cIjxhbm9ueW1vdXM+XCImJiFvLmluY2x1ZGVzKFwiQHByaXNtYVwiKSYmIW8uaW5jbHVkZXMoXCIvcGFja2FnZXMvY2xpZW50L3NyYy9ydW50aW1lL1wiKSYmIW8uZW5kc1dpdGgoXCIvcnVudGltZS9iaW5hcnkuanNcIikmJiFvLmVuZHNXaXRoKFwiL3J1bnRpbWUvbGlicmFyeS5qc1wiKSYmIW8uZW5kc1dpdGgoXCIvcnVudGltZS9lZGdlLmpzXCIpJiYhby5lbmRzV2l0aChcIi9ydW50aW1lL2VkZ2UtZXNtLmpzXCIpJiYhby5zdGFydHNXaXRoKFwiaW50ZXJuYWwvXCIpJiYhaS5tZXRob2ROYW1lLmluY2x1ZGVzKFwibmV3IFwiKSYmIWkubWV0aG9kTmFtZS5pbmNsdWRlcyhcImdldENhbGxTaXRlXCIpJiYhaS5tZXRob2ROYW1lLmluY2x1ZGVzKFwiUHJveHkuXCIpJiZpLm1ldGhvZE5hbWUuc3BsaXQoXCIuXCIpLmxlbmd0aDw0fSk7cmV0dXJuIW58fCFuLmZpbGU/bnVsbDp7ZmlsZU5hbWU6bi5maWxlLGxpbmVOdW1iZXI6bi5saW5lTnVtYmVyLGNvbHVtbk51bWJlcjpuLmNvbHVtbn19fTtmdW5jdGlvbiBaZShlKXtyZXR1cm4gZT09PVwibWluaW1hbFwiP3R5cGVvZiAkRW5hYmxlZENhbGxTaXRlPT1cImZ1bmN0aW9uXCImJmUhPT1cIm1pbmltYWxcIj9uZXcgJEVuYWJsZWRDYWxsU2l0ZTpuZXcgc286bmV3IGFvfXZhciBWYT17X2F2ZzohMCxfY291bnQ6ITAsX3N1bTohMCxfbWluOiEwLF9tYXg6ITB9O2Z1bmN0aW9uIGpyKGU9e30pe2xldCByPUltKGUpO3JldHVybiBPYmplY3QuZW50cmllcyhyKS5yZWR1Y2UoKG4sW2ksb10pPT4oVmFbaV0hPT12b2lkIDA/bi5zZWxlY3RbaV09e3NlbGVjdDpvfTpuW2ldPW8sbikse3NlbGVjdDp7fX0pfWZ1bmN0aW9uIEltKGU9e30pe3JldHVybiB0eXBlb2YgZS5fY291bnQ9PVwiYm9vbGVhblwiP3suLi5lLF9jb3VudDp7X2FsbDplLl9jb3VudH19OmV9ZnVuY3Rpb24gQm4oZT17fSl7cmV0dXJuIHI9Pih0eXBlb2YgZS5fY291bnQ9PVwiYm9vbGVhblwiJiYoci5fY291bnQ9ci5fY291bnQuX2FsbCkscil9ZnVuY3Rpb24gQmEoZSxyKXtsZXQgdD1CbihlKTtyZXR1cm4gcih7YWN0aW9uOlwiYWdncmVnYXRlXCIsdW5wYWNrZXI6dCxhcmdzTWFwcGVyOmpyfSkoZSl9ZnVuY3Rpb24ga20oZT17fSl7bGV0e3NlbGVjdDpyLC4uLnR9PWU7cmV0dXJuIHR5cGVvZiByPT1cIm9iamVjdFwiP2pyKHsuLi50LF9jb3VudDpyfSk6anIoey4uLnQsX2NvdW50OntfYWxsOiEwfX0pfWZ1bmN0aW9uIERtKGU9e30pe3JldHVybiB0eXBlb2YgZS5zZWxlY3Q9PVwib2JqZWN0XCI/cj0+Qm4oZSkocikuX2NvdW50OnI9PkJuKGUpKHIpLl9jb3VudC5fYWxsfWZ1bmN0aW9uIFVhKGUscil7cmV0dXJuIHIoe2FjdGlvbjpcImNvdW50XCIsdW5wYWNrZXI6RG0oZSksYXJnc01hcHBlcjprbX0pKGUpfWZ1bmN0aW9uIE9tKGU9e30pe2xldCByPWpyKGUpO2lmKEFycmF5LmlzQXJyYXkoci5ieSkpZm9yKGxldCB0IG9mIHIuYnkpdHlwZW9mIHQ9PVwic3RyaW5nXCImJihyLnNlbGVjdFt0XT0hMCk7ZWxzZSB0eXBlb2Ygci5ieT09XCJzdHJpbmdcIiYmKHIuc2VsZWN0W3IuYnldPSEwKTtyZXR1cm4gcn1mdW5jdGlvbiBfbShlPXt9KXtyZXR1cm4gcj0+KHR5cGVvZiBlPy5fY291bnQ9PVwiYm9vbGVhblwiJiZyLmZvckVhY2godD0+e3QuX2NvdW50PXQuX2NvdW50Ll9hbGx9KSxyKX1mdW5jdGlvbiBHYShlLHIpe3JldHVybiByKHthY3Rpb246XCJncm91cEJ5XCIsdW5wYWNrZXI6X20oZSksYXJnc01hcHBlcjpPbX0pKGUpfWZ1bmN0aW9uIFFhKGUscix0KXtpZihyPT09XCJhZ2dyZWdhdGVcIilyZXR1cm4gbj0+QmEobix0KTtpZihyPT09XCJjb3VudFwiKXJldHVybiBuPT5VYShuLHQpO2lmKHI9PT1cImdyb3VwQnlcIilyZXR1cm4gbj0+R2Eobix0KX1mdW5jdGlvbiBXYShlLHIpe2xldCB0PXIuZmllbGRzLmZpbHRlcihpPT4haS5yZWxhdGlvbk5hbWUpLG49WnModCxcIm5hbWVcIik7cmV0dXJuIG5ldyBQcm94eSh7fSx7Z2V0KGksbyl7aWYobyBpbiBpfHx0eXBlb2Ygbz09XCJzeW1ib2xcIilyZXR1cm4gaVtvXTtsZXQgcz1uW29dO2lmKHMpcmV0dXJuIG5ldyBtdChlLG8scy50eXBlLHMuaXNMaXN0LHMua2luZD09PVwiZW51bVwiKX0sLi4uVm4oT2JqZWN0LmtleXMobikpfSl9dmFyIEphPWU9PkFycmF5LmlzQXJyYXkoZSk/ZTplLnNwbGl0KFwiLlwiKSxsbz0oZSxyKT0+SmEocikucmVkdWNlKCh0LG4pPT50JiZ0W25dLGUpLEhhPShlLHIsdCk9PkphKHIpLnJlZHVjZVJpZ2h0KChuLGksbyxzKT0+T2JqZWN0LmFzc2lnbih7fSxsbyhlLHMuc2xpY2UoMCxvKSkse1tpXTpufSksdCk7ZnVuY3Rpb24gTm0oZSxyKXtyZXR1cm4gZT09PXZvaWQgMHx8cj09PXZvaWQgMD9bXTpbLi4ucixcInNlbGVjdFwiLGVdfWZ1bmN0aW9uIExtKGUscix0KXtyZXR1cm4gcj09PXZvaWQgMD9lPz97fTpIYShyLHQsZXx8ITApfWZ1bmN0aW9uIHVvKGUscix0LG4saSxvKXtsZXQgYT1lLl9ydW50aW1lRGF0YU1vZGVsLm1vZGVsc1tyXS5maWVsZHMucmVkdWNlKChsLHUpPT4oey4uLmwsW3UubmFtZV06dX0pLHt9KTtyZXR1cm4gbD0+e2xldCB1PVplKGUuX2Vycm9yRm9ybWF0KSxjPU5tKG4saSkscD1MbShsLG8sYyksZD10KHtkYXRhUGF0aDpjLGNhbGxzaXRlOnV9KShwKSxmPUZtKGUscik7cmV0dXJuIG5ldyBQcm94eShkLHtnZXQoaCxnKXtpZighZi5pbmNsdWRlcyhnKSlyZXR1cm4gaFtnXTtsZXQgUD1bYVtnXS50eXBlLHQsZ10sUj1bYyxwXTtyZXR1cm4gdW8oZSwuLi5QLC4uLlIpfSwuLi5WbihbLi4uZiwuLi5PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhkKV0pfSl9fWZ1bmN0aW9uIEZtKGUscil7cmV0dXJuIGUuX3J1bnRpbWVEYXRhTW9kZWwubW9kZWxzW3JdLmZpZWxkcy5maWx0ZXIodD0+dC5raW5kPT09XCJvYmplY3RcIikubWFwKHQ9PnQubmFtZSl9dmFyIE1tPVtcImZpbmRVbmlxdWVcIixcImZpbmRVbmlxdWVPclRocm93XCIsXCJmaW5kRmlyc3RcIixcImZpbmRGaXJzdE9yVGhyb3dcIixcImNyZWF0ZVwiLFwidXBkYXRlXCIsXCJ1cHNlcnRcIixcImRlbGV0ZVwiXSwkbT1bXCJhZ2dyZWdhdGVcIixcImNvdW50XCIsXCJncm91cEJ5XCJdO2Z1bmN0aW9uIGNvKGUscil7bGV0IHQ9ZS5fZXh0ZW5zaW9ucy5nZXRBbGxNb2RlbEV4dGVuc2lvbnMocik/P3t9LG49W3FtKGUsciksVm0oZSxyKSx4dCh0KSxyZShcIm5hbWVcIiwoKT0+cikscmUoXCIkbmFtZVwiLCgpPT5yKSxyZShcIiRwYXJlbnRcIiwoKT0+ZS5fYXBwbGllZFBhcmVudCldO3JldHVybiBoZSh7fSxuKX1mdW5jdGlvbiBxbShlLHIpe2xldCB0PVNlKHIpLG49T2JqZWN0LmtleXMoQXIpLmNvbmNhdChcImNvdW50XCIpO3JldHVybntnZXRLZXlzKCl7cmV0dXJuIG59LGdldFByb3BlcnR5VmFsdWUoaSl7bGV0IG89aSxzPWE9Pmw9PntsZXQgdT1aZShlLl9lcnJvckZvcm1hdCk7cmV0dXJuIGUuX2NyZWF0ZVByaXNtYVByb21pc2UoYz0+e2xldCBwPXthcmdzOmwsZGF0YVBhdGg6W10sYWN0aW9uOm8sbW9kZWw6cixjbGllbnRNZXRob2Q6YCR7dH0uJHtpfWAsanNNb2RlbE5hbWU6dCx0cmFuc2FjdGlvbjpjLGNhbGxzaXRlOnV9O3JldHVybiBlLl9yZXF1ZXN0KHsuLi5wLC4uLmF9KX0se2FjdGlvbjpvLGFyZ3M6bCxtb2RlbDpyfSl9O3JldHVybiBNbS5pbmNsdWRlcyhvKT91byhlLHIscyk6am0oaSk/UWEoZSxpLHMpOnMoe30pfX19ZnVuY3Rpb24gam0oZSl7cmV0dXJuICRtLmluY2x1ZGVzKGUpfWZ1bmN0aW9uIFZtKGUscil7cmV0dXJuIGxyKHJlKFwiZmllbGRzXCIsKCk9PntsZXQgdD1lLl9ydW50aW1lRGF0YU1vZGVsLm1vZGVsc1tyXTtyZXR1cm4gV2Eocix0KX0pKX1mdW5jdGlvbiBLYShlKXtyZXR1cm4gZS5yZXBsYWNlKC9eLi8scj0+ci50b1VwcGVyQ2FzZSgpKX12YXIgcG89U3ltYm9sKCk7ZnVuY3Rpb24gUHQoZSl7bGV0IHI9W0JtKGUpLFVtKGUpLHJlKHBvLCgpPT5lKSxyZShcIiRwYXJlbnRcIiwoKT0+ZS5fYXBwbGllZFBhcmVudCldLHQ9ZS5fZXh0ZW5zaW9ucy5nZXRBbGxDbGllbnRFeHRlbnNpb25zKCk7cmV0dXJuIHQmJnIucHVzaCh4dCh0KSksaGUoZSxyKX1mdW5jdGlvbiBCbShlKXtsZXQgcj1PYmplY3QuZ2V0UHJvdG90eXBlT2YoZS5fb3JpZ2luYWxDbGllbnQpLHQ9Wy4uLm5ldyBTZXQoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocikpXTtyZXR1cm57Z2V0S2V5cygpe3JldHVybiB0fSxnZXRQcm9wZXJ0eVZhbHVlKG4pe3JldHVybiBlW25dfX19ZnVuY3Rpb24gVW0oZSl7bGV0IHI9T2JqZWN0LmtleXMoZS5fcnVudGltZURhdGFNb2RlbC5tb2RlbHMpLHQ9ci5tYXAoU2UpLG49Wy4uLm5ldyBTZXQoci5jb25jYXQodCkpXTtyZXR1cm4gbHIoe2dldEtleXMoKXtyZXR1cm4gbn0sZ2V0UHJvcGVydHlWYWx1ZShpKXtsZXQgbz1LYShpKTtpZihlLl9ydW50aW1lRGF0YU1vZGVsLm1vZGVsc1tvXSE9PXZvaWQgMClyZXR1cm4gY28oZSxvKTtpZihlLl9ydW50aW1lRGF0YU1vZGVsLm1vZGVsc1tpXSE9PXZvaWQgMClyZXR1cm4gY28oZSxpKX0sZ2V0UHJvcGVydHlEZXNjcmlwdG9yKGkpe2lmKCF0LmluY2x1ZGVzKGkpKXJldHVybntlbnVtZXJhYmxlOiExfX19KX1mdW5jdGlvbiBZYShlKXtyZXR1cm4gZVtwb10/ZVtwb106ZX1mdW5jdGlvbiB6YShlKXtpZih0eXBlb2YgZT09XCJmdW5jdGlvblwiKXJldHVybiBlKHRoaXMpO2lmKGUuY2xpZW50Py5fX0FjY2VsZXJhdGVFbmdpbmUpe2xldCB0PWUuY2xpZW50Ll9fQWNjZWxlcmF0ZUVuZ2luZTt0aGlzLl9vcmlnaW5hbENsaWVudC5fZW5naW5lPW5ldyB0KHRoaXMuX29yaWdpbmFsQ2xpZW50Ll9hY2NlbGVyYXRlRW5naW5lQ29uZmlnKX1sZXQgcj1PYmplY3QuY3JlYXRlKHRoaXMuX29yaWdpbmFsQ2xpZW50LHtfZXh0ZW5zaW9uczp7dmFsdWU6dGhpcy5fZXh0ZW5zaW9ucy5hcHBlbmQoZSl9LF9hcHBsaWVkUGFyZW50Ont2YWx1ZTp0aGlzLGNvbmZpZ3VyYWJsZTohMH0sJHVzZTp7dmFsdWU6dm9pZCAwfSwkb246e3ZhbHVlOnZvaWQgMH19KTtyZXR1cm4gUHQocil9ZnVuY3Rpb24gWmEoe3Jlc3VsdDplLG1vZGVsTmFtZTpyLHNlbGVjdDp0LG9taXQ6bixleHRlbnNpb25zOml9KXtsZXQgbz1pLmdldEFsbENvbXB1dGVkRmllbGRzKHIpO2lmKCFvKXJldHVybiBlO2xldCBzPVtdLGE9W107Zm9yKGxldCBsIG9mIE9iamVjdC52YWx1ZXMobykpe2lmKG4pe2lmKG5bbC5uYW1lXSljb250aW51ZTtsZXQgdT1sLm5lZWRzLmZpbHRlcihjPT5uW2NdKTt1Lmxlbmd0aD4wJiZhLnB1c2goTXIodSkpfWVsc2UgaWYodCl7aWYoIXRbbC5uYW1lXSljb250aW51ZTtsZXQgdT1sLm5lZWRzLmZpbHRlcihjPT4hdFtjXSk7dS5sZW5ndGg+MCYmYS5wdXNoKE1yKHUpKX1HbShlLGwubmVlZHMpJiZzLnB1c2goUW0obCxoZShlLHMpKSl9cmV0dXJuIHMubGVuZ3RoPjB8fGEubGVuZ3RoPjA/aGUoZSxbLi4ucywuLi5hXSk6ZX1mdW5jdGlvbiBHbShlLHIpe3JldHVybiByLmV2ZXJ5KHQ9PlZpKGUsdCkpfWZ1bmN0aW9uIFFtKGUscil7cmV0dXJuIGxyKHJlKGUubmFtZSwoKT0+ZS5jb21wdXRlKHIpKSl9ZnVuY3Rpb24gVW4oe3Zpc2l0b3I6ZSxyZXN1bHQ6cixhcmdzOnQscnVudGltZURhdGFNb2RlbDpuLG1vZGVsTmFtZTppfSl7aWYoQXJyYXkuaXNBcnJheShyKSl7Zm9yKGxldCBzPTA7czxyLmxlbmd0aDtzKyspcltzXT1Vbih7cmVzdWx0OnJbc10sYXJnczp0LG1vZGVsTmFtZTppLHJ1bnRpbWVEYXRhTW9kZWw6bix2aXNpdG9yOmV9KTtyZXR1cm4gcn1sZXQgbz1lKHIsaSx0KT8/cjtyZXR1cm4gdC5pbmNsdWRlJiZYYSh7aW5jbHVkZU9yU2VsZWN0OnQuaW5jbHVkZSxyZXN1bHQ6byxwYXJlbnRNb2RlbE5hbWU6aSxydW50aW1lRGF0YU1vZGVsOm4sdmlzaXRvcjplfSksdC5zZWxlY3QmJlhhKHtpbmNsdWRlT3JTZWxlY3Q6dC5zZWxlY3QscmVzdWx0Om8scGFyZW50TW9kZWxOYW1lOmkscnVudGltZURhdGFNb2RlbDpuLHZpc2l0b3I6ZX0pLG99ZnVuY3Rpb24gWGEoe2luY2x1ZGVPclNlbGVjdDplLHJlc3VsdDpyLHBhcmVudE1vZGVsTmFtZTp0LHJ1bnRpbWVEYXRhTW9kZWw6bix2aXNpdG9yOml9KXtmb3IobGV0W28sc11vZiBPYmplY3QuZW50cmllcyhlKSl7aWYoIXN8fHJbb109PW51bGx8fFJlKHMpKWNvbnRpbnVlO2xldCBsPW4ubW9kZWxzW3RdLmZpZWxkcy5maW5kKGM9PmMubmFtZT09PW8pO2lmKCFsfHxsLmtpbmQhPT1cIm9iamVjdFwifHwhbC5yZWxhdGlvbk5hbWUpY29udGludWU7bGV0IHU9dHlwZW9mIHM9PVwib2JqZWN0XCI/czp7fTtyW29dPVVuKHt2aXNpdG9yOmkscmVzdWx0OnJbb10sYXJnczp1LG1vZGVsTmFtZTpsLnR5cGUscnVudGltZURhdGFNb2RlbDpufSl9fWZ1bmN0aW9uIGVsKHtyZXN1bHQ6ZSxtb2RlbE5hbWU6cixhcmdzOnQsZXh0ZW5zaW9uczpuLHJ1bnRpbWVEYXRhTW9kZWw6aSxnbG9iYWxPbWl0Om99KXtyZXR1cm4gbi5pc0VtcHR5KCl8fGU9PW51bGx8fHR5cGVvZiBlIT1cIm9iamVjdFwifHwhaS5tb2RlbHNbcl0/ZTpVbih7cmVzdWx0OmUsYXJnczp0Pz97fSxtb2RlbE5hbWU6cixydW50aW1lRGF0YU1vZGVsOmksdmlzaXRvcjooYSxsLHUpPT57bGV0IGM9U2UobCk7cmV0dXJuIFphKHtyZXN1bHQ6YSxtb2RlbE5hbWU6YyxzZWxlY3Q6dS5zZWxlY3Qsb21pdDp1LnNlbGVjdD92b2lkIDA6ey4uLm8/LltjXSwuLi51Lm9taXR9LGV4dGVuc2lvbnM6bn0pfX0pfXZhciBXbT1bXCIkY29ubmVjdFwiLFwiJGRpc2Nvbm5lY3RcIixcIiRvblwiLFwiJHRyYW5zYWN0aW9uXCIsXCIkdXNlXCIsXCIkZXh0ZW5kc1wiXSxybD1XbTtmdW5jdGlvbiB0bChlKXtpZihlIGluc3RhbmNlb2Ygb2UpcmV0dXJuIEptKGUpO2lmKHFuKGUpKXJldHVybiBIbShlKTtpZihBcnJheS5pc0FycmF5KGUpKXtsZXQgdD1bZVswXV07Zm9yKGxldCBuPTE7bjxlLmxlbmd0aDtuKyspdFtuXT1UdChlW25dKTtyZXR1cm4gdH1sZXQgcj17fTtmb3IobGV0IHQgaW4gZSlyW3RdPVR0KGVbdF0pO3JldHVybiByfWZ1bmN0aW9uIEptKGUpe3JldHVybiBuZXcgb2UoZS5zdHJpbmdzLGUudmFsdWVzKX1mdW5jdGlvbiBIbShlKXtyZXR1cm4gbmV3IHd0KGUuc3FsLGUudmFsdWVzKX1mdW5jdGlvbiBUdChlKXtpZih0eXBlb2YgZSE9XCJvYmplY3RcInx8ZT09bnVsbHx8ZSBpbnN0YW5jZW9mIE1lfHxfcihlKSlyZXR1cm4gZTtpZihScihlKSlyZXR1cm4gbmV3IHZlKGUudG9GaXhlZCgpKTtpZihTcihlKSlyZXR1cm4gbmV3IERhdGUoK2UpO2lmKEFycmF5QnVmZmVyLmlzVmlldyhlKSlyZXR1cm4gZS5zbGljZSgwKTtpZihBcnJheS5pc0FycmF5KGUpKXtsZXQgcj1lLmxlbmd0aCx0O2Zvcih0PUFycmF5KHIpO3ItLTspdFtyXT1UdChlW3JdKTtyZXR1cm4gdH1pZih0eXBlb2YgZT09XCJvYmplY3RcIil7bGV0IHI9e307Zm9yKGxldCB0IGluIGUpdD09PVwiX19wcm90b19fXCI/T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsdCx7dmFsdWU6VHQoZVt0XSksY29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsd3JpdGFibGU6ITB9KTpyW3RdPVR0KGVbdF0pO3JldHVybiByfU5lKGUsXCJVbmtub3duIHZhbHVlXCIpfWZ1bmN0aW9uIGlsKGUscix0LG49MCl7cmV0dXJuIGUuX2NyZWF0ZVByaXNtYVByb21pc2UoaT0+e2xldCBvPXIuY3VzdG9tRGF0YVByb3h5RmV0Y2g7cmV0dXJuXCJ0cmFuc2FjdGlvblwiaW4gciYmaSE9PXZvaWQgMCYmKHIudHJhbnNhY3Rpb24/LmtpbmQ9PT1cImJhdGNoXCImJnIudHJhbnNhY3Rpb24ubG9jay50aGVuKCksci50cmFuc2FjdGlvbj1pKSxuPT09dC5sZW5ndGg/ZS5fZXhlY3V0ZVJlcXVlc3Qocik6dFtuXSh7bW9kZWw6ci5tb2RlbCxvcGVyYXRpb246ci5tb2RlbD9yLmFjdGlvbjpyLmNsaWVudE1ldGhvZCxhcmdzOnRsKHIuYXJncz8/e30pLF9faW50ZXJuYWxQYXJhbXM6cixxdWVyeToocyxhPXIpPT57bGV0IGw9YS5jdXN0b21EYXRhUHJveHlGZXRjaDtyZXR1cm4gYS5jdXN0b21EYXRhUHJveHlGZXRjaD1sbChvLGwpLGEuYXJncz1zLGlsKGUsYSx0LG4rMSl9fSl9KX1mdW5jdGlvbiBvbChlLHIpe2xldHtqc01vZGVsTmFtZTp0LGFjdGlvbjpuLGNsaWVudE1ldGhvZDppfT1yLG89dD9uOmk7aWYoZS5fZXh0ZW5zaW9ucy5pc0VtcHR5KCkpcmV0dXJuIGUuX2V4ZWN1dGVSZXF1ZXN0KHIpO2xldCBzPWUuX2V4dGVuc2lvbnMuZ2V0QWxsUXVlcnlDYWxsYmFja3ModD8/XCIkbm9uZVwiLG8pO3JldHVybiBpbChlLHIscyl9ZnVuY3Rpb24gc2woZSl7cmV0dXJuIHI9PntsZXQgdD17cmVxdWVzdHM6cn0sbj1yWzBdLmV4dGVuc2lvbnMuZ2V0QWxsQmF0Y2hRdWVyeUNhbGxiYWNrcygpO3JldHVybiBuLmxlbmd0aD9hbCh0LG4sMCxlKTplKHQpfX1mdW5jdGlvbiBhbChlLHIsdCxuKXtpZih0PT09ci5sZW5ndGgpcmV0dXJuIG4oZSk7bGV0IGk9ZS5jdXN0b21EYXRhUHJveHlGZXRjaCxvPWUucmVxdWVzdHNbMF0udHJhbnNhY3Rpb247cmV0dXJuIHJbdF0oe2FyZ3M6e3F1ZXJpZXM6ZS5yZXF1ZXN0cy5tYXAocz0+KHttb2RlbDpzLm1vZGVsTmFtZSxvcGVyYXRpb246cy5hY3Rpb24sYXJnczpzLmFyZ3N9KSksdHJhbnNhY3Rpb246bz97aXNvbGF0aW9uTGV2ZWw6by5raW5kPT09XCJiYXRjaFwiP28uaXNvbGF0aW9uTGV2ZWw6dm9pZCAwfTp2b2lkIDB9LF9faW50ZXJuYWxQYXJhbXM6ZSxxdWVyeShzLGE9ZSl7bGV0IGw9YS5jdXN0b21EYXRhUHJveHlGZXRjaDtyZXR1cm4gYS5jdXN0b21EYXRhUHJveHlGZXRjaD1sbChpLGwpLGFsKGEscix0KzEsbil9fSl9dmFyIG5sPWU9PmU7ZnVuY3Rpb24gbGwoZT1ubCxyPW5sKXtyZXR1cm4gdD0+ZShyKHQpKX12YXIgdWw9TihcInByaXNtYTpjbGllbnRcIiksY2w9e1ZlcmNlbDpcInZlcmNlbFwiLFwiTmV0bGlmeSBDSVwiOlwibmV0bGlmeVwifTtmdW5jdGlvbiBwbCh7cG9zdGluc3RhbGw6ZSxjaU5hbWU6cixjbGllbnRWZXJzaW9uOnR9KXtpZih1bChcImNoZWNrUGxhdGZvcm1DYWNoaW5nOnBvc3RpbnN0YWxsXCIsZSksdWwoXCJjaGVja1BsYXRmb3JtQ2FjaGluZzpjaU5hbWVcIixyKSxlPT09ITAmJnImJnIgaW4gY2wpe2xldCBuPWBQcmlzbWEgaGFzIGRldGVjdGVkIHRoYXQgdGhpcyBwcm9qZWN0IHdhcyBidWlsdCBvbiAke3J9LCB3aGljaCBjYWNoZXMgZGVwZW5kZW5jaWVzLiBUaGlzIGxlYWRzIHRvIGFuIG91dGRhdGVkIFByaXNtYSBDbGllbnQgYmVjYXVzZSBQcmlzbWEncyBhdXRvLWdlbmVyYXRpb24gaXNuJ3QgdHJpZ2dlcmVkLiBUbyBmaXggdGhpcywgbWFrZSBzdXJlIHRvIHJ1biB0aGUgXFxgcHJpc21hIGdlbmVyYXRlXFxgIGNvbW1hbmQgZHVyaW5nIHRoZSBidWlsZCBwcm9jZXNzLlxuXG5MZWFybiBob3c6IGh0dHBzOi8vcHJpcy5seS9kLyR7Y2xbcl19LWJ1aWxkYDt0aHJvdyBjb25zb2xlLmVycm9yKG4pLG5ldyBUKG4sdCl9fWZ1bmN0aW9uIGRsKGUscil7cmV0dXJuIGU/ZS5kYXRhc291cmNlcz9lLmRhdGFzb3VyY2VzOmUuZGF0YXNvdXJjZVVybD97W3JbMF1dOnt1cmw6ZS5kYXRhc291cmNlVXJsfX06e306e319dmFyIEttPSgpPT5nbG9iYWxUaGlzLnByb2Nlc3M/LnJlbGVhc2U/Lm5hbWU9PT1cIm5vZGVcIixZbT0oKT0+ISFnbG9iYWxUaGlzLkJ1bnx8ISFnbG9iYWxUaGlzLnByb2Nlc3M/LnZlcnNpb25zPy5idW4sem09KCk9PiEhZ2xvYmFsVGhpcy5EZW5vLFptPSgpPT50eXBlb2YgZ2xvYmFsVGhpcy5OZXRsaWZ5PT1cIm9iamVjdFwiLFhtPSgpPT50eXBlb2YgZ2xvYmFsVGhpcy5FZGdlUnVudGltZT09XCJvYmplY3RcIixlZj0oKT0+Z2xvYmFsVGhpcy5uYXZpZ2F0b3I/LnVzZXJBZ2VudD09PVwiQ2xvdWRmbGFyZS1Xb3JrZXJzXCI7ZnVuY3Rpb24gcmYoKXtyZXR1cm5bW1ptLFwibmV0bGlmeVwiXSxbWG0sXCJlZGdlLWxpZ2h0XCJdLFtlZixcIndvcmtlcmRcIl0sW3ptLFwiZGVub1wiXSxbWW0sXCJidW5cIl0sW0ttLFwibm9kZVwiXV0uZmxhdE1hcCh0PT50WzBdKCk/W3RbMV1dOltdKS5hdCgwKT8/XCJcIn12YXIgdGY9e25vZGU6XCJOb2RlLmpzXCIsd29ya2VyZDpcIkNsb3VkZmxhcmUgV29ya2Vyc1wiLGRlbm86XCJEZW5vIGFuZCBEZW5vIERlcGxveVwiLG5ldGxpZnk6XCJOZXRsaWZ5IEVkZ2UgRnVuY3Rpb25zXCIsXCJlZGdlLWxpZ2h0XCI6XCJFZGdlIFJ1bnRpbWUgKFZlcmNlbCBFZGdlIEZ1bmN0aW9ucywgVmVyY2VsIEVkZ2UgTWlkZGxld2FyZSwgTmV4dC5qcyAoUGFnZXMgUm91dGVyKSBFZGdlIEFQSSBSb3V0ZXMsIE5leHQuanMgKEFwcCBSb3V0ZXIpIEVkZ2UgUm91dGUgSGFuZGxlcnMgb3IgTmV4dC5qcyBNaWRkbGV3YXJlKVwifTtmdW5jdGlvbiBHbigpe2xldCBlPXJmKCk7cmV0dXJue2lkOmUscHJldHR5TmFtZTp0ZltlXXx8ZSxpc0VkZ2U6W1wid29ya2VyZFwiLFwiZGVub1wiLFwibmV0bGlmeVwiLFwiZWRnZS1saWdodFwiXS5pbmNsdWRlcyhlKX19dmFyIHlsPUMocmVxdWlyZShcIm5vZGU6ZnNcIikpLFN0PUMocmVxdWlyZShcIm5vZGU6cGF0aFwiKSk7ZnVuY3Rpb24gUW4oZSl7bGV0e3J1bnRpbWVCaW5hcnlUYXJnZXQ6cn09ZTtyZXR1cm5gQWRkIFwiJHtyfVwiIHRvIFxcYGJpbmFyeVRhcmdldHNcXGAgaW4gdGhlIFwic2NoZW1hLnByaXNtYVwiIGZpbGUgYW5kIHJ1biBcXGBwcmlzbWEgZ2VuZXJhdGVcXGAgYWZ0ZXIgc2F2aW5nIGl0OlxuXG4ke25mKGUpfWB9ZnVuY3Rpb24gbmYoZSl7bGV0e2dlbmVyYXRvcjpyLGdlbmVyYXRvckJpbmFyeVRhcmdldHM6dCxydW50aW1lQmluYXJ5VGFyZ2V0Om59PWUsaT17ZnJvbUVudlZhcjpudWxsLHZhbHVlOm59LG89Wy4uLnQsaV07cmV0dXJuIF9pKHsuLi5yLGJpbmFyeVRhcmdldHM6b30pfWZ1bmN0aW9uIFhlKGUpe2xldHtydW50aW1lQmluYXJ5VGFyZ2V0OnJ9PWU7cmV0dXJuYFByaXNtYSBDbGllbnQgY291bGQgbm90IGxvY2F0ZSB0aGUgUXVlcnkgRW5naW5lIGZvciBydW50aW1lIFwiJHtyfVwiLmB9ZnVuY3Rpb24gZXIoZSl7bGV0e3NlYXJjaGVkTG9jYXRpb25zOnJ9PWU7cmV0dXJuYFRoZSBmb2xsb3dpbmcgbG9jYXRpb25zIGhhdmUgYmVlbiBzZWFyY2hlZDpcbiR7Wy4uLm5ldyBTZXQocildLm1hcChpPT5gICAke2l9YCkuam9pbihgXG5gKX1gfWZ1bmN0aW9uIG1sKGUpe2xldHtydW50aW1lQmluYXJ5VGFyZ2V0OnJ9PWU7cmV0dXJuYCR7WGUoZSl9XG5cblRoaXMgaGFwcGVuZWQgYmVjYXVzZSBcXGBiaW5hcnlUYXJnZXRzXFxgIGhhdmUgYmVlbiBwaW5uZWQsIGJ1dCB0aGUgYWN0dWFsIGRlcGxveW1lbnQgYWxzbyByZXF1aXJlZCBcIiR7cn1cIi5cbiR7UW4oZSl9XG5cbiR7ZXIoZSl9YH1mdW5jdGlvbiBXbihlKXtyZXR1cm5gV2Ugd291bGQgYXBwcmVjaWF0ZSBpZiB5b3UgY291bGQgdGFrZSB0aGUgdGltZSB0byBzaGFyZSBzb21lIGluZm9ybWF0aW9uIHdpdGggdXMuXG5QbGVhc2UgaGVscCB1cyBieSBhbnN3ZXJpbmcgYSBmZXcgcXVlc3Rpb25zOiBodHRwczovL3ByaXMubHkvJHtlfWB9ZnVuY3Rpb24gSm4oZSl7bGV0e2Vycm9yU3RhY2s6cn09ZTtyZXR1cm4gcj8ubWF0Y2goL1xcL1xcLm5leHR8XFwvbmV4dEB8XFwvbmV4dFxcLy8pP2BcblxuV2UgZGV0ZWN0ZWQgdGhhdCB5b3UgYXJlIHVzaW5nIE5leHQuanMsIGxlYXJuIGhvdyB0byBmaXggdGhpczogaHR0cHM6Ly9wcmlzLmx5L2QvZW5naW5lLW5vdC1mb3VuZC1uZXh0anMuYDpcIlwifWZ1bmN0aW9uIGZsKGUpe2xldHtxdWVyeUVuZ2luZU5hbWU6cn09ZTtyZXR1cm5gJHtYZShlKX0ke0puKGUpfVxuXG5UaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidW5kbGVyIHRoYXQgaGFzIG5vdCBjb3BpZWQgXCIke3J9XCIgbmV4dCB0byB0aGUgcmVzdWx0aW5nIGJ1bmRsZS5cbkVuc3VyZSB0aGF0IFwiJHtyfVwiIGhhcyBiZWVuIGNvcGllZCBuZXh0IHRvIHRoZSBidW5kbGUgb3IgaW4gXCIke2UuZXhwZWN0ZWRMb2NhdGlvbn1cIi5cblxuJHtXbihcImVuZ2luZS1ub3QtZm91bmQtYnVuZGxlci1pbnZlc3RpZ2F0aW9uXCIpfVxuXG4ke2VyKGUpfWB9ZnVuY3Rpb24gZ2woZSl7bGV0e3J1bnRpbWVCaW5hcnlUYXJnZXQ6cixnZW5lcmF0b3JCaW5hcnlUYXJnZXRzOnR9PWUsbj10LmZpbmQoaT0+aS5uYXRpdmUpO3JldHVybmAke1hlKGUpfVxuXG5UaGlzIGhhcHBlbmVkIGJlY2F1c2UgUHJpc21hIENsaWVudCB3YXMgZ2VuZXJhdGVkIGZvciBcIiR7bj8udmFsdWU/P1widW5rbm93blwifVwiLCBidXQgdGhlIGFjdHVhbCBkZXBsb3ltZW50IHJlcXVpcmVkIFwiJHtyfVwiLlxuJHtRbihlKX1cblxuJHtlcihlKX1gfWZ1bmN0aW9uIGhsKGUpe2xldHtxdWVyeUVuZ2luZU5hbWU6cn09ZTtyZXR1cm5gJHtYZShlKX0ke0puKGUpfVxuXG5UaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgdG9vbGluZyB0aGF0IGhhcyBub3QgY29waWVkIFwiJHtyfVwiIHRvIHRoZSBkZXBsb3ltZW50IGZvbGRlci5cbkVuc3VyZSB0aGF0IHlvdSByYW4gXFxgcHJpc21hIGdlbmVyYXRlXFxgIGFuZCB0aGF0IFwiJHtyfVwiIGhhcyBiZWVuIGNvcGllZCB0byBcIiR7ZS5leHBlY3RlZExvY2F0aW9ufVwiLlxuXG4ke1duKFwiZW5naW5lLW5vdC1mb3VuZC10b29saW5nLWludmVzdGlnYXRpb25cIil9XG5cbiR7ZXIoZSl9YH12YXIgb2Y9TihcInByaXNtYTpjbGllbnQ6ZW5naW5lczpyZXNvbHZlRW5naW5lUGF0aFwiKSxzZj0oKT0+bmV3IFJlZ0V4cChcInJ1bnRpbWVbXFxcXFxcXFwvXWxpYnJhcnlcXFxcLm0/anMkXCIpO2FzeW5jIGZ1bmN0aW9uIGJsKGUscil7bGV0IHQ9e2JpbmFyeTpwcm9jZXNzLmVudi5QUklTTUFfUVVFUllfRU5HSU5FX0JJTkFSWSxsaWJyYXJ5OnByb2Nlc3MuZW52LlBSSVNNQV9RVUVSWV9FTkdJTkVfTElCUkFSWX1bZV0/P3IucHJpc21hUGF0aDtpZih0IT09dm9pZCAwKXJldHVybiB0O2xldHtlbmdpbmVQYXRoOm4sc2VhcmNoZWRMb2NhdGlvbnM6aX09YXdhaXQgYWYoZSxyKTtpZihvZihcImVuZ2luZVBhdGhcIixuKSxuIT09dm9pZCAwJiZlPT09XCJiaW5hcnlcIiYmQWkobiksbiE9PXZvaWQgMClyZXR1cm4gci5wcmlzbWFQYXRoPW47bGV0IG89YXdhaXQgaXIoKSxzPXIuZ2VuZXJhdG9yPy5iaW5hcnlUYXJnZXRzPz9bXSxhPXMuc29tZShkPT5kLm5hdGl2ZSksbD0hcy5zb21lKGQ9PmQudmFsdWU9PT1vKSx1PV9fZmlsZW5hbWUubWF0Y2goc2YoKSk9PT1udWxsLGM9e3NlYXJjaGVkTG9jYXRpb25zOmksZ2VuZXJhdG9yQmluYXJ5VGFyZ2V0czpzLGdlbmVyYXRvcjpyLmdlbmVyYXRvcixydW50aW1lQmluYXJ5VGFyZ2V0Om8scXVlcnlFbmdpbmVOYW1lOkVsKGUsbyksZXhwZWN0ZWRMb2NhdGlvbjpTdC5kZWZhdWx0LnJlbGF0aXZlKHByb2Nlc3MuY3dkKCksci5kaXJuYW1lKSxlcnJvclN0YWNrOm5ldyBFcnJvcigpLnN0YWNrfSxwO3Rocm93IGEmJmw/cD1nbChjKTpsP3A9bWwoYyk6dT9wPWZsKGMpOnA9aGwoYyksbmV3IFQocCxyLmNsaWVudFZlcnNpb24pfWFzeW5jIGZ1bmN0aW9uIGFmKGUscil7bGV0IHQ9YXdhaXQgaXIoKSxuPVtdLGk9W3IuZGlybmFtZSxTdC5kZWZhdWx0LnJlc29sdmUoX19kaXJuYW1lLFwiLi5cIiksci5nZW5lcmF0b3I/Lm91dHB1dD8udmFsdWU/P19fZGlybmFtZSxTdC5kZWZhdWx0LnJlc29sdmUoX19kaXJuYW1lLFwiLi4vLi4vLi4vLnByaXNtYS9jbGllbnRcIiksXCIvdG1wL3ByaXNtYS1lbmdpbmVzXCIsci5jd2RdO19fZmlsZW5hbWUuaW5jbHVkZXMoXCJyZXNvbHZlRW5naW5lUGF0aFwiKSYmaS5wdXNoKGdzKCkpO2ZvcihsZXQgbyBvZiBpKXtsZXQgcz1FbChlLHQpLGE9U3QuZGVmYXVsdC5qb2luKG8scyk7aWYobi5wdXNoKG8pLHlsLmRlZmF1bHQuZXhpc3RzU3luYyhhKSlyZXR1cm57ZW5naW5lUGF0aDphLHNlYXJjaGVkTG9jYXRpb25zOm59fXJldHVybntlbmdpbmVQYXRoOnZvaWQgMCxzZWFyY2hlZExvY2F0aW9uczpufX1mdW5jdGlvbiBFbChlLHIpe3JldHVybiBlPT09XCJsaWJyYXJ5XCI/R3QocixcImZzXCIpOmBxdWVyeS1lbmdpbmUtJHtyfSR7cj09PVwid2luZG93c1wiP1wiLmV4ZVwiOlwiXCJ9YH12YXIgbW89QyhMaSgpKTtmdW5jdGlvbiB3bChlKXtyZXR1cm4gZT9lLnJlcGxhY2UoL1wiLipcIi9nLCdcIlhcIicpLnJlcGxhY2UoL1tcXHM6XFxbXShbKy1dPyhbMC05XSpbLl0pP1swLTldKykvZyxyPT5gJHtyWzBdfTVgKTpcIlwifWZ1bmN0aW9uIHhsKGUpe3JldHVybiBlLnNwbGl0KGBcbmApLm1hcChyPT5yLnJlcGxhY2UoL15cXGR7NH0tWzAxXVxcZC1bMC0zXVxcZFRbMC0yXVxcZDpbMC01XVxcZDpbMC01XVxcZFxcLlxcZCsoWystXVswLTJdXFxkOlswLTVdXFxkfFopXFxzKi8sXCJcIikucmVwbGFjZSgvXFwrXFxkK1xccyptcyQvLFwiXCIpKS5qb2luKGBcbmApfXZhciB2bD1DKEZzKCkpO2Z1bmN0aW9uIFBsKHt0aXRsZTplLHVzZXI6cj1cInByaXNtYVwiLHJlcG86dD1cInByaXNtYVwiLHRlbXBsYXRlOm49XCJidWdfcmVwb3J0LnltbFwiLGJvZHk6aX0pe3JldHVybigwLHZsLmRlZmF1bHQpKHt1c2VyOnIscmVwbzp0LHRlbXBsYXRlOm4sdGl0bGU6ZSxib2R5Oml9KX1mdW5jdGlvbiBUbCh7dmVyc2lvbjplLGJpbmFyeVRhcmdldDpyLHRpdGxlOnQsZGVzY3JpcHRpb246bixlbmdpbmVWZXJzaW9uOmksZGF0YWJhc2U6byxxdWVyeTpzfSl7bGV0IGE9R28oNmUzLShzPy5sZW5ndGg/PzApKSxsPXhsKCgwLG1vLmRlZmF1bHQpKGEpKSx1PW4/YCMgRGVzY3JpcHRpb25cblxcYFxcYFxcYFxuJHtufVxuXFxgXFxgXFxgYDpcIlwiLGM9KDAsbW8uZGVmYXVsdCkoYEhpIFByaXNtYSBUZWFtISBNeSBQcmlzbWEgQ2xpZW50IGp1c3QgY3Jhc2hlZC4gVGhpcyBpcyB0aGUgcmVwb3J0OlxuIyMgVmVyc2lvbnNcblxufCBOYW1lICAgICAgICAgICAgfCBWZXJzaW9uICAgICAgICAgICAgfFxufC0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tfFxufCBOb2RlICAgICAgICAgICAgfCAke3Byb2Nlc3MudmVyc2lvbj8ucGFkRW5kKDE5KX18IFxufCBPUyAgICAgICAgICAgICAgfCAke3I/LnBhZEVuZCgxOSl9fFxufCBQcmlzbWEgQ2xpZW50ICAgfCAke2U/LnBhZEVuZCgxOSl9fFxufCBRdWVyeSBFbmdpbmUgICAgfCAke2k/LnBhZEVuZCgxOSl9fFxufCBEYXRhYmFzZSAgICAgICAgfCAke28/LnBhZEVuZCgxOSl9fFxuXG4ke3V9XG5cbiMjIExvZ3NcblxcYFxcYFxcYFxuJHtsfVxuXFxgXFxgXFxgXG5cbiMjIENsaWVudCBTbmlwcGV0XG5cXGBcXGBcXGB0c1xuLy8gUExFQVNFIEZJTEwgWU9VUiBDT0RFIFNOSVBQRVQgSEVSRVxuXFxgXFxgXFxgXG5cbiMjIFNjaGVtYVxuXFxgXFxgXFxgcHJpc21hXG4vLyBQTEVBU0UgQUREIFlPVVIgU0NIRU1BIEhFUkUgSUYgUE9TU0lCTEVcblxcYFxcYFxcYFxuXG4jIyBQcmlzbWEgRW5naW5lIFF1ZXJ5XG5cXGBcXGBcXGBcbiR7cz93bChzKTpcIlwifVxuXFxgXFxgXFxgXG5gKSxwPVBsKHt0aXRsZTp0LGJvZHk6Y30pO3JldHVybmAke3R9XG5cblRoaXMgaXMgYSBub24tcmVjb3ZlcmFibGUgZXJyb3Igd2hpY2ggcHJvYmFibHkgaGFwcGVucyB3aGVuIHRoZSBQcmlzbWEgUXVlcnkgRW5naW5lIGhhcyBhIHBhbmljLlxuXG4ke1kocCl9XG5cbklmIHlvdSB3YW50IHRoZSBQcmlzbWEgdGVhbSB0byBsb29rIGludG8gaXQsIHBsZWFzZSBvcGVuIHRoZSBsaW5rIGFib3ZlIFxcdXsxRjY0Rn1cblRvIGluY3JlYXNlIHRoZSBjaGFuY2Ugb2Ygc3VjY2VzcywgcGxlYXNlIHBvc3QgeW91ciBzY2hlbWEgYW5kIGEgc25pcHBldCBvZlxuaG93IHlvdSB1c2VkIFByaXNtYSBDbGllbnQgaW4gdGhlIGlzc3VlLiBcbmB9dmFyIFNsPVwiNi4xMy4wXCI7ZnVuY3Rpb24gVnIoe2lubGluZURhdGFzb3VyY2VzOmUsb3ZlcnJpZGVEYXRhc291cmNlczpyLGVudjp0LGNsaWVudFZlcnNpb246bn0pe2xldCBpLG89T2JqZWN0LmtleXMoZSlbMF0scz1lW29dPy51cmwsYT1yW29dPy51cmw7aWYobz09PXZvaWQgMD9pPXZvaWQgMDphP2k9YTpzPy52YWx1ZT9pPXMudmFsdWU6cz8uZnJvbUVudlZhciYmKGk9dFtzLmZyb21FbnZWYXJdKSxzPy5mcm9tRW52VmFyIT09dm9pZCAwJiZpPT09dm9pZCAwKXRocm93IG5ldyBUKGBlcnJvcjogRW52aXJvbm1lbnQgdmFyaWFibGUgbm90IGZvdW5kOiAke3MuZnJvbUVudlZhcn0uYCxuKTtpZihpPT09dm9pZCAwKXRocm93IG5ldyBUKFwiZXJyb3I6IE1pc3NpbmcgVVJMIGVudmlyb25tZW50IHZhcmlhYmxlLCB2YWx1ZSwgb3Igb3ZlcnJpZGUuXCIsbik7cmV0dXJuIGl9dmFyIEhuPWNsYXNzIGV4dGVuZHMgRXJyb3J7Y2xpZW50VmVyc2lvbjtjYXVzZTtjb25zdHJ1Y3RvcihyLHQpe3N1cGVyKHIpLHRoaXMuY2xpZW50VmVyc2lvbj10LmNsaWVudFZlcnNpb24sdGhpcy5jYXVzZT10LmNhdXNlfWdldFtTeW1ib2wudG9TdHJpbmdUYWddKCl7cmV0dXJuIHRoaXMubmFtZX19O3ZhciBzZT1jbGFzcyBleHRlbmRzIEhue2lzUmV0cnlhYmxlO2NvbnN0cnVjdG9yKHIsdCl7c3VwZXIocix0KSx0aGlzLmlzUmV0cnlhYmxlPXQuaXNSZXRyeWFibGU/PyEwfX07ZnVuY3Rpb24gQShlLHIpe3JldHVybnsuLi5lLGlzUmV0cnlhYmxlOnJ9fXZhciB1cj1jbGFzcyBleHRlbmRzIHNle25hbWU9XCJJbnZhbGlkRGF0YXNvdXJjZUVycm9yXCI7Y29kZT1cIlA2MDAxXCI7Y29uc3RydWN0b3Iocix0KXtzdXBlcihyLEEodCwhMSkpfX07eCh1cixcIkludmFsaWREYXRhc291cmNlRXJyb3JcIik7ZnVuY3Rpb24gUmwoZSl7bGV0IHI9e2NsaWVudFZlcnNpb246ZS5jbGllbnRWZXJzaW9ufSx0PU9iamVjdC5rZXlzKGUuaW5saW5lRGF0YXNvdXJjZXMpWzBdLG49VnIoe2lubGluZURhdGFzb3VyY2VzOmUuaW5saW5lRGF0YXNvdXJjZXMsb3ZlcnJpZGVEYXRhc291cmNlczplLm92ZXJyaWRlRGF0YXNvdXJjZXMsY2xpZW50VmVyc2lvbjplLmNsaWVudFZlcnNpb24sZW52OnsuLi5lLmVudiwuLi50eXBlb2YgcHJvY2VzczxcInVcIj9wcm9jZXNzLmVudjp7fX19KSxpO3RyeXtpPW5ldyBVUkwobil9Y2F0Y2h7dGhyb3cgbmV3IHVyKGBFcnJvciB2YWxpZGF0aW5nIGRhdGFzb3VyY2UgXFxgJHt0fVxcYDogdGhlIFVSTCBtdXN0IHN0YXJ0IHdpdGggdGhlIHByb3RvY29sIFxcYHByaXNtYTovL1xcYGAscil9bGV0e3Byb3RvY29sOm8sc2VhcmNoUGFyYW1zOnN9PWk7aWYobyE9PVwicHJpc21hOlwiJiZvIT09c24pdGhyb3cgbmV3IHVyKGBFcnJvciB2YWxpZGF0aW5nIGRhdGFzb3VyY2UgXFxgJHt0fVxcYDogdGhlIFVSTCBtdXN0IHN0YXJ0IHdpdGggdGhlIHByb3RvY29sIFxcYHByaXNtYTovL1xcYCBvciBcXGBwcmlzbWErcG9zdGdyZXM6Ly9cXGBgLHIpO2xldCBhPXMuZ2V0KFwiYXBpX2tleVwiKTtpZihhPT09bnVsbHx8YS5sZW5ndGg8MSl0aHJvdyBuZXcgdXIoYEVycm9yIHZhbGlkYXRpbmcgZGF0YXNvdXJjZSBcXGAke3R9XFxgOiB0aGUgVVJMIG11c3QgY29udGFpbiBhIHZhbGlkIEFQSSBrZXlgLHIpO2xldCBsPWtpKGkpP1wiaHR0cDpcIjpcImh0dHBzOlwiLHU9bmV3IFVSTChpLmhyZWYucmVwbGFjZShvLGwpKTtyZXR1cm57YXBpS2V5OmEsdXJsOnV9fXZhciBBbD1DKG9uKCkpLEtuPWNsYXNze2FwaUtleTt0cmFjaW5nSGVscGVyO2xvZ0xldmVsO2xvZ1F1ZXJpZXM7ZW5naW5lSGFzaDtjb25zdHJ1Y3Rvcih7YXBpS2V5OnIsdHJhY2luZ0hlbHBlcjp0LGxvZ0xldmVsOm4sbG9nUXVlcmllczppLGVuZ2luZUhhc2g6b30pe3RoaXMuYXBpS2V5PXIsdGhpcy50cmFjaW5nSGVscGVyPXQsdGhpcy5sb2dMZXZlbD1uLHRoaXMubG9nUXVlcmllcz1pLHRoaXMuZW5naW5lSGFzaD1vfWJ1aWxkKHt0cmFjZXBhcmVudDpyLHRyYW5zYWN0aW9uSWQ6dH09e30pe2xldCBuPXtBY2NlcHQ6XCJhcHBsaWNhdGlvbi9qc29uXCIsQXV0aG9yaXphdGlvbjpgQmVhcmVyICR7dGhpcy5hcGlLZXl9YCxcIkNvbnRlbnQtVHlwZVwiOlwiYXBwbGljYXRpb24vanNvblwiLFwiUHJpc21hLUVuZ2luZS1IYXNoXCI6dGhpcy5lbmdpbmVIYXNoLFwiUHJpc21hLUVuZ2luZS1WZXJzaW9uXCI6QWwuZW5naW5lc1ZlcnNpb259O3RoaXMudHJhY2luZ0hlbHBlci5pc0VuYWJsZWQoKSYmKG4udHJhY2VwYXJlbnQ9cj8/dGhpcy50cmFjaW5nSGVscGVyLmdldFRyYWNlUGFyZW50KCkpLHQmJihuW1wiWC1UcmFuc2FjdGlvbi1JZFwiXT10KTtsZXQgaT10aGlzLiNlKCk7cmV0dXJuIGkubGVuZ3RoPjAmJihuW1wiWC1DYXB0dXJlLVRlbGVtZXRyeVwiXT1pLmpvaW4oXCIsIFwiKSksbn0jZSgpe2xldCByPVtdO3JldHVybiB0aGlzLnRyYWNpbmdIZWxwZXIuaXNFbmFibGVkKCkmJnIucHVzaChcInRyYWNpbmdcIiksdGhpcy5sb2dMZXZlbCYmci5wdXNoKHRoaXMubG9nTGV2ZWwpLHRoaXMubG9nUXVlcmllcyYmci5wdXNoKFwicXVlcnlcIikscn19O2Z1bmN0aW9uIHVmKGUpe3JldHVybiBlWzBdKjFlMytlWzFdLzFlNn1mdW5jdGlvbiBmbyhlKXtyZXR1cm4gbmV3IERhdGUodWYoZSkpfXZhciBCcj1jbGFzcyBleHRlbmRzIHNle25hbWU9XCJGb3JjZWRSZXRyeUVycm9yXCI7Y29kZT1cIlA1MDAxXCI7Y29uc3RydWN0b3Iocil7c3VwZXIoXCJUaGlzIHJlcXVlc3QgbXVzdCBiZSByZXRyaWVkXCIsQShyLCEwKSl9fTt4KEJyLFwiRm9yY2VkUmV0cnlFcnJvclwiKTt2YXIgY3I9Y2xhc3MgZXh0ZW5kcyBzZXtuYW1lPVwiTm90SW1wbGVtZW50ZWRZZXRFcnJvclwiO2NvZGU9XCJQNTAwNFwiO2NvbnN0cnVjdG9yKHIsdCl7c3VwZXIocixBKHQsITEpKX19O3goY3IsXCJOb3RJbXBsZW1lbnRlZFlldEVycm9yXCIpO3ZhciAkPWNsYXNzIGV4dGVuZHMgc2V7cmVzcG9uc2U7Y29uc3RydWN0b3Iocix0KXtzdXBlcihyLHQpLHRoaXMucmVzcG9uc2U9dC5yZXNwb25zZTtsZXQgbj10aGlzLnJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwicHJpc21hLXJlcXVlc3QtaWRcIik7aWYobil7bGV0IGk9YChUaGUgcmVxdWVzdCBpZCB3YXM6ICR7bn0pYDt0aGlzLm1lc3NhZ2U9dGhpcy5tZXNzYWdlK1wiIFwiK2l9fX07dmFyIHByPWNsYXNzIGV4dGVuZHMgJHtuYW1lPVwiU2NoZW1hTWlzc2luZ0Vycm9yXCI7Y29kZT1cIlA1MDA1XCI7Y29uc3RydWN0b3Iocil7c3VwZXIoXCJTY2hlbWEgbmVlZHMgdG8gYmUgdXBsb2FkZWRcIixBKHIsITApKX19O3gocHIsXCJTY2hlbWFNaXNzaW5nRXJyb3JcIik7dmFyIGdvPVwiVGhpcyByZXF1ZXN0IGNvdWxkIG5vdCBiZSB1bmRlcnN0b29kIGJ5IHRoZSBzZXJ2ZXJcIixSdD1jbGFzcyBleHRlbmRzICR7bmFtZT1cIkJhZFJlcXVlc3RFcnJvclwiO2NvZGU9XCJQNTAwMFwiO2NvbnN0cnVjdG9yKHIsdCxuKXtzdXBlcih0fHxnbyxBKHIsITEpKSxuJiYodGhpcy5jb2RlPW4pfX07eChSdCxcIkJhZFJlcXVlc3RFcnJvclwiKTt2YXIgQXQ9Y2xhc3MgZXh0ZW5kcyAke25hbWU9XCJIZWFsdGhjaGVja1RpbWVvdXRFcnJvclwiO2NvZGU9XCJQNTAxM1wiO2xvZ3M7Y29uc3RydWN0b3Iocix0KXtzdXBlcihcIkVuZ2luZSBub3Qgc3RhcnRlZDogaGVhbHRoY2hlY2sgdGltZW91dFwiLEEociwhMCkpLHRoaXMubG9ncz10fX07eChBdCxcIkhlYWx0aGNoZWNrVGltZW91dEVycm9yXCIpO3ZhciBDdD1jbGFzcyBleHRlbmRzICR7bmFtZT1cIkVuZ2luZVN0YXJ0dXBFcnJvclwiO2NvZGU9XCJQNTAxNFwiO2xvZ3M7Y29uc3RydWN0b3Iocix0LG4pe3N1cGVyKHQsQShyLCEwKSksdGhpcy5sb2dzPW59fTt4KEN0LFwiRW5naW5lU3RhcnR1cEVycm9yXCIpO3ZhciBJdD1jbGFzcyBleHRlbmRzICR7bmFtZT1cIkVuZ2luZVZlcnNpb25Ob3RTdXBwb3J0ZWRFcnJvclwiO2NvZGU9XCJQNTAxMlwiO2NvbnN0cnVjdG9yKHIpe3N1cGVyKFwiRW5naW5lIHZlcnNpb24gaXMgbm90IHN1cHBvcnRlZFwiLEEociwhMSkpfX07eChJdCxcIkVuZ2luZVZlcnNpb25Ob3RTdXBwb3J0ZWRFcnJvclwiKTt2YXIgaG89XCJSZXF1ZXN0IHRpbWVkIG91dFwiLGt0PWNsYXNzIGV4dGVuZHMgJHtuYW1lPVwiR2F0ZXdheVRpbWVvdXRFcnJvclwiO2NvZGU9XCJQNTAwOVwiO2NvbnN0cnVjdG9yKHIsdD1obyl7c3VwZXIodCxBKHIsITEpKX19O3goa3QsXCJHYXRld2F5VGltZW91dEVycm9yXCIpO3ZhciBjZj1cIkludGVyYWN0aXZlIHRyYW5zYWN0aW9uIGVycm9yXCIsRHQ9Y2xhc3MgZXh0ZW5kcyAke25hbWU9XCJJbnRlcmFjdGl2ZVRyYW5zYWN0aW9uRXJyb3JcIjtjb2RlPVwiUDUwMTVcIjtjb25zdHJ1Y3RvcihyLHQ9Y2Ype3N1cGVyKHQsQShyLCExKSl9fTt4KER0LFwiSW50ZXJhY3RpdmVUcmFuc2FjdGlvbkVycm9yXCIpO3ZhciBwZj1cIlJlcXVlc3QgcGFyYW1ldGVycyBhcmUgaW52YWxpZFwiLE90PWNsYXNzIGV4dGVuZHMgJHtuYW1lPVwiSW52YWxpZFJlcXVlc3RFcnJvclwiO2NvZGU9XCJQNTAxMVwiO2NvbnN0cnVjdG9yKHIsdD1wZil7c3VwZXIodCxBKHIsITEpKX19O3goT3QsXCJJbnZhbGlkUmVxdWVzdEVycm9yXCIpO3ZhciB5bz1cIlJlcXVlc3RlZCByZXNvdXJjZSBkb2VzIG5vdCBleGlzdFwiLF90PWNsYXNzIGV4dGVuZHMgJHtuYW1lPVwiTm90Rm91bmRFcnJvclwiO2NvZGU9XCJQNTAwM1wiO2NvbnN0cnVjdG9yKHIsdD15byl7c3VwZXIodCxBKHIsITEpKX19O3goX3QsXCJOb3RGb3VuZEVycm9yXCIpO3ZhciBibz1cIlVua25vd24gc2VydmVyIGVycm9yXCIsVXI9Y2xhc3MgZXh0ZW5kcyAke25hbWU9XCJTZXJ2ZXJFcnJvclwiO2NvZGU9XCJQNTAwNlwiO2xvZ3M7Y29uc3RydWN0b3Iocix0LG4pe3N1cGVyKHR8fGJvLEEociwhMCkpLHRoaXMubG9ncz1ufX07eChVcixcIlNlcnZlckVycm9yXCIpO3ZhciBFbz1cIlVuYXV0aG9yaXplZCwgY2hlY2sgeW91ciBjb25uZWN0aW9uIHN0cmluZ1wiLE50PWNsYXNzIGV4dGVuZHMgJHtuYW1lPVwiVW5hdXRob3JpemVkRXJyb3JcIjtjb2RlPVwiUDUwMDdcIjtjb25zdHJ1Y3RvcihyLHQ9RW8pe3N1cGVyKHQsQShyLCExKSl9fTt4KE50LFwiVW5hdXRob3JpemVkRXJyb3JcIik7dmFyIHdvPVwiVXNhZ2UgZXhjZWVkZWQsIHJldHJ5IGFnYWluIGxhdGVyXCIsTHQ9Y2xhc3MgZXh0ZW5kcyAke25hbWU9XCJVc2FnZUV4Y2VlZGVkRXJyb3JcIjtjb2RlPVwiUDUwMDhcIjtjb25zdHJ1Y3RvcihyLHQ9d28pe3N1cGVyKHQsQShyLCEwKSl9fTt4KEx0LFwiVXNhZ2VFeGNlZWRlZEVycm9yXCIpO2FzeW5jIGZ1bmN0aW9uIGRmKGUpe2xldCByO3RyeXtyPWF3YWl0IGUudGV4dCgpfWNhdGNoe3JldHVybnt0eXBlOlwiRW1wdHlFcnJvclwifX10cnl7bGV0IHQ9SlNPTi5wYXJzZShyKTtpZih0eXBlb2YgdD09XCJzdHJpbmdcIilzd2l0Y2godCl7Y2FzZVwiSW50ZXJuYWxEYXRhUHJveHlFcnJvclwiOnJldHVybnt0eXBlOlwiRGF0YVByb3h5RXJyb3JcIixib2R5OnR9O2RlZmF1bHQ6cmV0dXJue3R5cGU6XCJVbmtub3duVGV4dEVycm9yXCIsYm9keTp0fX1pZih0eXBlb2YgdD09XCJvYmplY3RcIiYmdCE9PW51bGwpe2lmKFwiaXNfcGFuaWNcImluIHQmJlwibWVzc2FnZVwiaW4gdCYmXCJlcnJvcl9jb2RlXCJpbiB0KXJldHVybnt0eXBlOlwiUXVlcnlFbmdpbmVFcnJvclwiLGJvZHk6dH07aWYoXCJFbmdpbmVOb3RTdGFydGVkXCJpbiB0fHxcIkludGVyYWN0aXZlVHJhbnNhY3Rpb25NaXNyb3V0ZWRcImluIHR8fFwiSW52YWxpZFJlcXVlc3RFcnJvclwiaW4gdCl7bGV0IG49T2JqZWN0LnZhbHVlcyh0KVswXS5yZWFzb247cmV0dXJuIHR5cGVvZiBuPT1cInN0cmluZ1wiJiYhW1wiU2NoZW1hTWlzc2luZ1wiLFwiRW5naW5lVmVyc2lvbk5vdFN1cHBvcnRlZFwiXS5pbmNsdWRlcyhuKT97dHlwZTpcIlVua25vd25Kc29uRXJyb3JcIixib2R5OnR9Ont0eXBlOlwiRGF0YVByb3h5RXJyb3JcIixib2R5OnR9fX1yZXR1cm57dHlwZTpcIlVua25vd25Kc29uRXJyb3JcIixib2R5OnR9fWNhdGNoe3JldHVybiByPT09XCJcIj97dHlwZTpcIkVtcHR5RXJyb3JcIn06e3R5cGU6XCJVbmtub3duVGV4dEVycm9yXCIsYm9keTpyfX19YXN5bmMgZnVuY3Rpb24gRnQoZSxyKXtpZihlLm9rKXJldHVybjtsZXQgdD17Y2xpZW50VmVyc2lvbjpyLHJlc3BvbnNlOmV9LG49YXdhaXQgZGYoZSk7aWYobi50eXBlPT09XCJRdWVyeUVuZ2luZUVycm9yXCIpdGhyb3cgbmV3IHoobi5ib2R5Lm1lc3NhZ2Use2NvZGU6bi5ib2R5LmVycm9yX2NvZGUsY2xpZW50VmVyc2lvbjpyfSk7aWYobi50eXBlPT09XCJEYXRhUHJveHlFcnJvclwiKXtpZihuLmJvZHk9PT1cIkludGVybmFsRGF0YVByb3h5RXJyb3JcIil0aHJvdyBuZXcgVXIodCxcIkludGVybmFsIERhdGEgUHJveHkgZXJyb3JcIik7aWYoXCJFbmdpbmVOb3RTdGFydGVkXCJpbiBuLmJvZHkpe2lmKG4uYm9keS5FbmdpbmVOb3RTdGFydGVkLnJlYXNvbj09PVwiU2NoZW1hTWlzc2luZ1wiKXJldHVybiBuZXcgcHIodCk7aWYobi5ib2R5LkVuZ2luZU5vdFN0YXJ0ZWQucmVhc29uPT09XCJFbmdpbmVWZXJzaW9uTm90U3VwcG9ydGVkXCIpdGhyb3cgbmV3IEl0KHQpO2lmKFwiRW5naW5lU3RhcnR1cEVycm9yXCJpbiBuLmJvZHkuRW5naW5lTm90U3RhcnRlZC5yZWFzb24pe2xldHttc2c6aSxsb2dzOm99PW4uYm9keS5FbmdpbmVOb3RTdGFydGVkLnJlYXNvbi5FbmdpbmVTdGFydHVwRXJyb3I7dGhyb3cgbmV3IEN0KHQsaSxvKX1pZihcIktub3duRW5naW5lU3RhcnR1cEVycm9yXCJpbiBuLmJvZHkuRW5naW5lTm90U3RhcnRlZC5yZWFzb24pe2xldHttc2c6aSxlcnJvcl9jb2RlOm99PW4uYm9keS5FbmdpbmVOb3RTdGFydGVkLnJlYXNvbi5Lbm93bkVuZ2luZVN0YXJ0dXBFcnJvcjt0aHJvdyBuZXcgVChpLHIsbyl9aWYoXCJIZWFsdGhjaGVja1RpbWVvdXRcImluIG4uYm9keS5FbmdpbmVOb3RTdGFydGVkLnJlYXNvbil7bGV0e2xvZ3M6aX09bi5ib2R5LkVuZ2luZU5vdFN0YXJ0ZWQucmVhc29uLkhlYWx0aGNoZWNrVGltZW91dDt0aHJvdyBuZXcgQXQodCxpKX19aWYoXCJJbnRlcmFjdGl2ZVRyYW5zYWN0aW9uTWlzcm91dGVkXCJpbiBuLmJvZHkpe2xldCBpPXtJRFBhcnNlRXJyb3I6XCJDb3VsZCBub3QgcGFyc2UgaW50ZXJhY3RpdmUgdHJhbnNhY3Rpb24gSURcIixOb1F1ZXJ5RW5naW5lRm91bmRFcnJvcjpcIkNvdWxkIG5vdCBmaW5kIFF1ZXJ5IEVuZ2luZSBmb3IgdGhlIHNwZWNpZmllZCBob3N0IGFuZCB0cmFuc2FjdGlvbiBJRFwiLFRyYW5zYWN0aW9uU3RhcnRFcnJvcjpcIkNvdWxkIG5vdCBzdGFydCBpbnRlcmFjdGl2ZSB0cmFuc2FjdGlvblwifTt0aHJvdyBuZXcgRHQodCxpW24uYm9keS5JbnRlcmFjdGl2ZVRyYW5zYWN0aW9uTWlzcm91dGVkLnJlYXNvbl0pfWlmKFwiSW52YWxpZFJlcXVlc3RFcnJvclwiaW4gbi5ib2R5KXRocm93IG5ldyBPdCh0LG4uYm9keS5JbnZhbGlkUmVxdWVzdEVycm9yLnJlYXNvbil9aWYoZS5zdGF0dXM9PT00MDF8fGUuc3RhdHVzPT09NDAzKXRocm93IG5ldyBOdCh0LEdyKEVvLG4pKTtpZihlLnN0YXR1cz09PTQwNClyZXR1cm4gbmV3IF90KHQsR3IoeW8sbikpO2lmKGUuc3RhdHVzPT09NDI5KXRocm93IG5ldyBMdCh0LEdyKHdvLG4pKTtpZihlLnN0YXR1cz09PTUwNCl0aHJvdyBuZXcga3QodCxHcihobyxuKSk7aWYoZS5zdGF0dXM+PTUwMCl0aHJvdyBuZXcgVXIodCxHcihibyxuKSk7aWYoZS5zdGF0dXM+PTQwMCl0aHJvdyBuZXcgUnQodCxHcihnbyxuKSl9ZnVuY3Rpb24gR3IoZSxyKXtyZXR1cm4gci50eXBlPT09XCJFbXB0eUVycm9yXCI/ZTpgJHtlfTogJHtKU09OLnN0cmluZ2lmeShyKX1gfWZ1bmN0aW9uIENsKGUpe2xldCByPU1hdGgucG93KDIsZSkqNTAsdD1NYXRoLmNlaWwoTWF0aC5yYW5kb20oKSpyKS1NYXRoLmNlaWwoci8yKSxuPXIrdDtyZXR1cm4gbmV3IFByb21pc2UoaT0+c2V0VGltZW91dCgoKT0+aShuKSxuKSl9dmFyICRlPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO2Z1bmN0aW9uIElsKGUpe2xldCByPW5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShlKSx0PVwiXCIsbj1yLmJ5dGVMZW5ndGgsaT1uJTMsbz1uLWkscyxhLGwsdSxjO2ZvcihsZXQgcD0wO3A8bztwPXArMyljPXJbcF08PDE2fHJbcCsxXTw8OHxyW3ArMl0scz0oYyYxNjUxNTA3Mik+PjE4LGE9KGMmMjU4MDQ4KT4+MTIsbD0oYyY0MDMyKT4+Nix1PWMmNjMsdCs9JGVbc10rJGVbYV0rJGVbbF0rJGVbdV07cmV0dXJuIGk9PTE/KGM9cltvXSxzPShjJjI1Mik+PjIsYT0oYyYzKTw8NCx0Kz0kZVtzXSskZVthXStcIj09XCIpOmk9PTImJihjPXJbb108PDh8cltvKzFdLHM9KGMmNjQ1MTIpPj4xMCxhPShjJjEwMDgpPj40LGw9KGMmMTUpPDwyLHQrPSRlW3NdKyRlW2FdKyRlW2xdK1wiPVwiKSx0fWZ1bmN0aW9uIGtsKGUpe2lmKCEhZS5nZW5lcmF0b3I/LnByZXZpZXdGZWF0dXJlcy5zb21lKHQ9PnQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhcIm1ldHJpY3NcIikpKXRocm93IG5ldyBUKFwiVGhlIGBtZXRyaWNzYCBwcmV2aWV3IGZlYXR1cmUgaXMgbm90IHlldCBhdmFpbGFibGUgd2l0aCBBY2NlbGVyYXRlLlxcblBsZWFzZSByZW1vdmUgYG1ldHJpY3NgIGZyb20gdGhlIGBwcmV2aWV3RmVhdHVyZXNgIGluIHlvdXIgc2NoZW1hLlxcblxcbk1vcmUgaW5mb3JtYXRpb24gYWJvdXQgQWNjZWxlcmF0ZTogaHR0cHM6Ly9wcmlzLmx5L2QvYWNjZWxlcmF0ZVwiLGUuY2xpZW50VmVyc2lvbil9dmFyIERsPXtcIkBwcmlzbWEvZGVidWdcIjpcIndvcmtzcGFjZToqXCIsXCJAcHJpc21hL2VuZ2luZXMtdmVyc2lvblwiOlwiNi4xMy4wLTM1LjM2MWU4NmQwZWE0OTg3ZTlmNTNhNTY1MzA5YjNlZWQ3OTdhNmJjYmRcIixcIkBwcmlzbWEvZmV0Y2gtZW5naW5lXCI6XCJ3b3Jrc3BhY2U6KlwiLFwiQHByaXNtYS9nZXQtcGxhdGZvcm1cIjpcIndvcmtzcGFjZToqXCJ9O3ZhciBNdD1jbGFzcyBleHRlbmRzIHNle25hbWU9XCJSZXF1ZXN0RXJyb3JcIjtjb2RlPVwiUDUwMTBcIjtjb25zdHJ1Y3RvcihyLHQpe3N1cGVyKGBDYW5ub3QgZmV0Y2ggZGF0YSBmcm9tIHNlcnZpY2U6XG4ke3J9YCxBKHQsITApKX19O3goTXQsXCJSZXF1ZXN0RXJyb3JcIik7YXN5bmMgZnVuY3Rpb24gZHIoZSxyLHQ9bj0+bil7bGV0e2NsaWVudFZlcnNpb246biwuLi5pfT1yLG89dChmZXRjaCk7dHJ5e3JldHVybiBhd2FpdCBvKGUsaSl9Y2F0Y2gocyl7bGV0IGE9cy5tZXNzYWdlPz9cIlVua25vd24gZXJyb3JcIjt0aHJvdyBuZXcgTXQoYSx7Y2xpZW50VmVyc2lvbjpuLGNhdXNlOnN9KX19dmFyIGZmPS9eWzEtOV1bMC05XSpcXC5bMC05XStcXC5bMC05XSskLyxPbD1OKFwicHJpc21hOmNsaWVudDpkYXRhcHJveHlFbmdpbmVcIik7YXN5bmMgZnVuY3Rpb24gZ2YoZSxyKXtsZXQgdD1EbFtcIkBwcmlzbWEvZW5naW5lcy12ZXJzaW9uXCJdLG49ci5jbGllbnRWZXJzaW9uPz9cInVua25vd25cIjtpZihwcm9jZXNzLmVudi5QUklTTUFfQ0xJRU5UX0RBVEFfUFJPWFlfQ0xJRU5UX1ZFUlNJT058fGdsb2JhbFRoaXMuUFJJU01BX0NMSUVOVF9EQVRBX1BST1hZX0NMSUVOVF9WRVJTSU9OKXJldHVybiBwcm9jZXNzLmVudi5QUklTTUFfQ0xJRU5UX0RBVEFfUFJPWFlfQ0xJRU5UX1ZFUlNJT058fGdsb2JhbFRoaXMuUFJJU01BX0NMSUVOVF9EQVRBX1BST1hZX0NMSUVOVF9WRVJTSU9OO2lmKGUuaW5jbHVkZXMoXCJhY2NlbGVyYXRlXCIpJiZuIT09XCIwLjAuMFwiJiZuIT09XCJpbi1tZW1vcnlcIilyZXR1cm4gbjtsZXRbaSxvXT1uPy5zcGxpdChcIi1cIik/P1tdO2lmKG89PT12b2lkIDAmJmZmLnRlc3QoaSkpcmV0dXJuIGk7aWYobyE9PXZvaWQgMHx8bj09PVwiMC4wLjBcInx8bj09PVwiaW4tbWVtb3J5XCIpe2xldFtzXT10LnNwbGl0KFwiLVwiKT8/W10sW2EsbCx1XT1zLnNwbGl0KFwiLlwiKSxjPWhmKGA8PSR7YX0uJHtsfS4ke3V9YCkscD1hd2FpdCBkcihjLHtjbGllbnRWZXJzaW9uOm59KTtpZighcC5vayl0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBmZXRjaCBzdGFibGUgUHJpc21hIHZlcnNpb24sIHVucGtnLmNvbSBzdGF0dXMgJHtwLnN0YXR1c30gJHtwLnN0YXR1c1RleHR9LCByZXNwb25zZSBib2R5OiAke2F3YWl0IHAudGV4dCgpfHxcIjxlbXB0eSBib2R5PlwifWApO2xldCBkPWF3YWl0IHAudGV4dCgpO09sKFwibGVuZ3RoIG9mIGJvZHkgZmV0Y2hlZCBmcm9tIHVucGtnLmNvbVwiLGQubGVuZ3RoKTtsZXQgZjt0cnl7Zj1KU09OLnBhcnNlKGQpfWNhdGNoKGgpe3Rocm93IGNvbnNvbGUuZXJyb3IoXCJKU09OLnBhcnNlIGVycm9yOiBib2R5IGZldGNoZWQgZnJvbSB1bnBrZy5jb206IFwiLGQpLGh9cmV0dXJuIGYudmVyc2lvbn10aHJvdyBuZXcgY3IoXCJPbmx5IGBtYWpvci5taW5vci5wYXRjaGAgdmVyc2lvbnMgYXJlIHN1cHBvcnRlZCBieSBBY2NlbGVyYXRlLlwiLHtjbGllbnRWZXJzaW9uOm59KX1hc3luYyBmdW5jdGlvbiBfbChlLHIpe2xldCB0PWF3YWl0IGdmKGUscik7cmV0dXJuIE9sKFwidmVyc2lvblwiLHQpLHR9ZnVuY3Rpb24gaGYoZSl7cmV0dXJuIGVuY29kZVVSSShgaHR0cHM6Ly91bnBrZy5jb20vcHJpc21hQCR7ZX0vcGFja2FnZS5qc29uYCl9dmFyIE5sPTMsJHQ9TihcInByaXNtYTpjbGllbnQ6ZGF0YXByb3h5RW5naW5lXCIpLHF0PWNsYXNze25hbWU9XCJEYXRhUHJveHlFbmdpbmVcIjtpbmxpbmVTY2hlbWE7aW5saW5lU2NoZW1hSGFzaDtpbmxpbmVEYXRhc291cmNlcztjb25maWc7bG9nRW1pdHRlcjtlbnY7Y2xpZW50VmVyc2lvbjtlbmdpbmVIYXNoO3RyYWNpbmdIZWxwZXI7cmVtb3RlQ2xpZW50VmVyc2lvbjtob3N0O2hlYWRlckJ1aWxkZXI7c3RhcnRQcm9taXNlO3Byb3RvY29sO2NvbnN0cnVjdG9yKHIpe2tsKHIpLHRoaXMuY29uZmlnPXIsdGhpcy5lbnY9ci5lbnYsdGhpcy5pbmxpbmVTY2hlbWE9SWwoci5pbmxpbmVTY2hlbWEpLHRoaXMuaW5saW5lRGF0YXNvdXJjZXM9ci5pbmxpbmVEYXRhc291cmNlcyx0aGlzLmlubGluZVNjaGVtYUhhc2g9ci5pbmxpbmVTY2hlbWFIYXNoLHRoaXMuY2xpZW50VmVyc2lvbj1yLmNsaWVudFZlcnNpb24sdGhpcy5lbmdpbmVIYXNoPXIuZW5naW5lVmVyc2lvbix0aGlzLmxvZ0VtaXR0ZXI9ci5sb2dFbWl0dGVyLHRoaXMudHJhY2luZ0hlbHBlcj1yLnRyYWNpbmdIZWxwZXJ9YXBpS2V5KCl7cmV0dXJuIHRoaXMuaGVhZGVyQnVpbGRlci5hcGlLZXl9dmVyc2lvbigpe3JldHVybiB0aGlzLmVuZ2luZUhhc2h9YXN5bmMgc3RhcnQoKXt0aGlzLnN0YXJ0UHJvbWlzZSE9PXZvaWQgMCYmYXdhaXQgdGhpcy5zdGFydFByb21pc2UsdGhpcy5zdGFydFByb21pc2U9KGFzeW5jKCk9PntsZXR7YXBpS2V5OnIsdXJsOnR9PXRoaXMuZ2V0VVJMQW5kQVBJS2V5KCk7dGhpcy5ob3N0PXQuaG9zdCx0aGlzLnByb3RvY29sPXQucHJvdG9jb2wsdGhpcy5oZWFkZXJCdWlsZGVyPW5ldyBLbih7YXBpS2V5OnIsdHJhY2luZ0hlbHBlcjp0aGlzLnRyYWNpbmdIZWxwZXIsbG9nTGV2ZWw6dGhpcy5jb25maWcubG9nTGV2ZWw/P1wiZXJyb3JcIixsb2dRdWVyaWVzOnRoaXMuY29uZmlnLmxvZ1F1ZXJpZXMsZW5naW5lSGFzaDp0aGlzLmVuZ2luZUhhc2h9KSx0aGlzLnJlbW90ZUNsaWVudFZlcnNpb249YXdhaXQgX2wodGhpcy5ob3N0LHRoaXMuY29uZmlnKSwkdChcImhvc3RcIix0aGlzLmhvc3QpLCR0KFwicHJvdG9jb2xcIix0aGlzLnByb3RvY29sKX0pKCksYXdhaXQgdGhpcy5zdGFydFByb21pc2V9YXN5bmMgc3RvcCgpe31wcm9wYWdhdGVSZXNwb25zZUV4dGVuc2lvbnMocil7cj8ubG9ncz8ubGVuZ3RoJiZyLmxvZ3MuZm9yRWFjaCh0PT57c3dpdGNoKHQubGV2ZWwpe2Nhc2VcImRlYnVnXCI6Y2FzZVwidHJhY2VcIjokdCh0KTticmVhaztjYXNlXCJlcnJvclwiOmNhc2VcIndhcm5cIjpjYXNlXCJpbmZvXCI6e3RoaXMubG9nRW1pdHRlci5lbWl0KHQubGV2ZWwse3RpbWVzdGFtcDpmbyh0LnRpbWVzdGFtcCksbWVzc2FnZTp0LmF0dHJpYnV0ZXMubWVzc2FnZT8/XCJcIix0YXJnZXQ6dC50YXJnZXR9KTticmVha31jYXNlXCJxdWVyeVwiOnt0aGlzLmxvZ0VtaXR0ZXIuZW1pdChcInF1ZXJ5XCIse3F1ZXJ5OnQuYXR0cmlidXRlcy5xdWVyeT8/XCJcIix0aW1lc3RhbXA6Zm8odC50aW1lc3RhbXApLGR1cmF0aW9uOnQuYXR0cmlidXRlcy5kdXJhdGlvbl9tcz8/MCxwYXJhbXM6dC5hdHRyaWJ1dGVzLnBhcmFtcz8/XCJcIix0YXJnZXQ6dC50YXJnZXR9KTticmVha31kZWZhdWx0OnQubGV2ZWx9fSkscj8udHJhY2VzPy5sZW5ndGgmJnRoaXMudHJhY2luZ0hlbHBlci5kaXNwYXRjaEVuZ2luZVNwYW5zKHIudHJhY2VzKX1vbkJlZm9yZUV4aXQoKXt0aHJvdyBuZXcgRXJyb3IoJ1wiYmVmb3JlRXhpdFwiIGhvb2sgaXMgbm90IGFwcGxpY2FibGUgdG8gdGhlIHJlbW90ZSBxdWVyeSBlbmdpbmUnKX1hc3luYyB1cmwocil7cmV0dXJuIGF3YWl0IHRoaXMuc3RhcnQoKSxgJHt0aGlzLnByb3RvY29sfS8vJHt0aGlzLmhvc3R9LyR7dGhpcy5yZW1vdGVDbGllbnRWZXJzaW9ufS8ke3RoaXMuaW5saW5lU2NoZW1hSGFzaH0vJHtyfWB9YXN5bmMgdXBsb2FkU2NoZW1hKCl7bGV0IHI9e25hbWU6XCJzY2hlbWFVcGxvYWRcIixpbnRlcm5hbDohMH07cmV0dXJuIHRoaXMudHJhY2luZ0hlbHBlci5ydW5JbkNoaWxkU3BhbihyLGFzeW5jKCk9PntsZXQgdD1hd2FpdCBkcihhd2FpdCB0aGlzLnVybChcInNjaGVtYVwiKSx7bWV0aG9kOlwiUFVUXCIsaGVhZGVyczp0aGlzLmhlYWRlckJ1aWxkZXIuYnVpbGQoKSxib2R5OnRoaXMuaW5saW5lU2NoZW1hLGNsaWVudFZlcnNpb246dGhpcy5jbGllbnRWZXJzaW9ufSk7dC5va3x8JHQoXCJzY2hlbWEgcmVzcG9uc2Ugc3RhdHVzXCIsdC5zdGF0dXMpO2xldCBuPWF3YWl0IEZ0KHQsdGhpcy5jbGllbnRWZXJzaW9uKTtpZihuKXRocm93IHRoaXMubG9nRW1pdHRlci5lbWl0KFwid2FyblwiLHttZXNzYWdlOmBFcnJvciB3aGlsZSB1cGxvYWRpbmcgc2NoZW1hOiAke24ubWVzc2FnZX1gLHRpbWVzdGFtcDpuZXcgRGF0ZSx0YXJnZXQ6XCJcIn0pLG47dGhpcy5sb2dFbWl0dGVyLmVtaXQoXCJpbmZvXCIse21lc3NhZ2U6YFNjaGVtYSAocmUpdXBsb2FkZWQgKGhhc2g6ICR7dGhpcy5pbmxpbmVTY2hlbWFIYXNofSlgLHRpbWVzdGFtcDpuZXcgRGF0ZSx0YXJnZXQ6XCJcIn0pfSl9cmVxdWVzdChyLHt0cmFjZXBhcmVudDp0LGludGVyYWN0aXZlVHJhbnNhY3Rpb246bixjdXN0b21EYXRhUHJveHlGZXRjaDppfSl7cmV0dXJuIHRoaXMucmVxdWVzdEludGVybmFsKHtib2R5OnIsdHJhY2VwYXJlbnQ6dCxpbnRlcmFjdGl2ZVRyYW5zYWN0aW9uOm4sY3VzdG9tRGF0YVByb3h5RmV0Y2g6aX0pfWFzeW5jIHJlcXVlc3RCYXRjaChyLHt0cmFjZXBhcmVudDp0LHRyYW5zYWN0aW9uOm4sY3VzdG9tRGF0YVByb3h5RmV0Y2g6aX0pe2xldCBvPW4/LmtpbmQ9PT1cIml0eFwiP24ub3B0aW9uczp2b2lkIDAscz0kcihyLG4pO3JldHVybihhd2FpdCB0aGlzLnJlcXVlc3RJbnRlcm5hbCh7Ym9keTpzLGN1c3RvbURhdGFQcm94eUZldGNoOmksaW50ZXJhY3RpdmVUcmFuc2FjdGlvbjpvLHRyYWNlcGFyZW50OnR9KSkubWFwKGw9PihsLmV4dGVuc2lvbnMmJnRoaXMucHJvcGFnYXRlUmVzcG9uc2VFeHRlbnNpb25zKGwuZXh0ZW5zaW9ucyksXCJlcnJvcnNcImluIGw/dGhpcy5jb252ZXJ0UHJvdG9jb2xFcnJvcnNUb0NsaWVudEVycm9yKGwuZXJyb3JzKTpsKSl9cmVxdWVzdEludGVybmFsKHtib2R5OnIsdHJhY2VwYXJlbnQ6dCxjdXN0b21EYXRhUHJveHlGZXRjaDpuLGludGVyYWN0aXZlVHJhbnNhY3Rpb246aX0pe3JldHVybiB0aGlzLndpdGhSZXRyeSh7YWN0aW9uR2VydW5kOlwicXVlcnlpbmdcIixjYWxsYmFjazphc3luYyh7bG9nSHR0cENhbGw6b30pPT57bGV0IHM9aT9gJHtpLnBheWxvYWQuZW5kcG9pbnR9L2dyYXBocWxgOmF3YWl0IHRoaXMudXJsKFwiZ3JhcGhxbFwiKTtvKHMpO2xldCBhPWF3YWl0IGRyKHMse21ldGhvZDpcIlBPU1RcIixoZWFkZXJzOnRoaXMuaGVhZGVyQnVpbGRlci5idWlsZCh7dHJhY2VwYXJlbnQ6dCx0cmFuc2FjdGlvbklkOmk/LmlkfSksYm9keTpKU09OLnN0cmluZ2lmeShyKSxjbGllbnRWZXJzaW9uOnRoaXMuY2xpZW50VmVyc2lvbn0sbik7YS5va3x8JHQoXCJncmFwaHFsIHJlc3BvbnNlIHN0YXR1c1wiLGEuc3RhdHVzKSxhd2FpdCB0aGlzLmhhbmRsZUVycm9yKGF3YWl0IEZ0KGEsdGhpcy5jbGllbnRWZXJzaW9uKSk7bGV0IGw9YXdhaXQgYS5qc29uKCk7aWYobC5leHRlbnNpb25zJiZ0aGlzLnByb3BhZ2F0ZVJlc3BvbnNlRXh0ZW5zaW9ucyhsLmV4dGVuc2lvbnMpLFwiZXJyb3JzXCJpbiBsKXRocm93IHRoaXMuY29udmVydFByb3RvY29sRXJyb3JzVG9DbGllbnRFcnJvcihsLmVycm9ycyk7cmV0dXJuXCJiYXRjaFJlc3VsdFwiaW4gbD9sLmJhdGNoUmVzdWx0Omx9fSl9YXN5bmMgdHJhbnNhY3Rpb24ocix0LG4pe2xldCBpPXtzdGFydDpcInN0YXJ0aW5nXCIsY29tbWl0OlwiY29tbWl0dGluZ1wiLHJvbGxiYWNrOlwicm9sbGluZyBiYWNrXCJ9O3JldHVybiB0aGlzLndpdGhSZXRyeSh7YWN0aW9uR2VydW5kOmAke2lbcl19IHRyYW5zYWN0aW9uYCxjYWxsYmFjazphc3luYyh7bG9nSHR0cENhbGw6b30pPT57aWYocj09PVwic3RhcnRcIil7bGV0IHM9SlNPTi5zdHJpbmdpZnkoe21heF93YWl0Om4ubWF4V2FpdCx0aW1lb3V0Om4udGltZW91dCxpc29sYXRpb25fbGV2ZWw6bi5pc29sYXRpb25MZXZlbH0pLGE9YXdhaXQgdGhpcy51cmwoXCJ0cmFuc2FjdGlvbi9zdGFydFwiKTtvKGEpO2xldCBsPWF3YWl0IGRyKGEse21ldGhvZDpcIlBPU1RcIixoZWFkZXJzOnRoaXMuaGVhZGVyQnVpbGRlci5idWlsZCh7dHJhY2VwYXJlbnQ6dC50cmFjZXBhcmVudH0pLGJvZHk6cyxjbGllbnRWZXJzaW9uOnRoaXMuY2xpZW50VmVyc2lvbn0pO2F3YWl0IHRoaXMuaGFuZGxlRXJyb3IoYXdhaXQgRnQobCx0aGlzLmNsaWVudFZlcnNpb24pKTtsZXQgdT1hd2FpdCBsLmpzb24oKSx7ZXh0ZW5zaW9uczpjfT11O2MmJnRoaXMucHJvcGFnYXRlUmVzcG9uc2VFeHRlbnNpb25zKGMpO2xldCBwPXUuaWQsZD11W1wiZGF0YS1wcm94eVwiXS5lbmRwb2ludDtyZXR1cm57aWQ6cCxwYXlsb2FkOntlbmRwb2ludDpkfX19ZWxzZXtsZXQgcz1gJHtuLnBheWxvYWQuZW5kcG9pbnR9LyR7cn1gO28ocyk7bGV0IGE9YXdhaXQgZHIocyx7bWV0aG9kOlwiUE9TVFwiLGhlYWRlcnM6dGhpcy5oZWFkZXJCdWlsZGVyLmJ1aWxkKHt0cmFjZXBhcmVudDp0LnRyYWNlcGFyZW50fSksY2xpZW50VmVyc2lvbjp0aGlzLmNsaWVudFZlcnNpb259KTthd2FpdCB0aGlzLmhhbmRsZUVycm9yKGF3YWl0IEZ0KGEsdGhpcy5jbGllbnRWZXJzaW9uKSk7bGV0IGw9YXdhaXQgYS5qc29uKCkse2V4dGVuc2lvbnM6dX09bDt1JiZ0aGlzLnByb3BhZ2F0ZVJlc3BvbnNlRXh0ZW5zaW9ucyh1KTtyZXR1cm59fX0pfWdldFVSTEFuZEFQSUtleSgpe3JldHVybiBSbCh7Y2xpZW50VmVyc2lvbjp0aGlzLmNsaWVudFZlcnNpb24sZW52OnRoaXMuZW52LGlubGluZURhdGFzb3VyY2VzOnRoaXMuaW5saW5lRGF0YXNvdXJjZXMsb3ZlcnJpZGVEYXRhc291cmNlczp0aGlzLmNvbmZpZy5vdmVycmlkZURhdGFzb3VyY2VzfSl9bWV0cmljcygpe3Rocm93IG5ldyBjcihcIk1ldHJpY3MgYXJlIG5vdCB5ZXQgc3VwcG9ydGVkIGZvciBBY2NlbGVyYXRlXCIse2NsaWVudFZlcnNpb246dGhpcy5jbGllbnRWZXJzaW9ufSl9YXN5bmMgd2l0aFJldHJ5KHIpe2ZvcihsZXQgdD0wOzt0Kyspe2xldCBuPWk9Pnt0aGlzLmxvZ0VtaXR0ZXIuZW1pdChcImluZm9cIix7bWVzc2FnZTpgQ2FsbGluZyAke2l9IChuPSR7dH0pYCx0aW1lc3RhbXA6bmV3IERhdGUsdGFyZ2V0OlwiXCJ9KX07dHJ5e3JldHVybiBhd2FpdCByLmNhbGxiYWNrKHtsb2dIdHRwQ2FsbDpufSl9Y2F0Y2goaSl7aWYoIShpIGluc3RhbmNlb2Ygc2UpfHwhaS5pc1JldHJ5YWJsZSl0aHJvdyBpO2lmKHQ+PU5sKXRocm93IGkgaW5zdGFuY2VvZiBCcj9pLmNhdXNlOmk7dGhpcy5sb2dFbWl0dGVyLmVtaXQoXCJ3YXJuXCIse21lc3NhZ2U6YEF0dGVtcHQgJHt0KzF9LyR7Tmx9IGZhaWxlZCBmb3IgJHtyLmFjdGlvbkdlcnVuZH06ICR7aS5tZXNzYWdlPz9cIih1bmtub3duKVwifWAsdGltZXN0YW1wOm5ldyBEYXRlLHRhcmdldDpcIlwifSk7bGV0IG89YXdhaXQgQ2wodCk7dGhpcy5sb2dFbWl0dGVyLmVtaXQoXCJ3YXJuXCIse21lc3NhZ2U6YFJldHJ5aW5nIGFmdGVyICR7b31tc2AsdGltZXN0YW1wOm5ldyBEYXRlLHRhcmdldDpcIlwifSl9fX1hc3luYyBoYW5kbGVFcnJvcihyKXtpZihyIGluc3RhbmNlb2YgcHIpdGhyb3cgYXdhaXQgdGhpcy51cGxvYWRTY2hlbWEoKSxuZXcgQnIoe2NsaWVudFZlcnNpb246dGhpcy5jbGllbnRWZXJzaW9uLGNhdXNlOnJ9KTtpZihyKXRocm93IHJ9Y29udmVydFByb3RvY29sRXJyb3JzVG9DbGllbnRFcnJvcihyKXtyZXR1cm4gci5sZW5ndGg9PT0xP3FyKHJbMF0sdGhpcy5jb25maWcuY2xpZW50VmVyc2lvbix0aGlzLmNvbmZpZy5hY3RpdmVQcm92aWRlcik6bmV3IGooSlNPTi5zdHJpbmdpZnkocikse2NsaWVudFZlcnNpb246dGhpcy5jb25maWcuY2xpZW50VmVyc2lvbn0pfWFwcGx5UGVuZGluZ01pZ3JhdGlvbnMoKXt0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKX19O2Z1bmN0aW9uIExsKGUpe2lmKGU/LmtpbmQ9PT1cIml0eFwiKXJldHVybiBlLm9wdGlvbnMuaWR9dmFyIHZvPUMocmVxdWlyZShcIm5vZGU6b3NcIikpLEZsPUMocmVxdWlyZShcIm5vZGU6cGF0aFwiKSk7dmFyIHhvPVN5bWJvbChcIlByaXNtYUxpYnJhcnlFbmdpbmVDYWNoZVwiKTtmdW5jdGlvbiB5Zigpe2xldCBlPWdsb2JhbFRoaXM7cmV0dXJuIGVbeG9dPT09dm9pZCAwJiYoZVt4b109e30pLGVbeG9dfWZ1bmN0aW9uIGJmKGUpe2xldCByPXlmKCk7aWYocltlXSE9PXZvaWQgMClyZXR1cm4gcltlXTtsZXQgdD1GbC5kZWZhdWx0LnRvTmFtZXNwYWNlZFBhdGgoZSksbj17ZXhwb3J0czp7fX0saT0wO3JldHVybiBwcm9jZXNzLnBsYXRmb3JtIT09XCJ3aW4zMlwiJiYoaT12by5kZWZhdWx0LmNvbnN0YW50cy5kbG9wZW4uUlRMRF9MQVpZfHZvLmRlZmF1bHQuY29uc3RhbnRzLmRsb3Blbi5SVExEX0RFRVBCSU5EKSxwcm9jZXNzLmRsb3BlbihuLHQsaSkscltlXT1uLmV4cG9ydHMsbi5leHBvcnRzfXZhciBNbD17YXN5bmMgbG9hZExpYnJhcnkoZSl7bGV0IHI9YXdhaXQgZ2koKSx0PWF3YWl0IGJsKFwibGlicmFyeVwiLGUpO3RyeXtyZXR1cm4gZS50cmFjaW5nSGVscGVyLnJ1bkluQ2hpbGRTcGFuKHtuYW1lOlwibG9hZExpYnJhcnlcIixpbnRlcm5hbDohMH0sKCk9PmJmKHQpKX1jYXRjaChuKXtsZXQgaT1DaSh7ZTpuLHBsYXRmb3JtSW5mbzpyLGlkOnR9KTt0aHJvdyBuZXcgVChpLGUuY2xpZW50VmVyc2lvbil9fX07dmFyIFBvLCRsPXthc3luYyBsb2FkTGlicmFyeShlKXtsZXR7Y2xpZW50VmVyc2lvbjpyLGFkYXB0ZXI6dCxlbmdpbmVXYXNtOm59PWU7aWYodD09PXZvaWQgMCl0aHJvdyBuZXcgVChgVGhlIFxcYGFkYXB0ZXJcXGAgb3B0aW9uIGZvciBcXGBQcmlzbWFDbGllbnRcXGAgaXMgcmVxdWlyZWQgaW4gdGhpcyBjb250ZXh0ICgke0duKCkucHJldHR5TmFtZX0pYCxyKTtpZihuPT09dm9pZCAwKXRocm93IG5ldyBUKFwiV0FTTSBlbmdpbmUgd2FzIHVuZXhwZWN0ZWRseSBgdW5kZWZpbmVkYFwiLHIpO1BvPT09dm9pZCAwJiYoUG89KGFzeW5jKCk9PntsZXQgbz1hd2FpdCBuLmdldFJ1bnRpbWUoKSxzPWF3YWl0IG4uZ2V0UXVlcnlFbmdpbmVXYXNtTW9kdWxlKCk7aWYocz09bnVsbCl0aHJvdyBuZXcgVChcIlRoZSBsb2FkZWQgd2FzbSBtb2R1bGUgd2FzIHVuZXhwZWN0ZWRseSBgdW5kZWZpbmVkYCBvciBgbnVsbGAgb25jZSBsb2FkZWRcIixyKTtsZXQgYT17XCIuL3F1ZXJ5X2VuZ2luZV9iZy5qc1wiOm99LGw9bmV3IFdlYkFzc2VtYmx5Lkluc3RhbmNlKHMsYSksdT1sLmV4cG9ydHMuX193YmluZGdlbl9zdGFydDtyZXR1cm4gby5fX3diZ19zZXRfd2FzbShsLmV4cG9ydHMpLHUoKSxvLlF1ZXJ5RW5naW5lfSkoKSk7bGV0IGk9YXdhaXQgUG87cmV0dXJue2RlYnVnUGFuaWMoKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJ7fVwiKX0sZG1tZigpe3JldHVybiBQcm9taXNlLnJlc29sdmUoXCJ7fVwiKX0sdmVyc2lvbigpe3JldHVybntjb21taXQ6XCJ1bmtub3duXCIsdmVyc2lvbjpcInVua25vd25cIn19LFF1ZXJ5RW5naW5lOml9fX07dmFyIEVmPVwiUDIwMzZcIixBZT1OKFwicHJpc21hOmNsaWVudDpsaWJyYXJ5RW5naW5lXCIpO2Z1bmN0aW9uIHdmKGUpe3JldHVybiBlLml0ZW1fdHlwZT09PVwicXVlcnlcIiYmXCJxdWVyeVwiaW4gZX1mdW5jdGlvbiB4ZihlKXtyZXR1cm5cImxldmVsXCJpbiBlP2UubGV2ZWw9PT1cImVycm9yXCImJmUubWVzc2FnZT09PVwiUEFOSUNcIjohMX12YXIgcWw9Wy4uLnVpLFwibmF0aXZlXCJdLHZmPTB4ZmZmZmZmZmZmZmZmZmZmZm4sVG89MW47ZnVuY3Rpb24gUGYoKXtsZXQgZT1UbysrO3JldHVybiBUbz52ZiYmKFRvPTFuKSxlfXZhciBRcj1jbGFzc3tuYW1lPVwiTGlicmFyeUVuZ2luZVwiO2VuZ2luZTtsaWJyYXJ5SW5zdGFudGlhdGlvblByb21pc2U7bGlicmFyeVN0YXJ0aW5nUHJvbWlzZTtsaWJyYXJ5U3RvcHBpbmdQcm9taXNlO2xpYnJhcnlTdGFydGVkO2V4ZWN1dGluZ1F1ZXJ5UHJvbWlzZTtjb25maWc7UXVlcnlFbmdpbmVDb25zdHJ1Y3RvcjtsaWJyYXJ5TG9hZGVyO2xpYnJhcnk7bG9nRW1pdHRlcjtsaWJRdWVyeUVuZ2luZVBhdGg7YmluYXJ5VGFyZ2V0O2RhdGFzb3VyY2VPdmVycmlkZXM7ZGF0YW1vZGVsO2xvZ1F1ZXJpZXM7bG9nTGV2ZWw7bGFzdFF1ZXJ5O2xvZ2dlclJ1c3RQYW5pYzt0cmFjaW5nSGVscGVyO2FkYXB0ZXJQcm9taXNlO3ZlcnNpb25JbmZvO2NvbnN0cnVjdG9yKHIsdCl7dGhpcy5saWJyYXJ5TG9hZGVyPXQ/P01sLHIuZW5naW5lV2FzbSE9PXZvaWQgMCYmKHRoaXMubGlicmFyeUxvYWRlcj10Pz8kbCksdGhpcy5jb25maWc9cix0aGlzLmxpYnJhcnlTdGFydGVkPSExLHRoaXMubG9nUXVlcmllcz1yLmxvZ1F1ZXJpZXM/PyExLHRoaXMubG9nTGV2ZWw9ci5sb2dMZXZlbD8/XCJlcnJvclwiLHRoaXMubG9nRW1pdHRlcj1yLmxvZ0VtaXR0ZXIsdGhpcy5kYXRhbW9kZWw9ci5pbmxpbmVTY2hlbWEsdGhpcy50cmFjaW5nSGVscGVyPXIudHJhY2luZ0hlbHBlcixyLmVuYWJsZURlYnVnTG9ncyYmKHRoaXMubG9nTGV2ZWw9XCJkZWJ1Z1wiKTtsZXQgbj1PYmplY3Qua2V5cyhyLm92ZXJyaWRlRGF0YXNvdXJjZXMpWzBdLGk9ci5vdmVycmlkZURhdGFzb3VyY2VzW25dPy51cmw7biE9PXZvaWQgMCYmaSE9PXZvaWQgMCYmKHRoaXMuZGF0YXNvdXJjZU92ZXJyaWRlcz17W25dOml9KSx0aGlzLmxpYnJhcnlJbnN0YW50aWF0aW9uUHJvbWlzZT10aGlzLmluc3RhbnRpYXRlTGlicmFyeSgpfXdyYXBFbmdpbmUocil7cmV0dXJue2FwcGx5UGVuZGluZ01pZ3JhdGlvbnM6ci5hcHBseVBlbmRpbmdNaWdyYXRpb25zPy5iaW5kKHIpLGNvbW1pdFRyYW5zYWN0aW9uOnRoaXMud2l0aFJlcXVlc3RJZChyLmNvbW1pdFRyYW5zYWN0aW9uLmJpbmQocikpLGNvbm5lY3Q6dGhpcy53aXRoUmVxdWVzdElkKHIuY29ubmVjdC5iaW5kKHIpKSxkaXNjb25uZWN0OnRoaXMud2l0aFJlcXVlc3RJZChyLmRpc2Nvbm5lY3QuYmluZChyKSksbWV0cmljczpyLm1ldHJpY3M/LmJpbmQocikscXVlcnk6dGhpcy53aXRoUmVxdWVzdElkKHIucXVlcnkuYmluZChyKSkscm9sbGJhY2tUcmFuc2FjdGlvbjp0aGlzLndpdGhSZXF1ZXN0SWQoci5yb2xsYmFja1RyYW5zYWN0aW9uLmJpbmQocikpLHNkbFNjaGVtYTpyLnNkbFNjaGVtYT8uYmluZChyKSxzdGFydFRyYW5zYWN0aW9uOnRoaXMud2l0aFJlcXVlc3RJZChyLnN0YXJ0VHJhbnNhY3Rpb24uYmluZChyKSksdHJhY2U6ci50cmFjZS5iaW5kKHIpLGZyZWU6ci5mcmVlPy5iaW5kKHIpfX13aXRoUmVxdWVzdElkKHIpe3JldHVybiBhc3luYyguLi50KT0+e2xldCBuPVBmKCkudG9TdHJpbmcoKTt0cnl7cmV0dXJuIGF3YWl0IHIoLi4udCxuKX1maW5hbGx5e2lmKHRoaXMudHJhY2luZ0hlbHBlci5pc0VuYWJsZWQoKSl7bGV0IGk9YXdhaXQgdGhpcy5lbmdpbmU/LnRyYWNlKG4pO2lmKGkpe2xldCBvPUpTT04ucGFyc2UoaSk7dGhpcy50cmFjaW5nSGVscGVyLmRpc3BhdGNoRW5naW5lU3BhbnMoby5zcGFucyl9fX19fWFzeW5jIGFwcGx5UGVuZGluZ01pZ3JhdGlvbnMoKXt0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY2FsbCB0aGlzIG1ldGhvZCBmcm9tIHRoaXMgdHlwZSBvZiBlbmdpbmUgaW5zdGFuY2VcIil9YXN5bmMgdHJhbnNhY3Rpb24ocix0LG4pe2F3YWl0IHRoaXMuc3RhcnQoKTtsZXQgaT1hd2FpdCB0aGlzLmFkYXB0ZXJQcm9taXNlLG89SlNPTi5zdHJpbmdpZnkodCkscztpZihyPT09XCJzdGFydFwiKXtsZXQgbD1KU09OLnN0cmluZ2lmeSh7bWF4X3dhaXQ6bi5tYXhXYWl0LHRpbWVvdXQ6bi50aW1lb3V0LGlzb2xhdGlvbl9sZXZlbDpuLmlzb2xhdGlvbkxldmVsfSk7cz1hd2FpdCB0aGlzLmVuZ2luZT8uc3RhcnRUcmFuc2FjdGlvbihsLG8pfWVsc2Ugcj09PVwiY29tbWl0XCI/cz1hd2FpdCB0aGlzLmVuZ2luZT8uY29tbWl0VHJhbnNhY3Rpb24obi5pZCxvKTpyPT09XCJyb2xsYmFja1wiJiYocz1hd2FpdCB0aGlzLmVuZ2luZT8ucm9sbGJhY2tUcmFuc2FjdGlvbihuLmlkLG8pKTtsZXQgYT10aGlzLnBhcnNlRW5naW5lUmVzcG9uc2Uocyk7aWYoVGYoYSkpe2xldCBsPXRoaXMuZ2V0RXh0ZXJuYWxBZGFwdGVyRXJyb3IoYSxpPy5lcnJvclJlZ2lzdHJ5KTt0aHJvdyBsP2wuZXJyb3I6bmV3IHooYS5tZXNzYWdlLHtjb2RlOmEuZXJyb3JfY29kZSxjbGllbnRWZXJzaW9uOnRoaXMuY29uZmlnLmNsaWVudFZlcnNpb24sbWV0YTphLm1ldGF9KX1lbHNlIGlmKHR5cGVvZiBhLm1lc3NhZ2U9PVwic3RyaW5nXCIpdGhyb3cgbmV3IGooYS5tZXNzYWdlLHtjbGllbnRWZXJzaW9uOnRoaXMuY29uZmlnLmNsaWVudFZlcnNpb259KTtyZXR1cm4gYX1hc3luYyBpbnN0YW50aWF0ZUxpYnJhcnkoKXtpZihBZShcImludGVybmFsU2V0dXBcIiksdGhpcy5saWJyYXJ5SW5zdGFudGlhdGlvblByb21pc2UpcmV0dXJuIHRoaXMubGlicmFyeUluc3RhbnRpYXRpb25Qcm9taXNlO2xpKCksdGhpcy5iaW5hcnlUYXJnZXQ9YXdhaXQgdGhpcy5nZXRDdXJyZW50QmluYXJ5VGFyZ2V0KCksYXdhaXQgdGhpcy50cmFjaW5nSGVscGVyLnJ1bkluQ2hpbGRTcGFuKFwibG9hZF9lbmdpbmVcIiwoKT0+dGhpcy5sb2FkRW5naW5lKCkpLHRoaXMudmVyc2lvbigpfWFzeW5jIGdldEN1cnJlbnRCaW5hcnlUYXJnZXQoKXt7aWYodGhpcy5iaW5hcnlUYXJnZXQpcmV0dXJuIHRoaXMuYmluYXJ5VGFyZ2V0O2xldCByPWF3YWl0IHRoaXMudHJhY2luZ0hlbHBlci5ydW5JbkNoaWxkU3BhbihcImRldGVjdF9wbGF0Zm9ybVwiLCgpPT5pcigpKTtpZighcWwuaW5jbHVkZXMocikpdGhyb3cgbmV3IFQoYFVua25vd24gJHtjZShcIlBSSVNNQV9RVUVSWV9FTkdJTkVfTElCUkFSWVwiKX0gJHtjZShXKHIpKX0uIFBvc3NpYmxlIGJpbmFyeVRhcmdldHM6ICR7cWUocWwuam9pbihcIiwgXCIpKX0gb3IgYSBwYXRoIHRvIHRoZSBxdWVyeSBlbmdpbmUgbGlicmFyeS5cbllvdSBtYXkgaGF2ZSB0byBydW4gJHtxZShcInByaXNtYSBnZW5lcmF0ZVwiKX0gZm9yIHlvdXIgY2hhbmdlcyB0byB0YWtlIGVmZmVjdC5gLHRoaXMuY29uZmlnLmNsaWVudFZlcnNpb24pO3JldHVybiByfX1wYXJzZUVuZ2luZVJlc3BvbnNlKHIpe2lmKCFyKXRocm93IG5ldyBqKFwiUmVzcG9uc2UgZnJvbSB0aGUgRW5naW5lIHdhcyBlbXB0eVwiLHtjbGllbnRWZXJzaW9uOnRoaXMuY29uZmlnLmNsaWVudFZlcnNpb259KTt0cnl7cmV0dXJuIEpTT04ucGFyc2Uocil9Y2F0Y2h7dGhyb3cgbmV3IGooXCJVbmFibGUgdG8gSlNPTi5wYXJzZSByZXNwb25zZSBmcm9tIGVuZ2luZVwiLHtjbGllbnRWZXJzaW9uOnRoaXMuY29uZmlnLmNsaWVudFZlcnNpb259KX19YXN5bmMgbG9hZEVuZ2luZSgpe2lmKCF0aGlzLmVuZ2luZSl7dGhpcy5RdWVyeUVuZ2luZUNvbnN0cnVjdG9yfHwodGhpcy5saWJyYXJ5PWF3YWl0IHRoaXMubGlicmFyeUxvYWRlci5sb2FkTGlicmFyeSh0aGlzLmNvbmZpZyksdGhpcy5RdWVyeUVuZ2luZUNvbnN0cnVjdG9yPXRoaXMubGlicmFyeS5RdWVyeUVuZ2luZSk7dHJ5e2xldCByPW5ldyBXZWFrUmVmKHRoaXMpO3RoaXMuYWRhcHRlclByb21pc2V8fCh0aGlzLmFkYXB0ZXJQcm9taXNlPXRoaXMuY29uZmlnLmFkYXB0ZXI/LmNvbm5lY3QoKT8udGhlbih0bikpO2xldCB0PWF3YWl0IHRoaXMuYWRhcHRlclByb21pc2U7dCYmQWUoXCJVc2luZyBkcml2ZXIgYWRhcHRlcjogJU9cIix0KSx0aGlzLmVuZ2luZT10aGlzLndyYXBFbmdpbmUobmV3IHRoaXMuUXVlcnlFbmdpbmVDb25zdHJ1Y3Rvcih7ZGF0YW1vZGVsOnRoaXMuZGF0YW1vZGVsLGVudjpwcm9jZXNzLmVudixsb2dRdWVyaWVzOnRoaXMuY29uZmlnLmxvZ1F1ZXJpZXM/PyExLGlnbm9yZUVudlZhckVycm9yczohMCxkYXRhc291cmNlT3ZlcnJpZGVzOnRoaXMuZGF0YXNvdXJjZU92ZXJyaWRlcz8/e30sbG9nTGV2ZWw6dGhpcy5sb2dMZXZlbCxjb25maWdEaXI6dGhpcy5jb25maWcuY3dkLGVuZ2luZVByb3RvY29sOlwianNvblwiLGVuYWJsZVRyYWNpbmc6dGhpcy50cmFjaW5nSGVscGVyLmlzRW5hYmxlZCgpfSxuPT57ci5kZXJlZigpPy5sb2dnZXIobil9LHQpKX1jYXRjaChyKXtsZXQgdD1yLG49dGhpcy5wYXJzZUluaXRFcnJvcih0Lm1lc3NhZ2UpO3Rocm93IHR5cGVvZiBuPT1cInN0cmluZ1wiP3Q6bmV3IFQobi5tZXNzYWdlLHRoaXMuY29uZmlnLmNsaWVudFZlcnNpb24sbi5lcnJvcl9jb2RlKX19fWxvZ2dlcihyKXtsZXQgdD10aGlzLnBhcnNlRW5naW5lUmVzcG9uc2Uocik7dCYmKHQubGV2ZWw9dD8ubGV2ZWwudG9Mb3dlckNhc2UoKT8/XCJ1bmtub3duXCIsd2YodCk/dGhpcy5sb2dFbWl0dGVyLmVtaXQoXCJxdWVyeVwiLHt0aW1lc3RhbXA6bmV3IERhdGUscXVlcnk6dC5xdWVyeSxwYXJhbXM6dC5wYXJhbXMsZHVyYXRpb246TnVtYmVyKHQuZHVyYXRpb25fbXMpLHRhcmdldDp0Lm1vZHVsZV9wYXRofSk6eGYodCk/dGhpcy5sb2dnZXJSdXN0UGFuaWM9bmV3IGxlKFNvKHRoaXMsYCR7dC5tZXNzYWdlfTogJHt0LnJlYXNvbn0gaW4gJHt0LmZpbGV9OiR7dC5saW5lfToke3QuY29sdW1ufWApLHRoaXMuY29uZmlnLmNsaWVudFZlcnNpb24pOnRoaXMubG9nRW1pdHRlci5lbWl0KHQubGV2ZWwse3RpbWVzdGFtcDpuZXcgRGF0ZSxtZXNzYWdlOnQubWVzc2FnZSx0YXJnZXQ6dC5tb2R1bGVfcGF0aH0pKX1wYXJzZUluaXRFcnJvcihyKXt0cnl7cmV0dXJuIEpTT04ucGFyc2Uocil9Y2F0Y2h7fXJldHVybiByfXBhcnNlUmVxdWVzdEVycm9yKHIpe3RyeXtyZXR1cm4gSlNPTi5wYXJzZShyKX1jYXRjaHt9cmV0dXJuIHJ9b25CZWZvcmVFeGl0KCl7dGhyb3cgbmV3IEVycm9yKCdcImJlZm9yZUV4aXRcIiBob29rIGlzIG5vdCBhcHBsaWNhYmxlIHRvIHRoZSBsaWJyYXJ5IGVuZ2luZSBzaW5jZSBQcmlzbWEgNS4wLjAsIGl0IGlzIG9ubHkgcmVsZXZhbnQgYW5kIGltcGxlbWVudGVkIGZvciB0aGUgYmluYXJ5IGVuZ2luZS4gUGxlYXNlIGFkZCB5b3VyIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBgcHJvY2Vzc2Agb2JqZWN0IGRpcmVjdGx5IGluc3RlYWQuJyl9YXN5bmMgc3RhcnQoKXtpZih0aGlzLmxpYnJhcnlJbnN0YW50aWF0aW9uUHJvbWlzZXx8KHRoaXMubGlicmFyeUluc3RhbnRpYXRpb25Qcm9taXNlPXRoaXMuaW5zdGFudGlhdGVMaWJyYXJ5KCkpLGF3YWl0IHRoaXMubGlicmFyeUluc3RhbnRpYXRpb25Qcm9taXNlLGF3YWl0IHRoaXMubGlicmFyeVN0b3BwaW5nUHJvbWlzZSx0aGlzLmxpYnJhcnlTdGFydGluZ1Byb21pc2UpcmV0dXJuIEFlKGBsaWJyYXJ5IGFscmVhZHkgc3RhcnRpbmcsIHRoaXMubGlicmFyeVN0YXJ0ZWQ6ICR7dGhpcy5saWJyYXJ5U3RhcnRlZH1gKSx0aGlzLmxpYnJhcnlTdGFydGluZ1Byb21pc2U7aWYodGhpcy5saWJyYXJ5U3RhcnRlZClyZXR1cm47bGV0IHI9YXN5bmMoKT0+e0FlKFwibGlicmFyeSBzdGFydGluZ1wiKTt0cnl7bGV0IHQ9e3RyYWNlcGFyZW50OnRoaXMudHJhY2luZ0hlbHBlci5nZXRUcmFjZVBhcmVudCgpfTthd2FpdCB0aGlzLmVuZ2luZT8uY29ubmVjdChKU09OLnN0cmluZ2lmeSh0KSksdGhpcy5saWJyYXJ5U3RhcnRlZD0hMCx0aGlzLmFkYXB0ZXJQcm9taXNlfHwodGhpcy5hZGFwdGVyUHJvbWlzZT10aGlzLmNvbmZpZy5hZGFwdGVyPy5jb25uZWN0KCk/LnRoZW4odG4pKSxhd2FpdCB0aGlzLmFkYXB0ZXJQcm9taXNlLEFlKFwibGlicmFyeSBzdGFydGVkXCIpfWNhdGNoKHQpe2xldCBuPXRoaXMucGFyc2VJbml0RXJyb3IodC5tZXNzYWdlKTt0aHJvdyB0eXBlb2Ygbj09XCJzdHJpbmdcIj90Om5ldyBUKG4ubWVzc2FnZSx0aGlzLmNvbmZpZy5jbGllbnRWZXJzaW9uLG4uZXJyb3JfY29kZSl9ZmluYWxseXt0aGlzLmxpYnJhcnlTdGFydGluZ1Byb21pc2U9dm9pZCAwfX07cmV0dXJuIHRoaXMubGlicmFyeVN0YXJ0aW5nUHJvbWlzZT10aGlzLnRyYWNpbmdIZWxwZXIucnVuSW5DaGlsZFNwYW4oXCJjb25uZWN0XCIsciksdGhpcy5saWJyYXJ5U3RhcnRpbmdQcm9taXNlfWFzeW5jIHN0b3AoKXtpZihhd2FpdCB0aGlzLmxpYnJhcnlJbnN0YW50aWF0aW9uUHJvbWlzZSxhd2FpdCB0aGlzLmxpYnJhcnlTdGFydGluZ1Byb21pc2UsYXdhaXQgdGhpcy5leGVjdXRpbmdRdWVyeVByb21pc2UsdGhpcy5saWJyYXJ5U3RvcHBpbmdQcm9taXNlKXJldHVybiBBZShcImxpYnJhcnkgaXMgYWxyZWFkeSBzdG9wcGluZ1wiKSx0aGlzLmxpYnJhcnlTdG9wcGluZ1Byb21pc2U7aWYoIXRoaXMubGlicmFyeVN0YXJ0ZWQpe2F3YWl0KGF3YWl0IHRoaXMuYWRhcHRlclByb21pc2UpPy5kaXNwb3NlKCksdGhpcy5hZGFwdGVyUHJvbWlzZT12b2lkIDA7cmV0dXJufWxldCByPWFzeW5jKCk9Pnthd2FpdCBuZXcgUHJvbWlzZShuPT5zZXRJbW1lZGlhdGUobikpLEFlKFwibGlicmFyeSBzdG9wcGluZ1wiKTtsZXQgdD17dHJhY2VwYXJlbnQ6dGhpcy50cmFjaW5nSGVscGVyLmdldFRyYWNlUGFyZW50KCl9O2F3YWl0IHRoaXMuZW5naW5lPy5kaXNjb25uZWN0KEpTT04uc3RyaW5naWZ5KHQpKSx0aGlzLmVuZ2luZT8uZnJlZSYmdGhpcy5lbmdpbmUuZnJlZSgpLHRoaXMuZW5naW5lPXZvaWQgMCx0aGlzLmxpYnJhcnlTdGFydGVkPSExLHRoaXMubGlicmFyeVN0b3BwaW5nUHJvbWlzZT12b2lkIDAsdGhpcy5saWJyYXJ5SW5zdGFudGlhdGlvblByb21pc2U9dm9pZCAwLGF3YWl0KGF3YWl0IHRoaXMuYWRhcHRlclByb21pc2UpPy5kaXNwb3NlKCksdGhpcy5hZGFwdGVyUHJvbWlzZT12b2lkIDAsQWUoXCJsaWJyYXJ5IHN0b3BwZWRcIil9O3JldHVybiB0aGlzLmxpYnJhcnlTdG9wcGluZ1Byb21pc2U9dGhpcy50cmFjaW5nSGVscGVyLnJ1bkluQ2hpbGRTcGFuKFwiZGlzY29ubmVjdFwiLHIpLHRoaXMubGlicmFyeVN0b3BwaW5nUHJvbWlzZX12ZXJzaW9uKCl7cmV0dXJuIHRoaXMudmVyc2lvbkluZm89dGhpcy5saWJyYXJ5Py52ZXJzaW9uKCksdGhpcy52ZXJzaW9uSW5mbz8udmVyc2lvbj8/XCJ1bmtub3duXCJ9ZGVidWdQYW5pYyhyKXtyZXR1cm4gdGhpcy5saWJyYXJ5Py5kZWJ1Z1BhbmljKHIpfWFzeW5jIHJlcXVlc3Qocix7dHJhY2VwYXJlbnQ6dCxpbnRlcmFjdGl2ZVRyYW5zYWN0aW9uOm59KXtBZShgc2VuZGluZyByZXF1ZXN0LCB0aGlzLmxpYnJhcnlTdGFydGVkOiAke3RoaXMubGlicmFyeVN0YXJ0ZWR9YCk7bGV0IGk9SlNPTi5zdHJpbmdpZnkoe3RyYWNlcGFyZW50OnR9KSxvPUpTT04uc3RyaW5naWZ5KHIpO3RyeXthd2FpdCB0aGlzLnN0YXJ0KCk7bGV0IHM9YXdhaXQgdGhpcy5hZGFwdGVyUHJvbWlzZTt0aGlzLmV4ZWN1dGluZ1F1ZXJ5UHJvbWlzZT10aGlzLmVuZ2luZT8ucXVlcnkobyxpLG4/LmlkKSx0aGlzLmxhc3RRdWVyeT1vO2xldCBhPXRoaXMucGFyc2VFbmdpbmVSZXNwb25zZShhd2FpdCB0aGlzLmV4ZWN1dGluZ1F1ZXJ5UHJvbWlzZSk7aWYoYS5lcnJvcnMpdGhyb3cgYS5lcnJvcnMubGVuZ3RoPT09MT90aGlzLmJ1aWxkUXVlcnlFcnJvcihhLmVycm9yc1swXSxzPy5lcnJvclJlZ2lzdHJ5KTpuZXcgaihKU09OLnN0cmluZ2lmeShhLmVycm9ycykse2NsaWVudFZlcnNpb246dGhpcy5jb25maWcuY2xpZW50VmVyc2lvbn0pO2lmKHRoaXMubG9nZ2VyUnVzdFBhbmljKXRocm93IHRoaXMubG9nZ2VyUnVzdFBhbmljO3JldHVybntkYXRhOmF9fWNhdGNoKHMpe2lmKHMgaW5zdGFuY2VvZiBUKXRocm93IHM7aWYocy5jb2RlPT09XCJHZW5lcmljRmFpbHVyZVwiJiZzLm1lc3NhZ2U/LnN0YXJ0c1dpdGgoXCJQQU5JQzpcIikpdGhyb3cgbmV3IGxlKFNvKHRoaXMscy5tZXNzYWdlKSx0aGlzLmNvbmZpZy5jbGllbnRWZXJzaW9uKTtsZXQgYT10aGlzLnBhcnNlUmVxdWVzdEVycm9yKHMubWVzc2FnZSk7dGhyb3cgdHlwZW9mIGE9PVwic3RyaW5nXCI/czpuZXcgaihgJHthLm1lc3NhZ2V9XG4ke2EuYmFja3RyYWNlfWAse2NsaWVudFZlcnNpb246dGhpcy5jb25maWcuY2xpZW50VmVyc2lvbn0pfX1hc3luYyByZXF1ZXN0QmF0Y2gocix7dHJhbnNhY3Rpb246dCx0cmFjZXBhcmVudDpufSl7QWUoXCJyZXF1ZXN0QmF0Y2hcIik7bGV0IGk9JHIocix0KTthd2FpdCB0aGlzLnN0YXJ0KCk7bGV0IG89YXdhaXQgdGhpcy5hZGFwdGVyUHJvbWlzZTt0aGlzLmxhc3RRdWVyeT1KU09OLnN0cmluZ2lmeShpKSx0aGlzLmV4ZWN1dGluZ1F1ZXJ5UHJvbWlzZT10aGlzLmVuZ2luZT8ucXVlcnkodGhpcy5sYXN0UXVlcnksSlNPTi5zdHJpbmdpZnkoe3RyYWNlcGFyZW50Om59KSxMbCh0KSk7bGV0IHM9YXdhaXQgdGhpcy5leGVjdXRpbmdRdWVyeVByb21pc2UsYT10aGlzLnBhcnNlRW5naW5lUmVzcG9uc2Uocyk7aWYoYS5lcnJvcnMpdGhyb3cgYS5lcnJvcnMubGVuZ3RoPT09MT90aGlzLmJ1aWxkUXVlcnlFcnJvcihhLmVycm9yc1swXSxvPy5lcnJvclJlZ2lzdHJ5KTpuZXcgaihKU09OLnN0cmluZ2lmeShhLmVycm9ycykse2NsaWVudFZlcnNpb246dGhpcy5jb25maWcuY2xpZW50VmVyc2lvbn0pO2xldHtiYXRjaFJlc3VsdDpsLGVycm9yczp1fT1hO2lmKEFycmF5LmlzQXJyYXkobCkpcmV0dXJuIGwubWFwKGM9PmMuZXJyb3JzJiZjLmVycm9ycy5sZW5ndGg+MD90aGlzLmxvZ2dlclJ1c3RQYW5pYz8/dGhpcy5idWlsZFF1ZXJ5RXJyb3IoYy5lcnJvcnNbMF0sbz8uZXJyb3JSZWdpc3RyeSk6e2RhdGE6Y30pO3Rocm93IHUmJnUubGVuZ3RoPT09MT9uZXcgRXJyb3IodVswXS5lcnJvcik6bmV3IEVycm9yKEpTT04uc3RyaW5naWZ5KGEpKX1idWlsZFF1ZXJ5RXJyb3Iocix0KXtpZihyLnVzZXJfZmFjaW5nX2Vycm9yLmlzX3BhbmljKXJldHVybiBuZXcgbGUoU28odGhpcyxyLnVzZXJfZmFjaW5nX2Vycm9yLm1lc3NhZ2UpLHRoaXMuY29uZmlnLmNsaWVudFZlcnNpb24pO2xldCBuPXRoaXMuZ2V0RXh0ZXJuYWxBZGFwdGVyRXJyb3Ioci51c2VyX2ZhY2luZ19lcnJvcix0KTtyZXR1cm4gbj9uLmVycm9yOnFyKHIsdGhpcy5jb25maWcuY2xpZW50VmVyc2lvbix0aGlzLmNvbmZpZy5hY3RpdmVQcm92aWRlcil9Z2V0RXh0ZXJuYWxBZGFwdGVyRXJyb3Iocix0KXtpZihyLmVycm9yX2NvZGU9PT1FZiYmdCl7bGV0IG49ci5tZXRhPy5pZDtsbih0eXBlb2Ygbj09XCJudW1iZXJcIixcIk1hbGZvcm1lZCBleHRlcm5hbCBKUyBlcnJvciByZWNlaXZlZCBmcm9tIHRoZSBlbmdpbmVcIik7bGV0IGk9dC5jb25zdW1lRXJyb3Iobik7cmV0dXJuIGxuKGksXCJFeHRlcm5hbCBlcnJvciB3aXRoIHJlcG9ydGVkIGlkIHdhcyBub3QgcmVnaXN0ZXJlZFwiKSxpfX1hc3luYyBtZXRyaWNzKHIpe2F3YWl0IHRoaXMuc3RhcnQoKTtsZXQgdD1hd2FpdCB0aGlzLmVuZ2luZS5tZXRyaWNzKEpTT04uc3RyaW5naWZ5KHIpKTtyZXR1cm4gci5mb3JtYXQ9PT1cInByb21ldGhldXNcIj90OnRoaXMucGFyc2VFbmdpbmVSZXNwb25zZSh0KX19O2Z1bmN0aW9uIFRmKGUpe3JldHVybiB0eXBlb2YgZT09XCJvYmplY3RcIiYmZSE9PW51bGwmJmUuZXJyb3JfY29kZSE9PXZvaWQgMH1mdW5jdGlvbiBTbyhlLHIpe3JldHVybiBUbCh7YmluYXJ5VGFyZ2V0OmUuYmluYXJ5VGFyZ2V0LHRpdGxlOnIsdmVyc2lvbjplLmNvbmZpZy5jbGllbnRWZXJzaW9uLGVuZ2luZVZlcnNpb246ZS52ZXJzaW9uSW5mbz8uY29tbWl0LGRhdGFiYXNlOmUuY29uZmlnLmFjdGl2ZVByb3ZpZGVyLHF1ZXJ5OmUubGFzdFF1ZXJ5fSl9ZnVuY3Rpb24gamwoe3VybDplLGFkYXB0ZXI6cixjb3B5RW5naW5lOnQsdGFyZ2V0QnVpbGRUeXBlOm59KXtsZXQgaT1bXSxvPVtdLHM9Zz0+e2kucHVzaCh7X3RhZzpcIndhcm5pbmdcIix2YWx1ZTpnfSl9LGE9Zz0+e2xldCBTPWcuam9pbihgXG5gKTtvLnB1c2goe190YWc6XCJlcnJvclwiLHZhbHVlOlN9KX0sbD0hIWU/LnN0YXJ0c1dpdGgoXCJwcmlzbWE6Ly9cIiksdT1hbihlKSxjPSEhcixwPWx8fHU7IWMmJnQmJnAmJnMoW1wicmVjb21tZW5kLS1uby1lbmdpbmVcIixcIkluIHByb2R1Y3Rpb24sIHdlIHJlY29tbWVuZCB1c2luZyBgcHJpc21hIGdlbmVyYXRlIC0tbm8tZW5naW5lYCAoU2VlOiBgcHJpc21hIGdlbmVyYXRlIC0taGVscGApXCJdKTtsZXQgZD1wfHwhdDtjJiYoZHx8bj09PVwiZWRnZVwiKSYmKG49PT1cImVkZ2VcIj9hKFtcIlByaXNtYSBDbGllbnQgd2FzIGNvbmZpZ3VyZWQgdG8gdXNlIHRoZSBgYWRhcHRlcmAgb3B0aW9uIGJ1dCBpdCB3YXMgaW1wb3J0ZWQgdmlhIGl0cyBgL2VkZ2VgIGVuZHBvaW50LlwiLFwiUGxlYXNlIGVpdGhlciByZW1vdmUgdGhlIGAvZWRnZWAgZW5kcG9pbnQgb3IgcmVtb3ZlIHRoZSBgYWRhcHRlcmAgZnJvbSB0aGUgUHJpc21hIENsaWVudCBjb25zdHJ1Y3Rvci5cIl0pOnQ/bCYmYShbXCJQcmlzbWEgQ2xpZW50IHdhcyBjb25maWd1cmVkIHRvIHVzZSB0aGUgYGFkYXB0ZXJgIG9wdGlvbiBidXQgdGhlIFVSTCB3YXMgYSBgcHJpc21hOi8vYCBVUkwuXCIsXCJQbGVhc2UgZWl0aGVyIHVzZSB0aGUgYHByaXNtYTovL2AgVVJMIG9yIHJlbW92ZSB0aGUgYGFkYXB0ZXJgIGZyb20gdGhlIFByaXNtYSBDbGllbnQgY29uc3RydWN0b3IuXCJdKTphKFtcIlByaXNtYSBDbGllbnQgd2FzIGNvbmZpZ3VyZWQgdG8gdXNlIHRoZSBgYWRhcHRlcmAgb3B0aW9uIGJ1dCBgcHJpc21hIGdlbmVyYXRlYCB3YXMgcnVuIHdpdGggYC0tbm8tZW5naW5lYC5cIixcIlBsZWFzZSBydW4gYHByaXNtYSBnZW5lcmF0ZWAgd2l0aG91dCBgLS1uby1lbmdpbmVgIHRvIGJlIGFibGUgdG8gdXNlIFByaXNtYSBDbGllbnQgd2l0aCB0aGUgYWRhcHRlci5cIl0pKTtsZXQgZj17YWNjZWxlcmF0ZTpkLHBwZzp1LGRyaXZlckFkYXB0ZXJzOmN9O2Z1bmN0aW9uIGgoZyl7cmV0dXJuIGcubGVuZ3RoPjB9cmV0dXJuIGgobyk/e29rOiExLGRpYWdub3N0aWNzOnt3YXJuaW5nczppLGVycm9yczpvfSxpc1VzaW5nOmZ9OntvazohMCxkaWFnbm9zdGljczp7d2FybmluZ3M6aX0saXNVc2luZzpmfX1mdW5jdGlvbiBWbCh7Y29weUVuZ2luZTplPSEwfSxyKXtsZXQgdDt0cnl7dD1Wcih7aW5saW5lRGF0YXNvdXJjZXM6ci5pbmxpbmVEYXRhc291cmNlcyxvdmVycmlkZURhdGFzb3VyY2VzOnIub3ZlcnJpZGVEYXRhc291cmNlcyxlbnY6ey4uLnIuZW52LC4uLnByb2Nlc3MuZW52fSxjbGllbnRWZXJzaW9uOnIuY2xpZW50VmVyc2lvbn0pfWNhdGNoe31sZXR7b2s6bixpc1VzaW5nOmksZGlhZ25vc3RpY3M6b309amwoe3VybDp0LGFkYXB0ZXI6ci5hZGFwdGVyLGNvcHlFbmdpbmU6ZSx0YXJnZXRCdWlsZFR5cGU6XCJsaWJyYXJ5XCJ9KTtmb3IobGV0IHAgb2Ygby53YXJuaW5ncylhdCguLi5wLnZhbHVlKTtpZighbil7bGV0IHA9by5lcnJvcnNbMF07dGhyb3cgbmV3IFoocC52YWx1ZSx7Y2xpZW50VmVyc2lvbjpyLmNsaWVudFZlcnNpb259KX1sZXQgcz1FcihyLmdlbmVyYXRvciksYT1zPT09XCJsaWJyYXJ5XCIsbD1zPT09XCJiaW5hcnlcIix1PXM9PT1cImNsaWVudFwiLGM9KGkuYWNjZWxlcmF0ZXx8aS5wcGcpJiYhaS5kcml2ZXJBZGFwdGVycztyZXR1cm4gaS5hY2NlbGVyYXRlP25ldyBxdChyKTooaS5kcml2ZXJBZGFwdGVycyxhP25ldyBRcihyKTooaS5hY2NlbGVyYXRlLG5ldyBRcihyKSkpfWZ1bmN0aW9uIFluKHtnZW5lcmF0b3I6ZX0pe3JldHVybiBlPy5wcmV2aWV3RmVhdHVyZXM/P1tdfXZhciBCbD1lPT4oe2NvbW1hbmQ6ZX0pO3ZhciBVbD1lPT5lLnN0cmluZ3MucmVkdWNlKChyLHQsbik9PmAke3J9QFAke259JHt0fWApO2Z1bmN0aW9uIFdyKGUpe3RyeXtyZXR1cm4gR2woZSxcImZhc3RcIil9Y2F0Y2h7cmV0dXJuIEdsKGUsXCJzbG93XCIpfX1mdW5jdGlvbiBHbChlLHIpe3JldHVybiBKU09OLnN0cmluZ2lmeShlLm1hcCh0PT5XbCh0LHIpKSl9ZnVuY3Rpb24gV2woZSxyKXtpZihBcnJheS5pc0FycmF5KGUpKXJldHVybiBlLm1hcCh0PT5XbCh0LHIpKTtpZih0eXBlb2YgZT09XCJiaWdpbnRcIilyZXR1cm57cHJpc21hX190eXBlOlwiYmlnaW50XCIscHJpc21hX192YWx1ZTplLnRvU3RyaW5nKCl9O2lmKFNyKGUpKXJldHVybntwcmlzbWFfX3R5cGU6XCJkYXRlXCIscHJpc21hX192YWx1ZTplLnRvSlNPTigpfTtpZih2ZS5pc0RlY2ltYWwoZSkpcmV0dXJue3ByaXNtYV9fdHlwZTpcImRlY2ltYWxcIixwcmlzbWFfX3ZhbHVlOmUudG9KU09OKCl9O2lmKEJ1ZmZlci5pc0J1ZmZlcihlKSlyZXR1cm57cHJpc21hX190eXBlOlwiYnl0ZXNcIixwcmlzbWFfX3ZhbHVlOmUudG9TdHJpbmcoXCJiYXNlNjRcIil9O2lmKFNmKGUpKXJldHVybntwcmlzbWFfX3R5cGU6XCJieXRlc1wiLHByaXNtYV9fdmFsdWU6QnVmZmVyLmZyb20oZSkudG9TdHJpbmcoXCJiYXNlNjRcIil9O2lmKEFycmF5QnVmZmVyLmlzVmlldyhlKSl7bGV0e2J1ZmZlcjp0LGJ5dGVPZmZzZXQ6bixieXRlTGVuZ3RoOml9PWU7cmV0dXJue3ByaXNtYV9fdHlwZTpcImJ5dGVzXCIscHJpc21hX192YWx1ZTpCdWZmZXIuZnJvbSh0LG4saSkudG9TdHJpbmcoXCJiYXNlNjRcIil9fXJldHVybiB0eXBlb2YgZT09XCJvYmplY3RcIiYmcj09PVwic2xvd1wiP0psKGUpOmV9ZnVuY3Rpb24gU2YoZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcnx8ZSBpbnN0YW5jZW9mIFNoYXJlZEFycmF5QnVmZmVyPyEwOnR5cGVvZiBlPT1cIm9iamVjdFwiJiZlIT09bnVsbD9lW1N5bWJvbC50b1N0cmluZ1RhZ109PT1cIkFycmF5QnVmZmVyXCJ8fGVbU3ltYm9sLnRvU3RyaW5nVGFnXT09PVwiU2hhcmVkQXJyYXlCdWZmZXJcIjohMX1mdW5jdGlvbiBKbChlKXtpZih0eXBlb2YgZSE9XCJvYmplY3RcInx8ZT09PW51bGwpcmV0dXJuIGU7aWYodHlwZW9mIGUudG9KU09OPT1cImZ1bmN0aW9uXCIpcmV0dXJuIGUudG9KU09OKCk7aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gZS5tYXAoUWwpO2xldCByPXt9O2ZvcihsZXQgdCBvZiBPYmplY3Qua2V5cyhlKSlyW3RdPVFsKGVbdF0pO3JldHVybiByfWZ1bmN0aW9uIFFsKGUpe3JldHVybiB0eXBlb2YgZT09XCJiaWdpbnRcIj9lLnRvU3RyaW5nKCk6SmwoZSl9dmFyIFJmPS9eKFxccyphbHRlclxccykvaSxIbD1OKFwicHJpc21hOmNsaWVudFwiKTtmdW5jdGlvbiBSbyhlLHIsdCxuKXtpZighKGUhPT1cInBvc3RncmVzcWxcIiYmZSE9PVwiY29ja3JvYWNoZGJcIikmJnQubGVuZ3RoPjAmJlJmLmV4ZWMocikpdGhyb3cgbmV3IEVycm9yKGBSdW5uaW5nIEFMVEVSIHVzaW5nICR7bn0gaXMgbm90IHN1cHBvcnRlZFxuVXNpbmcgdGhlIGV4YW1wbGUgYmVsb3cgeW91IGNhbiBzdGlsbCBleGVjdXRlIHlvdXIgcXVlcnkgd2l0aCBQcmlzbWEsIGJ1dCBwbGVhc2Ugbm90ZSB0aGF0IGl0IGlzIHZ1bG5lcmFibGUgdG8gU1FMIGluamVjdGlvbiBhdHRhY2tzIGFuZCByZXF1aXJlcyB5b3UgdG8gdGFrZSBjYXJlIG9mIGlucHV0IHNhbml0aXphdGlvbi5cblxuRXhhbXBsZTpcbiAgYXdhaXQgcHJpc21hLiRleGVjdXRlUmF3VW5zYWZlKFxcYEFMVEVSIFVTRVIgcHJpc21hIFdJVEggUEFTU1dPUkQgJ1xcJHtwYXNzd29yZH0nXFxgKVxuXG5Nb3JlIEluZm9ybWF0aW9uOiBodHRwczovL3ByaXMubHkvZC9leGVjdXRlLXJhd1xuYCl9dmFyIEFvPSh7Y2xpZW50TWV0aG9kOmUsYWN0aXZlUHJvdmlkZXI6cn0pPT50PT57bGV0IG49XCJcIixpO2lmKHFuKHQpKW49dC5zcWwsaT17dmFsdWVzOldyKHQudmFsdWVzKSxfX3ByaXNtYVJhd1BhcmFtZXRlcnNfXzohMH07ZWxzZSBpZihBcnJheS5pc0FycmF5KHQpKXtsZXRbbywuLi5zXT10O249byxpPXt2YWx1ZXM6V3Ioc3x8W10pLF9fcHJpc21hUmF3UGFyYW1ldGVyc19fOiEwfX1lbHNlIHN3aXRjaChyKXtjYXNlXCJzcWxpdGVcIjpjYXNlXCJteXNxbFwiOntuPXQuc3FsLGk9e3ZhbHVlczpXcih0LnZhbHVlcyksX19wcmlzbWFSYXdQYXJhbWV0ZXJzX186ITB9O2JyZWFrfWNhc2VcImNvY2tyb2FjaGRiXCI6Y2FzZVwicG9zdGdyZXNxbFwiOmNhc2VcInBvc3RncmVzXCI6e249dC50ZXh0LGk9e3ZhbHVlczpXcih0LnZhbHVlcyksX19wcmlzbWFSYXdQYXJhbWV0ZXJzX186ITB9O2JyZWFrfWNhc2VcInNxbHNlcnZlclwiOntuPVVsKHQpLGk9e3ZhbHVlczpXcih0LnZhbHVlcyksX19wcmlzbWFSYXdQYXJhbWV0ZXJzX186ITB9O2JyZWFrfWRlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKGBUaGUgJHtyfSBwcm92aWRlciBkb2VzIG5vdCBzdXBwb3J0ICR7ZX1gKX1yZXR1cm4gaT8udmFsdWVzP0hsKGBwcmlzbWEuJHtlfSgke259LCAke2kudmFsdWVzfSlgKTpIbChgcHJpc21hLiR7ZX0oJHtufSlgKSx7cXVlcnk6bixwYXJhbWV0ZXJzOml9fSxLbD17cmVxdWVzdEFyZ3NUb01pZGRsZXdhcmVBcmdzKGUpe3JldHVybltlLnN0cmluZ3MsLi4uZS52YWx1ZXNdfSxtaWRkbGV3YXJlQXJnc1RvUmVxdWVzdEFyZ3MoZSl7bGV0W3IsLi4udF09ZTtyZXR1cm4gbmV3IG9lKHIsdCl9fSxZbD17cmVxdWVzdEFyZ3NUb01pZGRsZXdhcmVBcmdzKGUpe3JldHVybltlXX0sbWlkZGxld2FyZUFyZ3NUb1JlcXVlc3RBcmdzKGUpe3JldHVybiBlWzBdfX07ZnVuY3Rpb24gQ28oZSl7cmV0dXJuIGZ1bmN0aW9uKHQsbil7bGV0IGksbz0ocz1lKT0+e3RyeXtyZXR1cm4gcz09PXZvaWQgMHx8cz8ua2luZD09PVwiaXR4XCI/aT8/PXpsKHQocykpOnpsKHQocykpfWNhdGNoKGEpe3JldHVybiBQcm9taXNlLnJlamVjdChhKX19O3JldHVybntnZXQgc3BlYygpe3JldHVybiBufSx0aGVuKHMsYSl7cmV0dXJuIG8oKS50aGVuKHMsYSl9LGNhdGNoKHMpe3JldHVybiBvKCkuY2F0Y2gocyl9LGZpbmFsbHkocyl7cmV0dXJuIG8oKS5maW5hbGx5KHMpfSxyZXF1ZXN0VHJhbnNhY3Rpb24ocyl7bGV0IGE9byhzKTtyZXR1cm4gYS5yZXF1ZXN0VHJhbnNhY3Rpb24/YS5yZXF1ZXN0VHJhbnNhY3Rpb24ocyk6YX0sW1N5bWJvbC50b1N0cmluZ1RhZ106XCJQcmlzbWFQcm9taXNlXCJ9fX1mdW5jdGlvbiB6bChlKXtyZXR1cm4gdHlwZW9mIGUudGhlbj09XCJmdW5jdGlvblwiP2U6UHJvbWlzZS5yZXNvbHZlKGUpfXZhciBBZj12aS5zcGxpdChcIi5cIilbMF0sQ2Y9e2lzRW5hYmxlZCgpe3JldHVybiExfSxnZXRUcmFjZVBhcmVudCgpe3JldHVyblwiMDAtMTAtMTAtMDBcIn0sZGlzcGF0Y2hFbmdpbmVTcGFucygpe30sZ2V0QWN0aXZlQ29udGV4dCgpe30scnVuSW5DaGlsZFNwYW4oZSxyKXtyZXR1cm4gcigpfX0sSW89Y2xhc3N7aXNFbmFibGVkKCl7cmV0dXJuIHRoaXMuZ2V0R2xvYmFsVHJhY2luZ0hlbHBlcigpLmlzRW5hYmxlZCgpfWdldFRyYWNlUGFyZW50KHIpe3JldHVybiB0aGlzLmdldEdsb2JhbFRyYWNpbmdIZWxwZXIoKS5nZXRUcmFjZVBhcmVudChyKX1kaXNwYXRjaEVuZ2luZVNwYW5zKHIpe3JldHVybiB0aGlzLmdldEdsb2JhbFRyYWNpbmdIZWxwZXIoKS5kaXNwYXRjaEVuZ2luZVNwYW5zKHIpfWdldEFjdGl2ZUNvbnRleHQoKXtyZXR1cm4gdGhpcy5nZXRHbG9iYWxUcmFjaW5nSGVscGVyKCkuZ2V0QWN0aXZlQ29udGV4dCgpfXJ1bkluQ2hpbGRTcGFuKHIsdCl7cmV0dXJuIHRoaXMuZ2V0R2xvYmFsVHJhY2luZ0hlbHBlcigpLnJ1bkluQ2hpbGRTcGFuKHIsdCl9Z2V0R2xvYmFsVHJhY2luZ0hlbHBlcigpe2xldCByPWdsb2JhbFRoaXNbYFYke0FmfV9QUklTTUFfSU5TVFJVTUVOVEFUSU9OYF0sdD1nbG9iYWxUaGlzLlBSSVNNQV9JTlNUUlVNRU5UQVRJT047cmV0dXJuIHI/LmhlbHBlcj8/dD8uaGVscGVyPz9DZn19O2Z1bmN0aW9uIFpsKCl7cmV0dXJuIG5ldyBJb31mdW5jdGlvbiBYbChlLHI9KCk9Pnt9KXtsZXQgdCxuPW5ldyBQcm9taXNlKGk9PnQ9aSk7cmV0dXJue3RoZW4oaSl7cmV0dXJuLS1lPT09MCYmdChyKCkpLGk/LihuKX19fWZ1bmN0aW9uIGV1KGUpe3JldHVybiB0eXBlb2YgZT09XCJzdHJpbmdcIj9lOmUucmVkdWNlKChyLHQpPT57bGV0IG49dHlwZW9mIHQ9PVwic3RyaW5nXCI/dDp0LmxldmVsO3JldHVybiBuPT09XCJxdWVyeVwiP3I6ciYmKHQ9PT1cImluZm9cInx8cj09PVwiaW5mb1wiKT9cImluZm9cIjpufSx2b2lkIDApfXZhciB6bj1jbGFzc3tfbWlkZGxld2FyZXM9W107dXNlKHIpe3RoaXMuX21pZGRsZXdhcmVzLnB1c2gocil9Z2V0KHIpe3JldHVybiB0aGlzLl9taWRkbGV3YXJlc1tyXX1oYXMocil7cmV0dXJuISF0aGlzLl9taWRkbGV3YXJlc1tyXX1sZW5ndGgoKXtyZXR1cm4gdGhpcy5fbWlkZGxld2FyZXMubGVuZ3RofX07dmFyIHR1PUMoTGkoKSk7ZnVuY3Rpb24gWm4oZSl7cmV0dXJuIHR5cGVvZiBlLmJhdGNoUmVxdWVzdElkeD09XCJudW1iZXJcIn1mdW5jdGlvbiBydShlKXtpZihlLmFjdGlvbiE9PVwiZmluZFVuaXF1ZVwiJiZlLmFjdGlvbiE9PVwiZmluZFVuaXF1ZU9yVGhyb3dcIilyZXR1cm47bGV0IHI9W107cmV0dXJuIGUubW9kZWxOYW1lJiZyLnB1c2goZS5tb2RlbE5hbWUpLGUucXVlcnkuYXJndW1lbnRzJiZyLnB1c2goa28oZS5xdWVyeS5hcmd1bWVudHMpKSxyLnB1c2goa28oZS5xdWVyeS5zZWxlY3Rpb24pKSxyLmpvaW4oXCJcIil9ZnVuY3Rpb24ga28oZSl7cmV0dXJuYCgke09iamVjdC5rZXlzKGUpLnNvcnQoKS5tYXAodD0+e2xldCBuPWVbdF07cmV0dXJuIHR5cGVvZiBuPT1cIm9iamVjdFwiJiZuIT09bnVsbD9gKCR7dH0gJHtrbyhuKX0pYDp0fSkuam9pbihcIiBcIil9KWB9dmFyIElmPXthZ2dyZWdhdGU6ITEsYWdncmVnYXRlUmF3OiExLGNyZWF0ZU1hbnk6ITAsY3JlYXRlTWFueUFuZFJldHVybjohMCxjcmVhdGVPbmU6ITAsZGVsZXRlTWFueTohMCxkZWxldGVPbmU6ITAsZXhlY3V0ZVJhdzohMCxmaW5kRmlyc3Q6ITEsZmluZEZpcnN0T3JUaHJvdzohMSxmaW5kTWFueTohMSxmaW5kUmF3OiExLGZpbmRVbmlxdWU6ITEsZmluZFVuaXF1ZU9yVGhyb3c6ITEsZ3JvdXBCeTohMSxxdWVyeVJhdzohMSxydW5Db21tYW5kUmF3OiEwLHVwZGF0ZU1hbnk6ITAsdXBkYXRlTWFueUFuZFJldHVybjohMCx1cGRhdGVPbmU6ITAsdXBzZXJ0T25lOiEwfTtmdW5jdGlvbiBEbyhlKXtyZXR1cm4gSWZbZV19dmFyIFhuPWNsYXNze2NvbnN0cnVjdG9yKHIpe3RoaXMub3B0aW9ucz1yO3RoaXMuYmF0Y2hlcz17fX1iYXRjaGVzO3RpY2tBY3RpdmU9ITE7cmVxdWVzdChyKXtsZXQgdD10aGlzLm9wdGlvbnMuYmF0Y2hCeShyKTtyZXR1cm4gdD8odGhpcy5iYXRjaGVzW3RdfHwodGhpcy5iYXRjaGVzW3RdPVtdLHRoaXMudGlja0FjdGl2ZXx8KHRoaXMudGlja0FjdGl2ZT0hMCxwcm9jZXNzLm5leHRUaWNrKCgpPT57dGhpcy5kaXNwYXRjaEJhdGNoZXMoKSx0aGlzLnRpY2tBY3RpdmU9ITF9KSkpLG5ldyBQcm9taXNlKChuLGkpPT57dGhpcy5iYXRjaGVzW3RdLnB1c2goe3JlcXVlc3Q6cixyZXNvbHZlOm4scmVqZWN0Oml9KX0pKTp0aGlzLm9wdGlvbnMuc2luZ2xlTG9hZGVyKHIpfWRpc3BhdGNoQmF0Y2hlcygpe2ZvcihsZXQgciBpbiB0aGlzLmJhdGNoZXMpe2xldCB0PXRoaXMuYmF0Y2hlc1tyXTtkZWxldGUgdGhpcy5iYXRjaGVzW3JdLHQubGVuZ3RoPT09MT90aGlzLm9wdGlvbnMuc2luZ2xlTG9hZGVyKHRbMF0ucmVxdWVzdCkudGhlbihuPT57biBpbnN0YW5jZW9mIEVycm9yP3RbMF0ucmVqZWN0KG4pOnRbMF0ucmVzb2x2ZShuKX0pLmNhdGNoKG49Pnt0WzBdLnJlamVjdChuKX0pOih0LnNvcnQoKG4saSk9PnRoaXMub3B0aW9ucy5iYXRjaE9yZGVyKG4ucmVxdWVzdCxpLnJlcXVlc3QpKSx0aGlzLm9wdGlvbnMuYmF0Y2hMb2FkZXIodC5tYXAobj0+bi5yZXF1ZXN0KSkudGhlbihuPT57aWYobiBpbnN0YW5jZW9mIEVycm9yKWZvcihsZXQgaT0wO2k8dC5sZW5ndGg7aSsrKXRbaV0ucmVqZWN0KG4pO2Vsc2UgZm9yKGxldCBpPTA7aTx0Lmxlbmd0aDtpKyspe2xldCBvPW5baV07byBpbnN0YW5jZW9mIEVycm9yP3RbaV0ucmVqZWN0KG8pOnRbaV0ucmVzb2x2ZShvKX19KS5jYXRjaChuPT57Zm9yKGxldCBpPTA7aTx0Lmxlbmd0aDtpKyspdFtpXS5yZWplY3Qobil9KSl9fWdldFtTeW1ib2wudG9TdHJpbmdUYWddKCl7cmV0dXJuXCJEYXRhTG9hZGVyXCJ9fTtmdW5jdGlvbiBtcihlLHIpe2lmKHI9PT1udWxsKXJldHVybiByO3N3aXRjaChlKXtjYXNlXCJiaWdpbnRcIjpyZXR1cm4gQmlnSW50KHIpO2Nhc2VcImJ5dGVzXCI6e2xldHtidWZmZXI6dCxieXRlT2Zmc2V0Om4sYnl0ZUxlbmd0aDppfT1CdWZmZXIuZnJvbShyLFwiYmFzZTY0XCIpO3JldHVybiBuZXcgVWludDhBcnJheSh0LG4saSl9Y2FzZVwiZGVjaW1hbFwiOnJldHVybiBuZXcgdmUocik7Y2FzZVwiZGF0ZXRpbWVcIjpjYXNlXCJkYXRlXCI6cmV0dXJuIG5ldyBEYXRlKHIpO2Nhc2VcInRpbWVcIjpyZXR1cm4gbmV3IERhdGUoYDE5NzAtMDEtMDFUJHtyfVpgKTtjYXNlXCJiaWdpbnQtYXJyYXlcIjpyZXR1cm4gci5tYXAodD0+bXIoXCJiaWdpbnRcIix0KSk7Y2FzZVwiYnl0ZXMtYXJyYXlcIjpyZXR1cm4gci5tYXAodD0+bXIoXCJieXRlc1wiLHQpKTtjYXNlXCJkZWNpbWFsLWFycmF5XCI6cmV0dXJuIHIubWFwKHQ9Pm1yKFwiZGVjaW1hbFwiLHQpKTtjYXNlXCJkYXRldGltZS1hcnJheVwiOnJldHVybiByLm1hcCh0PT5tcihcImRhdGV0aW1lXCIsdCkpO2Nhc2VcImRhdGUtYXJyYXlcIjpyZXR1cm4gci5tYXAodD0+bXIoXCJkYXRlXCIsdCkpO2Nhc2VcInRpbWUtYXJyYXlcIjpyZXR1cm4gci5tYXAodD0+bXIoXCJ0aW1lXCIsdCkpO2RlZmF1bHQ6cmV0dXJuIHJ9fWZ1bmN0aW9uIGVpKGUpe2xldCByPVtdLHQ9a2YoZSk7Zm9yKGxldCBuPTA7bjxlLnJvd3MubGVuZ3RoO24rKyl7bGV0IGk9ZS5yb3dzW25dLG89ey4uLnR9O2ZvcihsZXQgcz0wO3M8aS5sZW5ndGg7cysrKW9bZS5jb2x1bW5zW3NdXT1tcihlLnR5cGVzW3NdLGlbc10pO3IucHVzaChvKX1yZXR1cm4gcn1mdW5jdGlvbiBrZihlKXtsZXQgcj17fTtmb3IobGV0IHQ9MDt0PGUuY29sdW1ucy5sZW5ndGg7dCsrKXJbZS5jb2x1bW5zW3RdXT1udWxsO3JldHVybiByfXZhciBEZj1OKFwicHJpc21hOmNsaWVudDpyZXF1ZXN0X2hhbmRsZXJcIikscmk9Y2xhc3N7Y2xpZW50O2RhdGFsb2FkZXI7bG9nRW1pdHRlcjtjb25zdHJ1Y3RvcihyLHQpe3RoaXMubG9nRW1pdHRlcj10LHRoaXMuY2xpZW50PXIsdGhpcy5kYXRhbG9hZGVyPW5ldyBYbih7YmF0Y2hMb2FkZXI6c2woYXN5bmMoe3JlcXVlc3RzOm4sY3VzdG9tRGF0YVByb3h5RmV0Y2g6aX0pPT57bGV0e3RyYW5zYWN0aW9uOm8sb3RlbFBhcmVudEN0eDpzfT1uWzBdLGE9bi5tYXAocD0+cC5wcm90b2NvbFF1ZXJ5KSxsPXRoaXMuY2xpZW50Ll90cmFjaW5nSGVscGVyLmdldFRyYWNlUGFyZW50KHMpLHU9bi5zb21lKHA9PkRvKHAucHJvdG9jb2xRdWVyeS5hY3Rpb24pKTtyZXR1cm4oYXdhaXQgdGhpcy5jbGllbnQuX2VuZ2luZS5yZXF1ZXN0QmF0Y2goYSx7dHJhY2VwYXJlbnQ6bCx0cmFuc2FjdGlvbjpPZihvKSxjb250YWluc1dyaXRlOnUsY3VzdG9tRGF0YVByb3h5RmV0Y2g6aX0pKS5tYXAoKHAsZCk9PntpZihwIGluc3RhbmNlb2YgRXJyb3IpcmV0dXJuIHA7dHJ5e3JldHVybiB0aGlzLm1hcFF1ZXJ5RW5naW5lUmVzdWx0KG5bZF0scCl9Y2F0Y2goZil7cmV0dXJuIGZ9fSl9KSxzaW5nbGVMb2FkZXI6YXN5bmMgbj0+e2xldCBpPW4udHJhbnNhY3Rpb24/LmtpbmQ9PT1cIml0eFwiP251KG4udHJhbnNhY3Rpb24pOnZvaWQgMCxvPWF3YWl0IHRoaXMuY2xpZW50Ll9lbmdpbmUucmVxdWVzdChuLnByb3RvY29sUXVlcnkse3RyYWNlcGFyZW50OnRoaXMuY2xpZW50Ll90cmFjaW5nSGVscGVyLmdldFRyYWNlUGFyZW50KCksaW50ZXJhY3RpdmVUcmFuc2FjdGlvbjppLGlzV3JpdGU6RG8obi5wcm90b2NvbFF1ZXJ5LmFjdGlvbiksY3VzdG9tRGF0YVByb3h5RmV0Y2g6bi5jdXN0b21EYXRhUHJveHlGZXRjaH0pO3JldHVybiB0aGlzLm1hcFF1ZXJ5RW5naW5lUmVzdWx0KG4sbyl9LGJhdGNoQnk6bj0+bi50cmFuc2FjdGlvbj8uaWQ/YHRyYW5zYWN0aW9uLSR7bi50cmFuc2FjdGlvbi5pZH1gOnJ1KG4ucHJvdG9jb2xRdWVyeSksYmF0Y2hPcmRlcihuLGkpe3JldHVybiBuLnRyYW5zYWN0aW9uPy5raW5kPT09XCJiYXRjaFwiJiZpLnRyYW5zYWN0aW9uPy5raW5kPT09XCJiYXRjaFwiP24udHJhbnNhY3Rpb24uaW5kZXgtaS50cmFuc2FjdGlvbi5pbmRleDowfX0pfWFzeW5jIHJlcXVlc3Qocil7dHJ5e3JldHVybiBhd2FpdCB0aGlzLmRhdGFsb2FkZXIucmVxdWVzdChyKX1jYXRjaCh0KXtsZXR7Y2xpZW50TWV0aG9kOm4sY2FsbHNpdGU6aSx0cmFuc2FjdGlvbjpvLGFyZ3M6cyxtb2RlbE5hbWU6YX09cjt0aGlzLmhhbmRsZUFuZExvZ1JlcXVlc3RFcnJvcih7ZXJyb3I6dCxjbGllbnRNZXRob2Q6bixjYWxsc2l0ZTppLHRyYW5zYWN0aW9uOm8sYXJnczpzLG1vZGVsTmFtZTphLGdsb2JhbE9taXQ6ci5nbG9iYWxPbWl0fSl9fW1hcFF1ZXJ5RW5naW5lUmVzdWx0KHtkYXRhUGF0aDpyLHVucGFja2VyOnR9LG4pe2xldCBpPW4/LmRhdGEsbz10aGlzLnVucGFjayhpLHIsdCk7cmV0dXJuIHByb2Nlc3MuZW52LlBSSVNNQV9DTElFTlRfR0VUX1RJTUU/e2RhdGE6b306b31oYW5kbGVBbmRMb2dSZXF1ZXN0RXJyb3Iocil7dHJ5e3RoaXMuaGFuZGxlUmVxdWVzdEVycm9yKHIpfWNhdGNoKHQpe3Rocm93IHRoaXMubG9nRW1pdHRlciYmdGhpcy5sb2dFbWl0dGVyLmVtaXQoXCJlcnJvclwiLHttZXNzYWdlOnQubWVzc2FnZSx0YXJnZXQ6ci5jbGllbnRNZXRob2QsdGltZXN0YW1wOm5ldyBEYXRlfSksdH19aGFuZGxlUmVxdWVzdEVycm9yKHtlcnJvcjpyLGNsaWVudE1ldGhvZDp0LGNhbGxzaXRlOm4sdHJhbnNhY3Rpb246aSxhcmdzOm8sbW9kZWxOYW1lOnMsZ2xvYmFsT21pdDphfSl7aWYoRGYociksX2YocixpKSl0aHJvdyByO2lmKHIgaW5zdGFuY2VvZiB6JiZOZihyKSl7bGV0IHU9aXUoci5tZXRhKTtfbih7YXJnczpvLGVycm9yczpbdV0sY2FsbHNpdGU6bixlcnJvckZvcm1hdDp0aGlzLmNsaWVudC5fZXJyb3JGb3JtYXQsb3JpZ2luYWxNZXRob2Q6dCxjbGllbnRWZXJzaW9uOnRoaXMuY2xpZW50Ll9jbGllbnRWZXJzaW9uLGdsb2JhbE9taXQ6YX0pfWxldCBsPXIubWVzc2FnZTtpZihuJiYobD1Qbih7Y2FsbHNpdGU6bixvcmlnaW5hbE1ldGhvZDp0LGlzUGFuaWM6ci5pc1BhbmljLHNob3dDb2xvcnM6dGhpcy5jbGllbnQuX2Vycm9yRm9ybWF0PT09XCJwcmV0dHlcIixtZXNzYWdlOmx9KSksbD10aGlzLnNhbml0aXplTWVzc2FnZShsKSxyLmNvZGUpe2xldCB1PXM/e21vZGVsTmFtZTpzLC4uLnIubWV0YX06ci5tZXRhO3Rocm93IG5ldyB6KGwse2NvZGU6ci5jb2RlLGNsaWVudFZlcnNpb246dGhpcy5jbGllbnQuX2NsaWVudFZlcnNpb24sbWV0YTp1LGJhdGNoUmVxdWVzdElkeDpyLmJhdGNoUmVxdWVzdElkeH0pfWVsc2V7aWYoci5pc1BhbmljKXRocm93IG5ldyBsZShsLHRoaXMuY2xpZW50Ll9jbGllbnRWZXJzaW9uKTtpZihyIGluc3RhbmNlb2Ygail0aHJvdyBuZXcgaihsLHtjbGllbnRWZXJzaW9uOnRoaXMuY2xpZW50Ll9jbGllbnRWZXJzaW9uLGJhdGNoUmVxdWVzdElkeDpyLmJhdGNoUmVxdWVzdElkeH0pO2lmKHIgaW5zdGFuY2VvZiBUKXRocm93IG5ldyBUKGwsdGhpcy5jbGllbnQuX2NsaWVudFZlcnNpb24pO2lmKHIgaW5zdGFuY2VvZiBsZSl0aHJvdyBuZXcgbGUobCx0aGlzLmNsaWVudC5fY2xpZW50VmVyc2lvbil9dGhyb3cgci5jbGllbnRWZXJzaW9uPXRoaXMuY2xpZW50Ll9jbGllbnRWZXJzaW9uLHJ9c2FuaXRpemVNZXNzYWdlKHIpe3JldHVybiB0aGlzLmNsaWVudC5fZXJyb3JGb3JtYXQmJnRoaXMuY2xpZW50Ll9lcnJvckZvcm1hdCE9PVwicHJldHR5XCI/KDAsdHUuZGVmYXVsdCkocik6cn11bnBhY2socix0LG4pe2lmKCFyfHwoci5kYXRhJiYocj1yLmRhdGEpLCFyKSlyZXR1cm4gcjtsZXQgaT1PYmplY3Qua2V5cyhyKVswXSxvPU9iamVjdC52YWx1ZXMocilbMF0scz10LmZpbHRlcih1PT51IT09XCJzZWxlY3RcIiYmdSE9PVwiaW5jbHVkZVwiKSxhPWxvKG8scyksbD1pPT09XCJxdWVyeVJhd1wiP2VpKGEpOlRyKGEpO3JldHVybiBuP24obCk6bH1nZXRbU3ltYm9sLnRvU3RyaW5nVGFnXSgpe3JldHVyblwiUmVxdWVzdEhhbmRsZXJcIn19O2Z1bmN0aW9uIE9mKGUpe2lmKGUpe2lmKGUua2luZD09PVwiYmF0Y2hcIilyZXR1cm57a2luZDpcImJhdGNoXCIsb3B0aW9uczp7aXNvbGF0aW9uTGV2ZWw6ZS5pc29sYXRpb25MZXZlbH19O2lmKGUua2luZD09PVwiaXR4XCIpcmV0dXJue2tpbmQ6XCJpdHhcIixvcHRpb25zOm51KGUpfTtOZShlLFwiVW5rbm93biB0cmFuc2FjdGlvbiBraW5kXCIpfX1mdW5jdGlvbiBudShlKXtyZXR1cm57aWQ6ZS5pZCxwYXlsb2FkOmUucGF5bG9hZH19ZnVuY3Rpb24gX2YoZSxyKXtyZXR1cm4gWm4oZSkmJnI/LmtpbmQ9PT1cImJhdGNoXCImJmUuYmF0Y2hSZXF1ZXN0SWR4IT09ci5pbmRleH1mdW5jdGlvbiBOZihlKXtyZXR1cm4gZS5jb2RlPT09XCJQMjAwOVwifHxlLmNvZGU9PT1cIlAyMDEyXCJ9ZnVuY3Rpb24gaXUoZSl7aWYoZS5raW5kPT09XCJVbmlvblwiKXJldHVybntraW5kOlwiVW5pb25cIixlcnJvcnM6ZS5lcnJvcnMubWFwKGl1KX07aWYoQXJyYXkuaXNBcnJheShlLnNlbGVjdGlvblBhdGgpKXtsZXRbLC4uLnJdPWUuc2VsZWN0aW9uUGF0aDtyZXR1cm57Li4uZSxzZWxlY3Rpb25QYXRoOnJ9fXJldHVybiBlfXZhciBvdT1TbDt2YXIgY3U9QyhLaSgpKTt2YXIgTz1jbGFzcyBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKHIpe3N1cGVyKHIrYFxuUmVhZCBtb3JlIGF0IGh0dHBzOi8vcHJpcy5seS9kL2NsaWVudC1jb25zdHJ1Y3RvcmApLHRoaXMubmFtZT1cIlByaXNtYUNsaWVudENvbnN0cnVjdG9yVmFsaWRhdGlvbkVycm9yXCJ9Z2V0W1N5bWJvbC50b1N0cmluZ1RhZ10oKXtyZXR1cm5cIlByaXNtYUNsaWVudENvbnN0cnVjdG9yVmFsaWRhdGlvbkVycm9yXCJ9fTt4KE8sXCJQcmlzbWFDbGllbnRDb25zdHJ1Y3RvclZhbGlkYXRpb25FcnJvclwiKTt2YXIgc3U9W1wiZGF0YXNvdXJjZXNcIixcImRhdGFzb3VyY2VVcmxcIixcImVycm9yRm9ybWF0XCIsXCJhZGFwdGVyXCIsXCJsb2dcIixcInRyYW5zYWN0aW9uT3B0aW9uc1wiLFwib21pdFwiLFwiX19pbnRlcm5hbFwiXSxhdT1bXCJwcmV0dHlcIixcImNvbG9ybGVzc1wiLFwibWluaW1hbFwiXSxsdT1bXCJpbmZvXCIsXCJxdWVyeVwiLFwid2FyblwiLFwiZXJyb3JcIl0sTGY9e2RhdGFzb3VyY2VzOihlLHtkYXRhc291cmNlTmFtZXM6cn0pPT57aWYoZSl7aWYodHlwZW9mIGUhPVwib2JqZWN0XCJ8fEFycmF5LmlzQXJyYXkoZSkpdGhyb3cgbmV3IE8oYEludmFsaWQgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShlKX0gZm9yIFwiZGF0YXNvdXJjZXNcIiBwcm92aWRlZCB0byBQcmlzbWFDbGllbnQgY29uc3RydWN0b3JgKTtmb3IobGV0W3Qsbl1vZiBPYmplY3QuZW50cmllcyhlKSl7aWYoIXIuaW5jbHVkZXModCkpe2xldCBpPUpyKHQscil8fGAgQXZhaWxhYmxlIGRhdGFzb3VyY2VzOiAke3Iuam9pbihcIiwgXCIpfWA7dGhyb3cgbmV3IE8oYFVua25vd24gZGF0YXNvdXJjZSAke3R9IHByb3ZpZGVkIHRvIFByaXNtYUNsaWVudCBjb25zdHJ1Y3Rvci4ke2l9YCl9aWYodHlwZW9mIG4hPVwib2JqZWN0XCJ8fEFycmF5LmlzQXJyYXkobikpdGhyb3cgbmV3IE8oYEludmFsaWQgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShlKX0gZm9yIGRhdGFzb3VyY2UgXCIke3R9XCIgcHJvdmlkZWQgdG8gUHJpc21hQ2xpZW50IGNvbnN0cnVjdG9yLlxuSXQgc2hvdWxkIGhhdmUgdGhpcyBmb3JtOiB7IHVybDogXCJDT05ORUNUSU9OX1NUUklOR1wiIH1gKTtpZihuJiZ0eXBlb2Ygbj09XCJvYmplY3RcIilmb3IobGV0W2ksb11vZiBPYmplY3QuZW50cmllcyhuKSl7aWYoaSE9PVwidXJsXCIpdGhyb3cgbmV3IE8oYEludmFsaWQgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShlKX0gZm9yIGRhdGFzb3VyY2UgXCIke3R9XCIgcHJvdmlkZWQgdG8gUHJpc21hQ2xpZW50IGNvbnN0cnVjdG9yLlxuSXQgc2hvdWxkIGhhdmUgdGhpcyBmb3JtOiB7IHVybDogXCJDT05ORUNUSU9OX1NUUklOR1wiIH1gKTtpZih0eXBlb2YgbyE9XCJzdHJpbmdcIil0aHJvdyBuZXcgTyhgSW52YWxpZCB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KG8pfSBmb3IgZGF0YXNvdXJjZSBcIiR7dH1cIiBwcm92aWRlZCB0byBQcmlzbWFDbGllbnQgY29uc3RydWN0b3IuXG5JdCBzaG91bGQgaGF2ZSB0aGlzIGZvcm06IHsgdXJsOiBcIkNPTk5FQ1RJT05fU1RSSU5HXCIgfWApfX19fSxhZGFwdGVyOihlLHIpPT57aWYoIWUmJkVyKHIuZ2VuZXJhdG9yKT09PVwiY2xpZW50XCIpdGhyb3cgbmV3IE8oJ1VzaW5nIGVuZ2luZSB0eXBlIFwiY2xpZW50XCIgcmVxdWlyZXMgYSBkcml2ZXIgYWRhcHRlciB0byBiZSBwcm92aWRlZCB0byBQcmlzbWFDbGllbnQgY29uc3RydWN0b3IuJyk7aWYoZT09PW51bGwpcmV0dXJuO2lmKGU9PT12b2lkIDApdGhyb3cgbmV3IE8oJ1wiYWRhcHRlclwiIHByb3BlcnR5IG11c3Qgbm90IGJlIHVuZGVmaW5lZCwgdXNlIG51bGwgdG8gY29uZGl0aW9uYWxseSBkaXNhYmxlIGRyaXZlciBhZGFwdGVycy4nKTtpZighWW4ocikuaW5jbHVkZXMoXCJkcml2ZXJBZGFwdGVyc1wiKSl0aHJvdyBuZXcgTygnXCJhZGFwdGVyXCIgcHJvcGVydHkgY2FuIG9ubHkgYmUgcHJvdmlkZWQgdG8gUHJpc21hQ2xpZW50IGNvbnN0cnVjdG9yIHdoZW4gXCJkcml2ZXJBZGFwdGVyc1wiIHByZXZpZXcgZmVhdHVyZSBpcyBlbmFibGVkLicpO2lmKEVyKHIuZ2VuZXJhdG9yKT09PVwiYmluYXJ5XCIpdGhyb3cgbmV3IE8oJ0Nhbm5vdCB1c2UgYSBkcml2ZXIgYWRhcHRlciB3aXRoIHRoZSBcImJpbmFyeVwiIFF1ZXJ5IEVuZ2luZS4gUGxlYXNlIHVzZSB0aGUgXCJsaWJyYXJ5XCIgUXVlcnkgRW5naW5lLicpfSxkYXRhc291cmNlVXJsOmU9PntpZih0eXBlb2YgZTxcInVcIiYmdHlwZW9mIGUhPVwic3RyaW5nXCIpdGhyb3cgbmV3IE8oYEludmFsaWQgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShlKX0gZm9yIFwiZGF0YXNvdXJjZVVybFwiIHByb3ZpZGVkIHRvIFByaXNtYUNsaWVudCBjb25zdHJ1Y3Rvci5cbkV4cGVjdGVkIHN0cmluZyBvciB1bmRlZmluZWQuYCl9LGVycm9yRm9ybWF0OmU9PntpZihlKXtpZih0eXBlb2YgZSE9XCJzdHJpbmdcIil0aHJvdyBuZXcgTyhgSW52YWxpZCB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KGUpfSBmb3IgXCJlcnJvckZvcm1hdFwiIHByb3ZpZGVkIHRvIFByaXNtYUNsaWVudCBjb25zdHJ1Y3Rvci5gKTtpZighYXUuaW5jbHVkZXMoZSkpe2xldCByPUpyKGUsYXUpO3Rocm93IG5ldyBPKGBJbnZhbGlkIGVycm9yRm9ybWF0ICR7ZX0gcHJvdmlkZWQgdG8gUHJpc21hQ2xpZW50IGNvbnN0cnVjdG9yLiR7cn1gKX19fSxsb2c6ZT0+e2lmKCFlKXJldHVybjtpZighQXJyYXkuaXNBcnJheShlKSl0aHJvdyBuZXcgTyhgSW52YWxpZCB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KGUpfSBmb3IgXCJsb2dcIiBwcm92aWRlZCB0byBQcmlzbWFDbGllbnQgY29uc3RydWN0b3IuYCk7ZnVuY3Rpb24gcih0KXtpZih0eXBlb2YgdD09XCJzdHJpbmdcIiYmIWx1LmluY2x1ZGVzKHQpKXtsZXQgbj1Kcih0LGx1KTt0aHJvdyBuZXcgTyhgSW52YWxpZCBsb2cgbGV2ZWwgXCIke3R9XCIgcHJvdmlkZWQgdG8gUHJpc21hQ2xpZW50IGNvbnN0cnVjdG9yLiR7bn1gKX19Zm9yKGxldCB0IG9mIGUpe3IodCk7bGV0IG49e2xldmVsOnIsZW1pdDppPT57bGV0IG89W1wic3Rkb3V0XCIsXCJldmVudFwiXTtpZighby5pbmNsdWRlcyhpKSl7bGV0IHM9SnIoaSxvKTt0aHJvdyBuZXcgTyhgSW52YWxpZCB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KGkpfSBmb3IgXCJlbWl0XCIgaW4gbG9nTGV2ZWwgcHJvdmlkZWQgdG8gUHJpc21hQ2xpZW50IGNvbnN0cnVjdG9yLiR7c31gKX19fTtpZih0JiZ0eXBlb2YgdD09XCJvYmplY3RcIilmb3IobGV0W2ksb11vZiBPYmplY3QuZW50cmllcyh0KSlpZihuW2ldKW5baV0obyk7ZWxzZSB0aHJvdyBuZXcgTyhgSW52YWxpZCBwcm9wZXJ0eSAke2l9IGZvciBcImxvZ1wiIHByb3ZpZGVkIHRvIFByaXNtYUNsaWVudCBjb25zdHJ1Y3RvcmApfX0sdHJhbnNhY3Rpb25PcHRpb25zOmU9PntpZighZSlyZXR1cm47bGV0IHI9ZS5tYXhXYWl0O2lmKHIhPW51bGwmJnI8PTApdGhyb3cgbmV3IE8oYEludmFsaWQgdmFsdWUgJHtyfSBmb3IgbWF4V2FpdCBpbiBcInRyYW5zYWN0aW9uT3B0aW9uc1wiIHByb3ZpZGVkIHRvIFByaXNtYUNsaWVudCBjb25zdHJ1Y3Rvci4gbWF4V2FpdCBuZWVkcyB0byBiZSBncmVhdGVyIHRoYW4gMGApO2xldCB0PWUudGltZW91dDtpZih0IT1udWxsJiZ0PD0wKXRocm93IG5ldyBPKGBJbnZhbGlkIHZhbHVlICR7dH0gZm9yIHRpbWVvdXQgaW4gXCJ0cmFuc2FjdGlvbk9wdGlvbnNcIiBwcm92aWRlZCB0byBQcmlzbWFDbGllbnQgY29uc3RydWN0b3IuIHRpbWVvdXQgbmVlZHMgdG8gYmUgZ3JlYXRlciB0aGFuIDBgKX0sb21pdDooZSxyKT0+e2lmKHR5cGVvZiBlIT1cIm9iamVjdFwiKXRocm93IG5ldyBPKCdcIm9taXRcIiBvcHRpb24gaXMgZXhwZWN0ZWQgdG8gYmUgYW4gb2JqZWN0LicpO2lmKGU9PT1udWxsKXRocm93IG5ldyBPKCdcIm9taXRcIiBvcHRpb24gY2FuIG5vdCBiZSBgbnVsbGAnKTtsZXQgdD1bXTtmb3IobGV0W24saV1vZiBPYmplY3QuZW50cmllcyhlKSl7bGV0IG89TWYobixyLnJ1bnRpbWVEYXRhTW9kZWwpO2lmKCFvKXt0LnB1c2goe2tpbmQ6XCJVbmtub3duTW9kZWxcIixtb2RlbEtleTpufSk7Y29udGludWV9Zm9yKGxldFtzLGFdb2YgT2JqZWN0LmVudHJpZXMoaSkpe2xldCBsPW8uZmllbGRzLmZpbmQodT0+dS5uYW1lPT09cyk7aWYoIWwpe3QucHVzaCh7a2luZDpcIlVua25vd25GaWVsZFwiLG1vZGVsS2V5Om4sZmllbGROYW1lOnN9KTtjb250aW51ZX1pZihsLnJlbGF0aW9uTmFtZSl7dC5wdXNoKHtraW5kOlwiUmVsYXRpb25Jbk9taXRcIixtb2RlbEtleTpuLGZpZWxkTmFtZTpzfSk7Y29udGludWV9dHlwZW9mIGEhPVwiYm9vbGVhblwiJiZ0LnB1c2goe2tpbmQ6XCJJbnZhbGlkRmllbGRWYWx1ZVwiLG1vZGVsS2V5Om4sZmllbGROYW1lOnN9KX19aWYodC5sZW5ndGg+MCl0aHJvdyBuZXcgTygkZihlLHQpKX0sX19pbnRlcm5hbDplPT57aWYoIWUpcmV0dXJuO2xldCByPVtcImRlYnVnXCIsXCJlbmdpbmVcIixcImNvbmZpZ092ZXJyaWRlXCJdO2lmKHR5cGVvZiBlIT1cIm9iamVjdFwiKXRocm93IG5ldyBPKGBJbnZhbGlkIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkoZSl9IGZvciBcIl9faW50ZXJuYWxcIiB0byBQcmlzbWFDbGllbnQgY29uc3RydWN0b3JgKTtmb3IobGV0W3Rdb2YgT2JqZWN0LmVudHJpZXMoZSkpaWYoIXIuaW5jbHVkZXModCkpe2xldCBuPUpyKHQscik7dGhyb3cgbmV3IE8oYEludmFsaWQgcHJvcGVydHkgJHtKU09OLnN0cmluZ2lmeSh0KX0gZm9yIFwiX19pbnRlcm5hbFwiIHByb3ZpZGVkIHRvIFByaXNtYUNsaWVudCBjb25zdHJ1Y3Rvci4ke259YCl9fX07ZnVuY3Rpb24gcHUoZSxyKXtmb3IobGV0W3Qsbl1vZiBPYmplY3QuZW50cmllcyhlKSl7aWYoIXN1LmluY2x1ZGVzKHQpKXtsZXQgaT1Kcih0LHN1KTt0aHJvdyBuZXcgTyhgVW5rbm93biBwcm9wZXJ0eSAke3R9IHByb3ZpZGVkIHRvIFByaXNtYUNsaWVudCBjb25zdHJ1Y3Rvci4ke2l9YCl9TGZbdF0obixyKX1pZihlLmRhdGFzb3VyY2VVcmwmJmUuZGF0YXNvdXJjZXMpdGhyb3cgbmV3IE8oJ0NhbiBub3QgdXNlIFwiZGF0YXNvdXJjZVVybFwiIGFuZCBcImRhdGFzb3VyY2VzXCIgb3B0aW9ucyBhdCB0aGUgc2FtZSB0aW1lLiBQaWNrIG9uZSBvZiB0aGVtJyl9ZnVuY3Rpb24gSnIoZSxyKXtpZihyLmxlbmd0aD09PTB8fHR5cGVvZiBlIT1cInN0cmluZ1wiKXJldHVyblwiXCI7bGV0IHQ9RmYoZSxyKTtyZXR1cm4gdD9gIERpZCB5b3UgbWVhbiBcIiR7dH1cIj9gOlwiXCJ9ZnVuY3Rpb24gRmYoZSxyKXtpZihyLmxlbmd0aD09PTApcmV0dXJuIG51bGw7bGV0IHQ9ci5tYXAoaT0+KHt2YWx1ZTppLGRpc3RhbmNlOigwLGN1LmRlZmF1bHQpKGUsaSl9KSk7dC5zb3J0KChpLG8pPT5pLmRpc3RhbmNlPG8uZGlzdGFuY2U/LTE6MSk7bGV0IG49dFswXTtyZXR1cm4gbi5kaXN0YW5jZTwzP24udmFsdWU6bnVsbH1mdW5jdGlvbiBNZihlLHIpe3JldHVybiB1dShyLm1vZGVscyxlKT8/dXUoci50eXBlcyxlKX1mdW5jdGlvbiB1dShlLHIpe2xldCB0PU9iamVjdC5rZXlzKGUpLmZpbmQobj0+WWUobik9PT1yKTtpZih0KXJldHVybiBlW3RdfWZ1bmN0aW9uICRmKGUscil7bGV0IHQ9TnIoZSk7Zm9yKGxldCBvIG9mIHIpc3dpdGNoKG8ua2luZCl7Y2FzZVwiVW5rbm93bk1vZGVsXCI6dC5hcmd1bWVudHMuZ2V0RmllbGQoby5tb2RlbEtleSk/Lm1hcmtBc0Vycm9yKCksdC5hZGRFcnJvck1lc3NhZ2UoKCk9PmBVbmtub3duIG1vZGVsIG5hbWU6ICR7by5tb2RlbEtleX0uYCk7YnJlYWs7Y2FzZVwiVW5rbm93bkZpZWxkXCI6dC5hcmd1bWVudHMuZ2V0RGVlcEZpZWxkKFtvLm1vZGVsS2V5LG8uZmllbGROYW1lXSk/Lm1hcmtBc0Vycm9yKCksdC5hZGRFcnJvck1lc3NhZ2UoKCk9PmBNb2RlbCBcIiR7by5tb2RlbEtleX1cIiBkb2VzIG5vdCBoYXZlIGEgZmllbGQgbmFtZWQgXCIke28uZmllbGROYW1lfVwiLmApO2JyZWFrO2Nhc2VcIlJlbGF0aW9uSW5PbWl0XCI6dC5hcmd1bWVudHMuZ2V0RGVlcEZpZWxkKFtvLm1vZGVsS2V5LG8uZmllbGROYW1lXSk/Lm1hcmtBc0Vycm9yKCksdC5hZGRFcnJvck1lc3NhZ2UoKCk9PidSZWxhdGlvbnMgYXJlIGFscmVhZHkgZXhjbHVkZWQgYnkgZGVmYXVsdCBhbmQgY2FuIG5vdCBiZSBzcGVjaWZpZWQgaW4gXCJvbWl0XCIuJyk7YnJlYWs7Y2FzZVwiSW52YWxpZEZpZWxkVmFsdWVcIjp0LmFyZ3VtZW50cy5nZXREZWVwRmllbGRWYWx1ZShbby5tb2RlbEtleSxvLmZpZWxkTmFtZV0pPy5tYXJrQXNFcnJvcigpLHQuYWRkRXJyb3JNZXNzYWdlKCgpPT5cIk9taXQgZmllbGQgb3B0aW9uIHZhbHVlIG11c3QgYmUgYSBib29sZWFuLlwiKTticmVha31sZXR7bWVzc2FnZTpuLGFyZ3M6aX09T24odCxcImNvbG9ybGVzc1wiKTtyZXR1cm5gRXJyb3IgdmFsaWRhdGluZyBcIm9taXRcIiBvcHRpb246XG5cbiR7aX1cblxuJHtufWB9ZnVuY3Rpb24gZHUoZSl7cmV0dXJuIGUubGVuZ3RoPT09MD9Qcm9taXNlLnJlc29sdmUoW10pOm5ldyBQcm9taXNlKChyLHQpPT57bGV0IG49bmV3IEFycmF5KGUubGVuZ3RoKSxpPW51bGwsbz0hMSxzPTAsYT0oKT0+e298fChzKysscz09PWUubGVuZ3RoJiYobz0hMCxpP3QoaSk6cihuKSkpfSxsPXU9PntvfHwobz0hMCx0KHUpKX07Zm9yKGxldCB1PTA7dTxlLmxlbmd0aDt1KyspZVt1XS50aGVuKGM9PntuW3VdPWMsYSgpfSxjPT57aWYoIVpuKGMpKXtsKGMpO3JldHVybn1jLmJhdGNoUmVxdWVzdElkeD09PXU/bChjKTooaXx8KGk9YyksYSgpKX0pfSl9dmFyIHJyPU4oXCJwcmlzbWE6Y2xpZW50XCIpO3R5cGVvZiBnbG9iYWxUaGlzPT1cIm9iamVjdFwiJiYoZ2xvYmFsVGhpcy5OT0RFX0NMSUVOVD0hMCk7dmFyIHFmPXtyZXF1ZXN0QXJnc1RvTWlkZGxld2FyZUFyZ3M6ZT0+ZSxtaWRkbGV3YXJlQXJnc1RvUmVxdWVzdEFyZ3M6ZT0+ZX0samY9U3ltYm9sLmZvcihcInByaXNtYS5jbGllbnQudHJhbnNhY3Rpb24uaWRcIiksVmY9e2lkOjAsbmV4dElkKCl7cmV0dXJuKyt0aGlzLmlkfX07ZnVuY3Rpb24gYnUoZSl7Y2xhc3Mgcntfb3JpZ2luYWxDbGllbnQ9dGhpcztfcnVudGltZURhdGFNb2RlbDtfcmVxdWVzdEhhbmRsZXI7X2Nvbm5lY3Rpb25Qcm9taXNlO19kaXNjb25uZWN0aW9uUHJvbWlzZTtfZW5naW5lQ29uZmlnO19hY2NlbGVyYXRlRW5naW5lQ29uZmlnO19jbGllbnRWZXJzaW9uO19lcnJvckZvcm1hdDtfdHJhY2luZ0hlbHBlcjtfbWlkZGxld2FyZXM9bmV3IHpuO19wcmV2aWV3RmVhdHVyZXM7X2FjdGl2ZVByb3ZpZGVyO19nbG9iYWxPbWl0O19leHRlbnNpb25zO19lbmdpbmU7X2FwcGxpZWRQYXJlbnQ7X2NyZWF0ZVByaXNtYVByb21pc2U9Q28oKTtjb25zdHJ1Y3RvcihuKXtlPW4/Ll9faW50ZXJuYWw/LmNvbmZpZ092ZXJyaWRlPy4oZSk/P2UscGwoZSksbiYmcHUobixlKTtsZXQgaT1uZXcgaHUuRXZlbnRFbWl0dGVyKCkub24oXCJlcnJvclwiLCgpPT57fSk7dGhpcy5fZXh0ZW5zaW9ucz1Mci5lbXB0eSgpLHRoaXMuX3ByZXZpZXdGZWF0dXJlcz1ZbihlKSx0aGlzLl9jbGllbnRWZXJzaW9uPWUuY2xpZW50VmVyc2lvbj8/b3UsdGhpcy5fYWN0aXZlUHJvdmlkZXI9ZS5hY3RpdmVQcm92aWRlcix0aGlzLl9nbG9iYWxPbWl0PW4/Lm9taXQsdGhpcy5fdHJhY2luZ0hlbHBlcj1abCgpO2xldCBvPWUucmVsYXRpdmVFbnZQYXRocyYme3Jvb3RFbnZQYXRoOmUucmVsYXRpdmVFbnZQYXRocy5yb290RW52UGF0aCYmdGkuZGVmYXVsdC5yZXNvbHZlKGUuZGlybmFtZSxlLnJlbGF0aXZlRW52UGF0aHMucm9vdEVudlBhdGgpLHNjaGVtYUVudlBhdGg6ZS5yZWxhdGl2ZUVudlBhdGhzLnNjaGVtYUVudlBhdGgmJnRpLmRlZmF1bHQucmVzb2x2ZShlLmRpcm5hbWUsZS5yZWxhdGl2ZUVudlBhdGhzLnNjaGVtYUVudlBhdGgpfSxzO2lmKG4/LmFkYXB0ZXIpe3M9bi5hZGFwdGVyO2xldCBsPWUuYWN0aXZlUHJvdmlkZXI9PT1cInBvc3RncmVzcWxcInx8ZS5hY3RpdmVQcm92aWRlcj09PVwiY29ja3JvYWNoZGJcIj9cInBvc3RncmVzXCI6ZS5hY3RpdmVQcm92aWRlcjtpZihzLnByb3ZpZGVyIT09bCl0aHJvdyBuZXcgVChgVGhlIERyaXZlciBBZGFwdGVyIFxcYCR7cy5hZGFwdGVyTmFtZX1cXGAsIGJhc2VkIG9uIFxcYCR7cy5wcm92aWRlcn1cXGAsIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggdGhlIHByb3ZpZGVyIFxcYCR7bH1cXGAgc3BlY2lmaWVkIGluIHRoZSBQcmlzbWEgc2NoZW1hLmAsdGhpcy5fY2xpZW50VmVyc2lvbik7aWYobi5kYXRhc291cmNlc3x8bi5kYXRhc291cmNlVXJsIT09dm9pZCAwKXRocm93IG5ldyBUKFwiQ3VzdG9tIGRhdGFzb3VyY2UgY29uZmlndXJhdGlvbiBpcyBub3QgY29tcGF0aWJsZSB3aXRoIFByaXNtYSBEcml2ZXIgQWRhcHRlcnMuIFBsZWFzZSBkZWZpbmUgdGhlIGRhdGFiYXNlIGNvbm5lY3Rpb24gc3RyaW5nIGRpcmVjdGx5IGluIHRoZSBEcml2ZXIgQWRhcHRlciBjb25maWd1cmF0aW9uLlwiLHRoaXMuX2NsaWVudFZlcnNpb24pfWxldCBhPSFzJiZvJiZzdChvLHtjb25mbGljdENoZWNrOlwibm9uZVwifSl8fGUuaW5qZWN0YWJsZUVkZ2VFbnY/LigpO3RyeXtsZXQgbD1uPz97fSx1PWwuX19pbnRlcm5hbD8/e30sYz11LmRlYnVnPT09ITA7YyYmTi5lbmFibGUoXCJwcmlzbWE6Y2xpZW50XCIpO2xldCBwPXRpLmRlZmF1bHQucmVzb2x2ZShlLmRpcm5hbWUsZS5yZWxhdGl2ZVBhdGgpO3l1LmRlZmF1bHQuZXhpc3RzU3luYyhwKXx8KHA9ZS5kaXJuYW1lKSxycihcImRpcm5hbWVcIixlLmRpcm5hbWUpLHJyKFwicmVsYXRpdmVQYXRoXCIsZS5yZWxhdGl2ZVBhdGgpLHJyKFwiY3dkXCIscCk7bGV0IGQ9dS5lbmdpbmV8fHt9O2lmKGwuZXJyb3JGb3JtYXQ/dGhpcy5fZXJyb3JGb3JtYXQ9bC5lcnJvckZvcm1hdDpwcm9jZXNzLmVudi5OT0RFX0VOVj09PVwicHJvZHVjdGlvblwiP3RoaXMuX2Vycm9yRm9ybWF0PVwibWluaW1hbFwiOnByb2Nlc3MuZW52Lk5PX0NPTE9SP3RoaXMuX2Vycm9yRm9ybWF0PVwiY29sb3JsZXNzXCI6dGhpcy5fZXJyb3JGb3JtYXQ9XCJjb2xvcmxlc3NcIix0aGlzLl9ydW50aW1lRGF0YU1vZGVsPWUucnVudGltZURhdGFNb2RlbCx0aGlzLl9lbmdpbmVDb25maWc9e2N3ZDpwLGRpcm5hbWU6ZS5kaXJuYW1lLGVuYWJsZURlYnVnTG9nczpjLGFsbG93VHJpZ2dlclBhbmljOmQuYWxsb3dUcmlnZ2VyUGFuaWMscHJpc21hUGF0aDpkLmJpbmFyeVBhdGg/P3ZvaWQgMCxlbmdpbmVFbmRwb2ludDpkLmVuZHBvaW50LGdlbmVyYXRvcjplLmdlbmVyYXRvcixzaG93Q29sb3JzOnRoaXMuX2Vycm9yRm9ybWF0PT09XCJwcmV0dHlcIixsb2dMZXZlbDpsLmxvZyYmZXUobC5sb2cpLGxvZ1F1ZXJpZXM6bC5sb2cmJiEhKHR5cGVvZiBsLmxvZz09XCJzdHJpbmdcIj9sLmxvZz09PVwicXVlcnlcIjpsLmxvZy5maW5kKGY9PnR5cGVvZiBmPT1cInN0cmluZ1wiP2Y9PT1cInF1ZXJ5XCI6Zi5sZXZlbD09PVwicXVlcnlcIikpLGVudjphPy5wYXJzZWQ/P3t9LGZsYWdzOltdLGVuZ2luZVdhc206ZS5lbmdpbmVXYXNtLGNvbXBpbGVyV2FzbTplLmNvbXBpbGVyV2FzbSxjbGllbnRWZXJzaW9uOmUuY2xpZW50VmVyc2lvbixlbmdpbmVWZXJzaW9uOmUuZW5naW5lVmVyc2lvbixwcmV2aWV3RmVhdHVyZXM6dGhpcy5fcHJldmlld0ZlYXR1cmVzLGFjdGl2ZVByb3ZpZGVyOmUuYWN0aXZlUHJvdmlkZXIsaW5saW5lU2NoZW1hOmUuaW5saW5lU2NoZW1hLG92ZXJyaWRlRGF0YXNvdXJjZXM6ZGwobCxlLmRhdGFzb3VyY2VOYW1lcyksaW5saW5lRGF0YXNvdXJjZXM6ZS5pbmxpbmVEYXRhc291cmNlcyxpbmxpbmVTY2hlbWFIYXNoOmUuaW5saW5lU2NoZW1hSGFzaCx0cmFjaW5nSGVscGVyOnRoaXMuX3RyYWNpbmdIZWxwZXIsdHJhbnNhY3Rpb25PcHRpb25zOnttYXhXYWl0OmwudHJhbnNhY3Rpb25PcHRpb25zPy5tYXhXYWl0Pz8yZTMsdGltZW91dDpsLnRyYW5zYWN0aW9uT3B0aW9ucz8udGltZW91dD8/NWUzLGlzb2xhdGlvbkxldmVsOmwudHJhbnNhY3Rpb25PcHRpb25zPy5pc29sYXRpb25MZXZlbH0sbG9nRW1pdHRlcjppLGlzQnVuZGxlZDplLmlzQnVuZGxlZCxhZGFwdGVyOnN9LHRoaXMuX2FjY2VsZXJhdGVFbmdpbmVDb25maWc9ey4uLnRoaXMuX2VuZ2luZUNvbmZpZyxhY2NlbGVyYXRlVXRpbHM6e3Jlc29sdmVEYXRhc291cmNlVXJsOlZyLGdldEJhdGNoUmVxdWVzdFBheWxvYWQ6JHIscHJpc21hR3JhcGhRTFRvSlNFcnJvcjpxcixQcmlzbWFDbGllbnRVbmtub3duUmVxdWVzdEVycm9yOmosUHJpc21hQ2xpZW50SW5pdGlhbGl6YXRpb25FcnJvcjpULFByaXNtYUNsaWVudEtub3duUmVxdWVzdEVycm9yOnosZGVidWc6TihcInByaXNtYTpjbGllbnQ6YWNjZWxlcmF0ZUVuZ2luZVwiKSxlbmdpbmVWZXJzaW9uOmZ1LnZlcnNpb24sY2xpZW50VmVyc2lvbjplLmNsaWVudFZlcnNpb259fSxycihcImNsaWVudFZlcnNpb25cIixlLmNsaWVudFZlcnNpb24pLHRoaXMuX2VuZ2luZT1WbChlLHRoaXMuX2VuZ2luZUNvbmZpZyksdGhpcy5fcmVxdWVzdEhhbmRsZXI9bmV3IHJpKHRoaXMsaSksbC5sb2cpZm9yKGxldCBmIG9mIGwubG9nKXtsZXQgaD10eXBlb2YgZj09XCJzdHJpbmdcIj9mOmYuZW1pdD09PVwic3Rkb3V0XCI/Zi5sZXZlbDpudWxsO2gmJnRoaXMuJG9uKGgsZz0+e250LmxvZyhgJHtudC50YWdzW2hdPz9cIlwifWAsZy5tZXNzYWdlfHxnLnF1ZXJ5KX0pfX1jYXRjaChsKXt0aHJvdyBsLmNsaWVudFZlcnNpb249dGhpcy5fY2xpZW50VmVyc2lvbixsfXJldHVybiB0aGlzLl9hcHBsaWVkUGFyZW50PVB0KHRoaXMpfWdldFtTeW1ib2wudG9TdHJpbmdUYWddKCl7cmV0dXJuXCJQcmlzbWFDbGllbnRcIn0kdXNlKG4pe3RoaXMuX21pZGRsZXdhcmVzLnVzZShuKX0kb24obixpKXtyZXR1cm4gbj09PVwiYmVmb3JlRXhpdFwiP3RoaXMuX2VuZ2luZS5vbkJlZm9yZUV4aXQoaSk6biYmdGhpcy5fZW5naW5lQ29uZmlnLmxvZ0VtaXR0ZXIub24obixpKSx0aGlzfSRjb25uZWN0KCl7dHJ5e3JldHVybiB0aGlzLl9lbmdpbmUuc3RhcnQoKX1jYXRjaChuKXt0aHJvdyBuLmNsaWVudFZlcnNpb249dGhpcy5fY2xpZW50VmVyc2lvbixufX1hc3luYyAkZGlzY29ubmVjdCgpe3RyeXthd2FpdCB0aGlzLl9lbmdpbmUuc3RvcCgpfWNhdGNoKG4pe3Rocm93IG4uY2xpZW50VmVyc2lvbj10aGlzLl9jbGllbnRWZXJzaW9uLG59ZmluYWxseXtRbygpfX0kZXhlY3V0ZVJhd0ludGVybmFsKG4saSxvLHMpe2xldCBhPXRoaXMuX2FjdGl2ZVByb3ZpZGVyO3JldHVybiB0aGlzLl9yZXF1ZXN0KHthY3Rpb246XCJleGVjdXRlUmF3XCIsYXJnczpvLHRyYW5zYWN0aW9uOm4sY2xpZW50TWV0aG9kOmksYXJnc01hcHBlcjpBbyh7Y2xpZW50TWV0aG9kOmksYWN0aXZlUHJvdmlkZXI6YX0pLGNhbGxzaXRlOlplKHRoaXMuX2Vycm9yRm9ybWF0KSxkYXRhUGF0aDpbXSxtaWRkbGV3YXJlQXJnc01hcHBlcjpzfSl9JGV4ZWN1dGVSYXcobiwuLi5pKXtyZXR1cm4gdGhpcy5fY3JlYXRlUHJpc21hUHJvbWlzZShvPT57aWYobi5yYXchPT12b2lkIDB8fG4uc3FsIT09dm9pZCAwKXtsZXRbcyxhXT1tdShuLGkpO3JldHVybiBSbyh0aGlzLl9hY3RpdmVQcm92aWRlcixzLnRleHQscy52YWx1ZXMsQXJyYXkuaXNBcnJheShuKT9cInByaXNtYS4kZXhlY3V0ZVJhd2A8U1FMPmBcIjpcInByaXNtYS4kZXhlY3V0ZVJhdyhzcWxgPFNRTD5gKVwiKSx0aGlzLiRleGVjdXRlUmF3SW50ZXJuYWwobyxcIiRleGVjdXRlUmF3XCIscyxhKX10aHJvdyBuZXcgWihcImAkZXhlY3V0ZVJhd2AgaXMgYSB0YWcgZnVuY3Rpb24sIHBsZWFzZSB1c2UgaXQgbGlrZSB0aGUgZm9sbG93aW5nOlxcbmBgYFxcbmNvbnN0IHJlc3VsdCA9IGF3YWl0IHByaXNtYS4kZXhlY3V0ZVJhd2BVUERBVEUgVXNlciBTRVQgY29vbCA9ICR7dHJ1ZX0gV0hFUkUgZW1haWwgPSAkeyd1c2VyQGVtYWlsLmNvbSd9O2BcXG5gYGBcXG5cXG5PciByZWFkIG91ciBkb2NzIGF0IGh0dHBzOi8vd3d3LnByaXNtYS5pby9kb2NzL2NvbmNlcHRzL2NvbXBvbmVudHMvcHJpc21hLWNsaWVudC9yYXctZGF0YWJhc2UtYWNjZXNzI2V4ZWN1dGVyYXdcXG5cIix7Y2xpZW50VmVyc2lvbjp0aGlzLl9jbGllbnRWZXJzaW9ufSl9KX0kZXhlY3V0ZVJhd1Vuc2FmZShuLC4uLmkpe3JldHVybiB0aGlzLl9jcmVhdGVQcmlzbWFQcm9taXNlKG89PihSbyh0aGlzLl9hY3RpdmVQcm92aWRlcixuLGksXCJwcmlzbWEuJGV4ZWN1dGVSYXdVbnNhZmUoPFNRTD4sIFsuLi52YWx1ZXNdKVwiKSx0aGlzLiRleGVjdXRlUmF3SW50ZXJuYWwobyxcIiRleGVjdXRlUmF3VW5zYWZlXCIsW24sLi4uaV0pKSl9JHJ1bkNvbW1hbmRSYXcobil7aWYoZS5hY3RpdmVQcm92aWRlciE9PVwibW9uZ29kYlwiKXRocm93IG5ldyBaKGBUaGUgJHtlLmFjdGl2ZVByb3ZpZGVyfSBwcm92aWRlciBkb2VzIG5vdCBzdXBwb3J0ICRydW5Db21tYW5kUmF3LiBVc2UgdGhlIG1vbmdvZGIgcHJvdmlkZXIuYCx7Y2xpZW50VmVyc2lvbjp0aGlzLl9jbGllbnRWZXJzaW9ufSk7cmV0dXJuIHRoaXMuX2NyZWF0ZVByaXNtYVByb21pc2UoaT0+dGhpcy5fcmVxdWVzdCh7YXJnczpuLGNsaWVudE1ldGhvZDpcIiRydW5Db21tYW5kUmF3XCIsZGF0YVBhdGg6W10sYWN0aW9uOlwicnVuQ29tbWFuZFJhd1wiLGFyZ3NNYXBwZXI6QmwsY2FsbHNpdGU6WmUodGhpcy5fZXJyb3JGb3JtYXQpLHRyYW5zYWN0aW9uOml9KSl9YXN5bmMgJHF1ZXJ5UmF3SW50ZXJuYWwobixpLG8scyl7bGV0IGE9dGhpcy5fYWN0aXZlUHJvdmlkZXI7cmV0dXJuIHRoaXMuX3JlcXVlc3Qoe2FjdGlvbjpcInF1ZXJ5UmF3XCIsYXJnczpvLHRyYW5zYWN0aW9uOm4sY2xpZW50TWV0aG9kOmksYXJnc01hcHBlcjpBbyh7Y2xpZW50TWV0aG9kOmksYWN0aXZlUHJvdmlkZXI6YX0pLGNhbGxzaXRlOlplKHRoaXMuX2Vycm9yRm9ybWF0KSxkYXRhUGF0aDpbXSxtaWRkbGV3YXJlQXJnc01hcHBlcjpzfSl9JHF1ZXJ5UmF3KG4sLi4uaSl7cmV0dXJuIHRoaXMuX2NyZWF0ZVByaXNtYVByb21pc2Uobz0+e2lmKG4ucmF3IT09dm9pZCAwfHxuLnNxbCE9PXZvaWQgMClyZXR1cm4gdGhpcy4kcXVlcnlSYXdJbnRlcm5hbChvLFwiJHF1ZXJ5UmF3XCIsLi4ubXUobixpKSk7dGhyb3cgbmV3IFooXCJgJHF1ZXJ5UmF3YCBpcyBhIHRhZyBmdW5jdGlvbiwgcGxlYXNlIHVzZSBpdCBsaWtlIHRoZSBmb2xsb3dpbmc6XFxuYGBgXFxuY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJpc21hLiRxdWVyeVJhd2BTRUxFQ1QgKiBGUk9NIFVzZXIgV0hFUkUgaWQgPSAkezF9IE9SIGVtYWlsID0gJHsndXNlckBlbWFpbC5jb20nfTtgXFxuYGBgXFxuXFxuT3IgcmVhZCBvdXIgZG9jcyBhdCBodHRwczovL3d3dy5wcmlzbWEuaW8vZG9jcy9jb25jZXB0cy9jb21wb25lbnRzL3ByaXNtYS1jbGllbnQvcmF3LWRhdGFiYXNlLWFjY2VzcyNxdWVyeXJhd1xcblwiLHtjbGllbnRWZXJzaW9uOnRoaXMuX2NsaWVudFZlcnNpb259KX0pfSRxdWVyeVJhd1R5cGVkKG4pe3JldHVybiB0aGlzLl9jcmVhdGVQcmlzbWFQcm9taXNlKGk9PntpZighdGhpcy5faGFzUHJldmlld0ZsYWcoXCJ0eXBlZFNxbFwiKSl0aHJvdyBuZXcgWihcImB0eXBlZFNxbGAgcHJldmlldyBmZWF0dXJlIG11c3QgYmUgZW5hYmxlZCBpbiBvcmRlciB0byBhY2Nlc3MgJHF1ZXJ5UmF3VHlwZWQgQVBJXCIse2NsaWVudFZlcnNpb246dGhpcy5fY2xpZW50VmVyc2lvbn0pO3JldHVybiB0aGlzLiRxdWVyeVJhd0ludGVybmFsKGksXCIkcXVlcnlSYXdUeXBlZFwiLG4pfSl9JHF1ZXJ5UmF3VW5zYWZlKG4sLi4uaSl7cmV0dXJuIHRoaXMuX2NyZWF0ZVByaXNtYVByb21pc2Uobz0+dGhpcy4kcXVlcnlSYXdJbnRlcm5hbChvLFwiJHF1ZXJ5UmF3VW5zYWZlXCIsW24sLi4uaV0pKX1fdHJhbnNhY3Rpb25XaXRoQXJyYXkoe3Byb21pc2VzOm4sb3B0aW9uczppfSl7bGV0IG89VmYubmV4dElkKCkscz1YbChuLmxlbmd0aCksYT1uLm1hcCgobCx1KT0+e2lmKGw/LltTeW1ib2wudG9TdHJpbmdUYWddIT09XCJQcmlzbWFQcm9taXNlXCIpdGhyb3cgbmV3IEVycm9yKFwiQWxsIGVsZW1lbnRzIG9mIHRoZSBhcnJheSBuZWVkIHRvIGJlIFByaXNtYSBDbGllbnQgcHJvbWlzZXMuIEhpbnQ6IFBsZWFzZSBtYWtlIHN1cmUgeW91IGFyZSBub3QgYXdhaXRpbmcgdGhlIFByaXNtYSBjbGllbnQgY2FsbHMgeW91IGludGVuZGVkIHRvIHBhc3MgaW4gdGhlICR0cmFuc2FjdGlvbiBmdW5jdGlvbi5cIik7bGV0IGM9aT8uaXNvbGF0aW9uTGV2ZWw/P3RoaXMuX2VuZ2luZUNvbmZpZy50cmFuc2FjdGlvbk9wdGlvbnMuaXNvbGF0aW9uTGV2ZWwscD17a2luZDpcImJhdGNoXCIsaWQ6byxpbmRleDp1LGlzb2xhdGlvbkxldmVsOmMsbG9jazpzfTtyZXR1cm4gbC5yZXF1ZXN0VHJhbnNhY3Rpb24/LihwKT8/bH0pO3JldHVybiBkdShhKX1hc3luYyBfdHJhbnNhY3Rpb25XaXRoQ2FsbGJhY2soe2NhbGxiYWNrOm4sb3B0aW9uczppfSl7bGV0IG89e3RyYWNlcGFyZW50OnRoaXMuX3RyYWNpbmdIZWxwZXIuZ2V0VHJhY2VQYXJlbnQoKX0scz17bWF4V2FpdDppPy5tYXhXYWl0Pz90aGlzLl9lbmdpbmVDb25maWcudHJhbnNhY3Rpb25PcHRpb25zLm1heFdhaXQsdGltZW91dDppPy50aW1lb3V0Pz90aGlzLl9lbmdpbmVDb25maWcudHJhbnNhY3Rpb25PcHRpb25zLnRpbWVvdXQsaXNvbGF0aW9uTGV2ZWw6aT8uaXNvbGF0aW9uTGV2ZWw/P3RoaXMuX2VuZ2luZUNvbmZpZy50cmFuc2FjdGlvbk9wdGlvbnMuaXNvbGF0aW9uTGV2ZWx9LGE9YXdhaXQgdGhpcy5fZW5naW5lLnRyYW5zYWN0aW9uKFwic3RhcnRcIixvLHMpLGw7dHJ5e2xldCB1PXtraW5kOlwiaXR4XCIsLi4uYX07bD1hd2FpdCBuKHRoaXMuX2NyZWF0ZUl0eENsaWVudCh1KSksYXdhaXQgdGhpcy5fZW5naW5lLnRyYW5zYWN0aW9uKFwiY29tbWl0XCIsbyxhKX1jYXRjaCh1KXt0aHJvdyBhd2FpdCB0aGlzLl9lbmdpbmUudHJhbnNhY3Rpb24oXCJyb2xsYmFja1wiLG8sYSkuY2F0Y2goKCk9Pnt9KSx1fXJldHVybiBsfV9jcmVhdGVJdHhDbGllbnQobil7cmV0dXJuIGhlKFB0KGhlKFlhKHRoaXMpLFtyZShcIl9hcHBsaWVkUGFyZW50XCIsKCk9PnRoaXMuX2FwcGxpZWRQYXJlbnQuX2NyZWF0ZUl0eENsaWVudChuKSkscmUoXCJfY3JlYXRlUHJpc21hUHJvbWlzZVwiLCgpPT5DbyhuKSkscmUoamYsKCk9Pm4uaWQpXSkpLFtNcihybCldKX0kdHJhbnNhY3Rpb24obixpKXtsZXQgbzt0eXBlb2Ygbj09XCJmdW5jdGlvblwiP3RoaXMuX2VuZ2luZUNvbmZpZy5hZGFwdGVyPy5hZGFwdGVyTmFtZT09PVwiQHByaXNtYS9hZGFwdGVyLWQxXCI/bz0oKT0+e3Rocm93IG5ldyBFcnJvcihcIkNsb3VkZmxhcmUgRDEgZG9lcyBub3Qgc3VwcG9ydCBpbnRlcmFjdGl2ZSB0cmFuc2FjdGlvbnMuIFdlIHJlY29tbWVuZCB5b3UgdG8gcmVmYWN0b3IgeW91ciBxdWVyaWVzIHdpdGggdGhhdCBsaW1pdGF0aW9uIGluIG1pbmQsIGFuZCB1c2UgYmF0Y2ggdHJhbnNhY3Rpb25zIHdpdGggYHByaXNtYS4kdHJhbnNhY3Rpb25zKFtdKWAgd2hlcmUgYXBwbGljYWJsZS5cIil9Om89KCk9PnRoaXMuX3RyYW5zYWN0aW9uV2l0aENhbGxiYWNrKHtjYWxsYmFjazpuLG9wdGlvbnM6aX0pOm89KCk9PnRoaXMuX3RyYW5zYWN0aW9uV2l0aEFycmF5KHtwcm9taXNlczpuLG9wdGlvbnM6aX0pO2xldCBzPXtuYW1lOlwidHJhbnNhY3Rpb25cIixhdHRyaWJ1dGVzOnttZXRob2Q6XCIkdHJhbnNhY3Rpb25cIn19O3JldHVybiB0aGlzLl90cmFjaW5nSGVscGVyLnJ1bkluQ2hpbGRTcGFuKHMsbyl9X3JlcXVlc3Qobil7bi5vdGVsUGFyZW50Q3R4PXRoaXMuX3RyYWNpbmdIZWxwZXIuZ2V0QWN0aXZlQ29udGV4dCgpO2xldCBpPW4ubWlkZGxld2FyZUFyZ3NNYXBwZXI/P3FmLG89e2FyZ3M6aS5yZXF1ZXN0QXJnc1RvTWlkZGxld2FyZUFyZ3Mobi5hcmdzKSxkYXRhUGF0aDpuLmRhdGFQYXRoLHJ1bkluVHJhbnNhY3Rpb246ISFuLnRyYW5zYWN0aW9uLGFjdGlvbjpuLmFjdGlvbixtb2RlbDpuLm1vZGVsfSxzPXttaWRkbGV3YXJlOntuYW1lOlwibWlkZGxld2FyZVwiLG1pZGRsZXdhcmU6ITAsYXR0cmlidXRlczp7bWV0aG9kOlwiJHVzZVwifSxhY3RpdmU6ITF9LG9wZXJhdGlvbjp7bmFtZTpcIm9wZXJhdGlvblwiLGF0dHJpYnV0ZXM6e21ldGhvZDpvLmFjdGlvbixtb2RlbDpvLm1vZGVsLG5hbWU6by5tb2RlbD9gJHtvLm1vZGVsfS4ke28uYWN0aW9ufWA6by5hY3Rpb259fX0sYT0tMSxsPWFzeW5jIHU9PntsZXQgYz10aGlzLl9taWRkbGV3YXJlcy5nZXQoKythKTtpZihjKXJldHVybiB0aGlzLl90cmFjaW5nSGVscGVyLnJ1bkluQ2hpbGRTcGFuKHMubWlkZGxld2FyZSxTPT5jKHUsUD0+KFM/LmVuZCgpLGwoUCkpKSk7bGV0e3J1bkluVHJhbnNhY3Rpb246cCxhcmdzOmQsLi4uZn09dSxoPXsuLi5uLC4uLmZ9O2QmJihoLmFyZ3M9aS5taWRkbGV3YXJlQXJnc1RvUmVxdWVzdEFyZ3MoZCkpLG4udHJhbnNhY3Rpb24hPT12b2lkIDAmJnA9PT0hMSYmZGVsZXRlIGgudHJhbnNhY3Rpb247bGV0IGc9YXdhaXQgb2wodGhpcyxoKTtyZXR1cm4gaC5tb2RlbD9lbCh7cmVzdWx0OmcsbW9kZWxOYW1lOmgubW9kZWwsYXJnczpoLmFyZ3MsZXh0ZW5zaW9uczp0aGlzLl9leHRlbnNpb25zLHJ1bnRpbWVEYXRhTW9kZWw6dGhpcy5fcnVudGltZURhdGFNb2RlbCxnbG9iYWxPbWl0OnRoaXMuX2dsb2JhbE9taXR9KTpnfTtyZXR1cm4gdGhpcy5fdHJhY2luZ0hlbHBlci5ydW5JbkNoaWxkU3BhbihzLm9wZXJhdGlvbiwoKT0+bmV3IGd1LkFzeW5jUmVzb3VyY2UoXCJwcmlzbWEtY2xpZW50LXJlcXVlc3RcIikucnVuSW5Bc3luY1Njb3BlKCgpPT5sKG8pKSl9YXN5bmMgX2V4ZWN1dGVSZXF1ZXN0KHthcmdzOm4sY2xpZW50TWV0aG9kOmksZGF0YVBhdGg6byxjYWxsc2l0ZTpzLGFjdGlvbjphLG1vZGVsOmwsYXJnc01hcHBlcjp1LHRyYW5zYWN0aW9uOmMsdW5wYWNrZXI6cCxvdGVsUGFyZW50Q3R4OmQsY3VzdG9tRGF0YVByb3h5RmV0Y2g6Zn0pe3RyeXtuPXU/dShuKTpuO2xldCBoPXtuYW1lOlwic2VyaWFsaXplXCJ9LGc9dGhpcy5fdHJhY2luZ0hlbHBlci5ydW5JbkNoaWxkU3BhbihoLCgpPT5Nbih7bW9kZWxOYW1lOmwscnVudGltZURhdGFNb2RlbDp0aGlzLl9ydW50aW1lRGF0YU1vZGVsLGFjdGlvbjphLGFyZ3M6bixjbGllbnRNZXRob2Q6aSxjYWxsc2l0ZTpzLGV4dGVuc2lvbnM6dGhpcy5fZXh0ZW5zaW9ucyxlcnJvckZvcm1hdDp0aGlzLl9lcnJvckZvcm1hdCxjbGllbnRWZXJzaW9uOnRoaXMuX2NsaWVudFZlcnNpb24scHJldmlld0ZlYXR1cmVzOnRoaXMuX3ByZXZpZXdGZWF0dXJlcyxnbG9iYWxPbWl0OnRoaXMuX2dsb2JhbE9taXR9KSk7cmV0dXJuIE4uZW5hYmxlZChcInByaXNtYTpjbGllbnRcIikmJihycihcIlByaXNtYSBDbGllbnQgY2FsbDpcIikscnIoYHByaXNtYS4ke2l9KCR7cWEobil9KWApLHJyKFwiR2VuZXJhdGVkIHJlcXVlc3Q6XCIpLHJyKEpTT04uc3RyaW5naWZ5KGcsbnVsbCwyKStgXG5gKSksYz8ua2luZD09PVwiYmF0Y2hcIiYmYXdhaXQgYy5sb2NrLHRoaXMuX3JlcXVlc3RIYW5kbGVyLnJlcXVlc3Qoe3Byb3RvY29sUXVlcnk6Zyxtb2RlbE5hbWU6bCxhY3Rpb246YSxjbGllbnRNZXRob2Q6aSxkYXRhUGF0aDpvLGNhbGxzaXRlOnMsYXJnczpuLGV4dGVuc2lvbnM6dGhpcy5fZXh0ZW5zaW9ucyx0cmFuc2FjdGlvbjpjLHVucGFja2VyOnAsb3RlbFBhcmVudEN0eDpkLG90ZWxDaGlsZEN0eDp0aGlzLl90cmFjaW5nSGVscGVyLmdldEFjdGl2ZUNvbnRleHQoKSxnbG9iYWxPbWl0OnRoaXMuX2dsb2JhbE9taXQsY3VzdG9tRGF0YVByb3h5RmV0Y2g6Zn0pfWNhdGNoKGgpe3Rocm93IGguY2xpZW50VmVyc2lvbj10aGlzLl9jbGllbnRWZXJzaW9uLGh9fSRtZXRyaWNzPW5ldyBGcih0aGlzKTtfaGFzUHJldmlld0ZsYWcobil7cmV0dXJuISF0aGlzLl9lbmdpbmVDb25maWcucHJldmlld0ZlYXR1cmVzPy5pbmNsdWRlcyhuKX0kYXBwbHlQZW5kaW5nTWlncmF0aW9ucygpe3JldHVybiB0aGlzLl9lbmdpbmUuYXBwbHlQZW5kaW5nTWlncmF0aW9ucygpfSRleHRlbmRzPXphfXJldHVybiByfWZ1bmN0aW9uIG11KGUscil7cmV0dXJuIEJmKGUpP1tuZXcgb2UoZSxyKSxLbF06W2UsWWxdfWZ1bmN0aW9uIEJmKGUpe3JldHVybiBBcnJheS5pc0FycmF5KGUpJiZBcnJheS5pc0FycmF5KGUucmF3KX12YXIgVWY9bmV3IFNldChbXCJ0b0pTT05cIixcIiQkdHlwZW9mXCIsXCJhc3ltbWV0cmljTWF0Y2hcIixTeW1ib2wuaXRlcmF0b3IsU3ltYm9sLnRvU3RyaW5nVGFnLFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGUsU3ltYm9sLnRvUHJpbWl0aXZlXSk7ZnVuY3Rpb24gRXUoZSl7cmV0dXJuIG5ldyBQcm94eShlLHtnZXQocix0KXtpZih0IGluIHIpcmV0dXJuIHJbdF07aWYoIVVmLmhhcyh0KSl0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIGVudW0gdmFsdWU6ICR7U3RyaW5nKHQpfWApfX0pfWZ1bmN0aW9uIHd1KGUpe3N0KGUse2NvbmZsaWN0Q2hlY2s6XCJ3YXJuXCJ9KX0wJiYobW9kdWxlLmV4cG9ydHM9e0RNTUYsRGVidWcsRGVjaW1hbCxFeHRlbnNpb25zLE1ldHJpY3NDbGllbnQsUHJpc21hQ2xpZW50SW5pdGlhbGl6YXRpb25FcnJvcixQcmlzbWFDbGllbnRLbm93blJlcXVlc3RFcnJvcixQcmlzbWFDbGllbnRSdXN0UGFuaWNFcnJvcixQcmlzbWFDbGllbnRVbmtub3duUmVxdWVzdEVycm9yLFByaXNtYUNsaWVudFZhbGlkYXRpb25FcnJvcixQdWJsaWMsU3FsLGNyZWF0ZVBhcmFtLGRlZmluZURtbWZQcm9wZXJ0eSxkZXNlcmlhbGl6ZUpzb25SZXNwb25zZSxkZXNlcmlhbGl6ZVJhd1Jlc3VsdCxkbW1mVG9SdW50aW1lRGF0YU1vZGVsLGVtcHR5LGdldFByaXNtYUNsaWVudCxnZXRSdW50aW1lLGpvaW4sbWFrZVN0cmljdEVudW0sbWFrZVR5cGVkUXVlcnlGYWN0b3J5LG9iamVjdEVudW1WYWx1ZXMscmF3LHNlcmlhbGl6ZUpzb25RdWVyeSxza2lwLHNxbHRhZyx3YXJuRW52Q29uZmxpY3RzLHdhcm5PbmNlfSk7XG4vKiEgQnVuZGxlZCBsaWNlbnNlIGluZm9ybWF0aW9uOlxuXG5kZWNpbWFsLmpzL2RlY2ltYWwubWpzOlxuICAoKiFcbiAgICogIGRlY2ltYWwuanMgdjEwLjUuMFxuICAgKiAgQW4gYXJiaXRyYXJ5LXByZWNpc2lvbiBEZWNpbWFsIHR5cGUgZm9yIEphdmFTY3JpcHQuXG4gICAqICBodHRwczovL2dpdGh1Yi5jb20vTWlrZU1jbC9kZWNpbWFsLmpzXG4gICAqICBDb3B5cmlnaHQgKGMpIDIwMjUgTWljaGFlbCBNY2xhdWdobGluIDxNOGNoODhsQGdtYWlsLmNvbT5cbiAgICogIE1JVCBMaWNlbmNlXG4gICAqKVxuKi9cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpYnJhcnkuanMubWFwXG4iXSwibmFtZXMiOlsieHUiLCJPYmplY3QiLCJjcmVhdGUiLCJWdCIsImRlZmluZVByb3BlcnR5IiwidnUiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJQdSIsImdldE93blByb3BlcnR5TmFtZXMiLCJUdSIsImdldFByb3RvdHlwZU9mIiwiU3UiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIk9vIiwiZSIsInIiLCJuZSIsImV4cG9ydHMiLCJ0ciIsInQiLCJnZXQiLCJlbnVtZXJhYmxlIiwiX28iLCJuIiwiaSIsImNhbGwiLCJDIiwiX19lc01vZHVsZSIsInZhbHVlIiwiUnUiLCJ5aSIsIkZnIiwic3MiLCJwcm9jZXNzIiwiYXJndiIsInN0YXJ0c1dpdGgiLCJsZW5ndGgiLCJpbmRleE9mIiwidXMiLCJNZyIsImxzIiwiamMiLCJyZXF1aXJlIiwiYXMiLCJkZSIsImVudiIsIkciLCJRZSIsIkZPUkNFX0NPTE9SIiwiTWF0aCIsIm1pbiIsInBhcnNlSW50IiwiYmkiLCJsZXZlbCIsImhhc0Jhc2ljIiwiaGFzMjU2IiwiaGFzMTZtIiwiRWkiLCJURVJNIiwicGxhdGZvcm0iLCJyZWxlYXNlIiwic3BsaXQiLCJOdW1iZXIiLCJzb21lIiwiQ0lfTkFNRSIsInRlc3QiLCJURUFNQ0lUWV9WRVJTSU9OIiwiQ09MT1JURVJNIiwiVEVSTV9QUk9HUkFNX1ZFUlNJT04iLCJURVJNX1BST0dSQU0iLCJWYyIsImlzVFRZIiwic3VwcG9ydHNDb2xvciIsInN0ZG91dCIsImlzYXR0eSIsInN0ZGVyciIsImRzIiwiJGciLCJwcyIsIkJjIiwiYnIiLCJjcyIsImV4ZWMiLCJtYWpvciIsIm1pbm9yIiwicGF0Y2giLCJtYXAiLCJ3aSIsIkNJIiwiRk9SQ0VfSFlQRVJMSU5LIiwiTkVUTElGWSIsIm8iLCJzIiwiVlRFX1ZFUlNJT04iLCJhIiwibCIsInUiLCJzdXBwb3J0c0h5cGVybGluayIsIm1zIiwiemciLCJVYyIsIm5hbWUiLCJ2ZXJzaW9uIiwiZGVzY3JpcHRpb24iLCJtYWluIiwidHlwZXMiLCJyZXBvc2l0b3J5IiwidHlwZSIsInVybCIsImRpcmVjdG9yeSIsImhvbWVwYWdlIiwiYXV0aG9yIiwiYnVncyIsImxpY2Vuc2UiLCJzY3JpcHRzIiwiZGV2IiwiYnVpbGQiLCJwcmVwdWJsaXNoT25seSIsImZpbGVzIiwiZGV2RGVwZW5kZW5jaWVzIiwiYXJjaGl2ZXIiLCJkb3RlbnYiLCJlc2J1aWxkIiwiZXhlY2EiLCJnbG9iYnkiLCJqZXN0Iiwia2xldXIiLCJvcGVuIiwicmVzb2x2ZSIsInRlbXB5IiwidG1wIiwidHlwZXNjcmlwdCIsInlhcm4iLCJkZXBlbmRlbmNpZXMiLCJhcmciLCJwcm9tcHRzIiwicGVlckRlcGVuZGVuY2llcyIsInBlZXJEZXBlbmRlbmNpZXNNZXRhIiwib3B0aW9uYWwiLCJzaWRlRWZmZWN0cyIsIlNpIiwiYmgiLCJLYyIsInByaXNtYSIsImVuZ2luZXNWZXJzaW9uIiwib24iLCJubiIsImJzIiwiT2giLCJ5cyIsIm1hdGNoIiwicmVkdWNlIiwiRGkiLCJMaCIsInhzIiwiaW5kZW50IiwiaW5jbHVkZUVtcHR5TGluZXMiLCJUeXBlRXJyb3IiLCJyZXBsYWNlIiwicmVwZWF0IiwiU3MiLCIkaCIsIlRzIiwib25seUZpcnN0Iiwiam9pbiIsIlJlZ0V4cCIsIkxpIiwicWgiLCJScyIsIm9wIiwiQXMiLCJVaCIsInNwIiwiZGVmYXVsdCIsImxpbnQiLCJwcmV0ZXN0IiwicHJlcmVsZWFzZSIsImZ1bmRpbmciLCJrZXl3b3JkcyIsInJlYWRtZUZpbGVuYW1lIiwiZGVjYWNoZSIsInNpbm9uIiwic3RhbmRhcmQiLCJ0YXAiLCJlbmdpbmVzIiwibm9kZSIsImJyb3dzZXIiLCJmcyIsIk9zIiwiR2giLCJMZSIsIk1pIiwiJGkiLCJhcCIsImxwIiwidXAiLCJJcyIsImNwIiwicHAiLCJ0b1N0cmluZyIsInRyaW0iLCJkcCIsIkRzIiwiQiIsImNvbmZpZ0RvdGVudiIsInBhdGgiLCJwYXJzZWQiLCJFcnJvciIsImNvZGUiLCJrcyIsImZwIiwiZGVjcnlwdCIsImNpcGhlcnRleHQiLCJrZXkiLCJwYXJzZSIsIm1wIiwiY29uc29sZSIsImxvZyIsIm90IiwiRE9URU5WX0tFWSIsIlVSTCIsInBhc3N3b3JkIiwic2VhcmNoUGFyYW1zIiwidG9VcHBlckNhc2UiLCJBcnJheSIsImlzQXJyYXkiLCJleGlzdHNTeW5jIiwiZW5kc1dpdGgiLCJjd2QiLCJDcyIsImhvbWVkaXIiLCJzbGljZSIsImdwIiwiZGVidWciLCJfcGFyc2VWYXVsdCIsInByb2Nlc3NFbnYiLCJwb3B1bGF0ZSIsImhwIiwiZW5jb2RpbmciLCJwdXNoIiwicmVhZEZpbGVTeW5jIiwibWVzc2FnZSIsImVycm9yIiwieXAiLCJfY29uZmlnVmF1bHQiLCJicCIsIkJ1ZmZlciIsImZyb20iLCJzdWJhcnJheSIsImNyZWF0ZURlY2lwaGVyaXYiLCJzZXRBdXRoVGFnIiwidXBkYXRlIiwiZmluYWwiLCJSYW5nZUVycm9yIiwiYyIsIkVwIiwib3ZlcnJpZGUiLCJrZXlzIiwiY29uZmlnIiwiRnMiLCJZaCIsImNuIiwicmVwb1VybCIsInVzZXIiLCJyZXBvIiwic2V0IiwiS2kiLCJBYiIsIm9hIiwiY2hhckNvZGVBdCIsInAiLCJkIiwiZiIsImgiLCJnIiwiUyIsIlAiLCJSIiwiYiIsIkQiLCJtZSIsImNhIiwicGEiLCJHZiIsIkRNTUYiLCJjdCIsIkRlYnVnIiwiTiIsIkRlY2ltYWwiLCJ2ZSIsIkV4dGVuc2lvbnMiLCJpaSIsIk1ldHJpY3NDbGllbnQiLCJGciIsIlByaXNtYUNsaWVudEluaXRpYWxpemF0aW9uRXJyb3IiLCJUIiwiUHJpc21hQ2xpZW50S25vd25SZXF1ZXN0RXJyb3IiLCJ6IiwiUHJpc21hQ2xpZW50UnVzdFBhbmljRXJyb3IiLCJsZSIsIlByaXNtYUNsaWVudFVua25vd25SZXF1ZXN0RXJyb3IiLCJqIiwiUHJpc21hQ2xpZW50VmFsaWRhdGlvbkVycm9yIiwiWiIsIlB1YmxpYyIsIm9pIiwiU3FsIiwib2UiLCJjcmVhdGVQYXJhbSIsIkFhIiwiZGVmaW5lRG1tZlByb3BlcnR5IiwiX2EiLCJkZXNlcmlhbGl6ZUpzb25SZXNwb25zZSIsIlRyIiwiZGVzZXJpYWxpemVSYXdSZXN1bHQiLCJlaSIsImRtbWZUb1J1bnRpbWVEYXRhTW9kZWwiLCJYcyIsImVtcHR5IiwiRmEiLCJnZXRQcmlzbWFDbGllbnQiLCJidSIsImdldFJ1bnRpbWUiLCJHbiIsIkxhIiwibWFrZVN0cmljdEVudW0iLCJFdSIsIm1ha2VUeXBlZFF1ZXJ5RmFjdG9yeSIsIk5hIiwib2JqZWN0RW51bVZhbHVlcyIsImtuIiwicmF3IiwiaW8iLCJzZXJpYWxpemVKc29uUXVlcnkiLCJNbiIsInNraXAiLCJGbiIsInNxbHRhZyIsIm9vIiwid2FybkVudkNvbmZsaWN0cyIsInd1Iiwid2Fybk9uY2UiLCJhdCIsIm1vZHVsZSIsImRlZmluZUV4dGVuc2lvbiIsIk5vIiwiZ2V0RXh0ZW5zaW9uQ29udGV4dCIsIkxvIiwiJGV4dGVuZHMiLCJ2YWxpZGF0b3IiLCJGbyIsIkJ0IiwiJCIsIlZvIiwiYmdCbGFjayIsIkZ1IiwiYmdCbHVlIiwianUiLCJiZ0N5YW4iLCJCdSIsImJnR3JlZW4iLCIkdSIsImJnTWFnZW50YSIsIlZ1IiwiYmdSZWQiLCJNdSIsImJnV2hpdGUiLCJVdSIsImJnWWVsbG93IiwicXUiLCJibGFjayIsIk91IiwiYmx1ZSIsIm5yIiwiYm9sZCIsIlciLCJjeWFuIiwiRGUiLCJkaW0iLCJJZSIsImdyYXkiLCJLciIsImdyZWVuIiwicWUiLCJncmV5IiwiTHUiLCJoaWRkZW4iLCJrdSIsImludmVyc2UiLCJJdSIsIml0YWxpYyIsIkN1IiwibWFnZW50YSIsIl91IiwicmVkIiwiY2UiLCJyZXNldCIsIkF1Iiwic3RyaWtldGhyb3VnaCIsIkR1IiwidW5kZXJsaW5lIiwiWSIsIndoaXRlIiwiTnUiLCJ5ZWxsb3ciLCJrZSIsInNpIiwiTW8iLCIkbyIsInFvIiwiam8iLCJOT0RFX0RJU0FCTEVfQ09MT1JTIiwiTk9fQ09MT1IiLCJlbmFibGVkIiwiRiIsIkd1IiwiQm8iLCJZciIsIlVvIiwiRGF0ZSIsIm5vdyIsIlF1IiwiYWkiLCJnbG9iYWxUaGlzIiwiREVCVUciLCJERUJVR19DT0xPUlMiLCJ6ciIsImVuYWJsZSIsImRpc2FibGUiLCJ3YXJuIiwiZm9ybWF0dGVycyIsIld1IiwiY29sb3IiLCJuYW1lc3BhY2UiLCJleHRlbmQiLCJzaGlmdCIsIkp1IiwiUHJveHkiLCJTZXQiLCJKU09OIiwic3RyaW5naWZ5IiwiaGFzIiwiYWRkIiwiR28iLCJRbyIsImdyIiwiV28iLCJsaSIsIlBSSVNNQV9RVUVSWV9FTkdJTkVfTElCUkFSWSIsImFyY2giLCJ1aSIsIlV0IiwiR3QiLCJpbmNsdWRlcyIsIllvIiwiZmkiLCJLdCIsIk9lIiwiU3ltYm9sIiwiZm9yIiwiSHUiLCJXdCIsImNpIiwiUXQiLCJFZSIsIm1hdGNoZWQiLCJzZWxlY3Rpb25zIiwiZm9yRWFjaCIsImV2ZXJ5IiwiUmVmbGVjdCIsIm93bktleXMiLCJtYXRjaGVyVHlwZSIsImlzIiwiR2UiLCJnZXRTZWxlY3Rpb25LZXlzIiwiWnIiLCJ2YWx1ZXMiLCJjb25jYXQiLCJwZSIsImFzc2lnbiIsIkt1IiwiYW5kIiwicSIsIm9yIiwiWXUiLCJzZWxlY3QiLCJKbyIsIkkiLCJ5ZSIsImplIiwiVmUiLCJuZyIsIkJlIiwibWluTGVuZ3RoIiwibWF4TGVuZ3RoIiwicmVnZXgiLCJpZyIsImJlIiwiYmV0d2VlbiIsImx0IiwiZ3QiLCJsdGUiLCJndGUiLCJpbnQiLCJpc0ludGVnZXIiLCJmaW5pdGUiLCJpc0Zpbml0ZSIsInBvc2l0aXZlIiwibmVnYXRpdmUiLCJvZyIsIlVlIiwic2ciLCJhZyIsImxnIiwidWciLCJjZyIsInBpIiwiY29uc3RydWN0b3IiLCJpbnB1dCIsImRpIiwiaHIiLCJtaSIsInN0YXRlIiwid2l0aCIsIndoZW4iLCJvdGhlcndpc2UiLCJleGhhdXN0aXZlIiwicnVuIiwicmV0dXJuVHlwZSIsInpvIiwienUiLCJadSIsIlBSSVNNQV9ESVNBQkxFX1dBUk5JTkdTIiwiSnQiLCJYdSIsInByb21pc2lmeSIsImVlIiwiZWMiLCJabyIsIll0IiwidGFyZ2V0RGlzdHJvIiwidGMiLCJjYyIsImljIiwiYXJjaEZyb21VbmFtZSIsImZhbWlseURpc3RybyIsImxpYnNzbCIsIm9jIiwicmMiLCJ0b0xvd2VyQ2FzZSIsImlkIiwiaWRMaWtlIiwib3JpZ2luYWxEaXN0cm8iLCJyZWFkRmlsZSIsIm5jIiwiWG8iLCJIbyIsInJzIiwiS28iLCJzdHJhdGVneSIsInNjIiwicmVhZGRpciIsImZpbmQiLCJpciIsImJpbmFyeVRhcmdldCIsImVzIiwiYWMiLCJnaSIsIm1lbW9pemVkIiwiSHQiLCJQcm9taXNlIiwibGMiLCJ1YyIsIm1hY2hpbmUiLCJYdCIsImJlZXAiLCJGYyIsImNsZWFyU2NyZWVuIiwiT2MiLCJjbGVhclRlcm1pbmFsIiwiX2MiLCJjdXJzb3JCYWNrd2FyZCIsInljIiwiY3Vyc29yRG93biIsImdjIiwiY3Vyc29yRm9yd2FyZCIsImhjIiwiY3Vyc29yR2V0UG9zaXRpb24iLCJ3YyIsImN1cnNvckhpZGUiLCJQYyIsImN1cnNvckxlZnQiLCJjdXJzb3JNb3ZlIiwiZmMiLCJjdXJzb3JOZXh0TGluZSIsInhjIiwiY3Vyc29yUHJldkxpbmUiLCJ2YyIsImN1cnNvclJlc3RvcmVQb3NpdGlvbiIsIkVjIiwiY3Vyc29yU2F2ZVBvc2l0aW9uIiwiYmMiLCJjdXJzb3JTaG93IiwiVGMiLCJjdXJzb3JUbyIsIm1jIiwiY3Vyc29yVXAiLCJucyIsImVudGVyQWx0ZXJuYXRpdmVTY3JlZW4iLCJOYyIsImVyYXNlRG93biIsIkNjIiwiZXJhc2VFbmRMaW5lIiwiUmMiLCJlcmFzZUxpbmUiLCJvcyIsImVyYXNlTGluZXMiLCJTYyIsImVyYXNlU2NyZWVuIiwiaGkiLCJlcmFzZVN0YXJ0TGluZSIsIkFjIiwiZXJhc2VVcCIsIkljIiwiZXhpdEFsdGVybmF0aXZlU2NyZWVuIiwiTGMiLCJpVGVybSIsInFjIiwiaW1hZ2UiLCIkYyIsImxpbmsiLCJNYyIsInNjcm9sbERvd24iLCJEYyIsInNjcm9sbFVwIiwia2MiLCJadCIsInp0Iiwid2luZG93IiwiZG9jdW1lbnQiLCJiZyIsInZlcnNpb25zIiwiRWciLCJidW4iLCJ3ZyIsIkRlbm8iLCJkZW5vIiwieGciLCJlbGVjdHJvbiIsInZnIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiUGciLCJXb3JrZXJHbG9iYWxTY29wZSIsIlRnIiwiRGVkaWNhdGVkV29ya2VyR2xvYmFsU2NvcGUiLCJTZyIsIlNoYXJlZFdvcmtlckdsb2JhbFNjb3BlIiwiUmciLCJTZXJ2aWNlV29ya2VyR2xvYmFsU2NvcGUiLCJYciIsInVzZXJBZ2VudERhdGEiLCJBZyIsIkNnIiwiSWciLCJrZyIsIm1heFRvdWNoUG9pbnRzIiwiRGciLCJrIiwicnQiLCJ5ciIsImV0IiwidHMiLCJwYyIsImRjIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzZXJ2ZUFzcGVjdFJhdGlvIiwic2V0Q3dkIiwiYW5ub3RhdGlvbiIsIngiLCJ5IiwicmVwbGFjZUFsbCIsImlzSGlkZGVuIiwiZW4iLCJ0YXJnZXQiLCJmYWxsYmFjayIsImlzU3VwcG9ydGVkIiwieGkiLCJHYyIsInZpIiwiRXIiLCJRYyIsImVuZ2luZVR5cGUiLCJXYyIsIlBSSVNNQV9DTElFTlRfRU5HSU5FX1RZUEUiLCJwcmV2aWV3RmVhdHVyZXMiLCJQaSIsImNhdXNlIiwicm4iLCJvayIsImZsYXRNYXAiLCJzciIsIlRpIiwiY29uc3VtZUVycm9yIiwicmVnaXN0ZXJlZEVycm9ycyIsInJlZ2lzdGVyTmV3RXJyb3IiLCJ0biIsImFkYXB0ZXJOYW1lIiwiZXJyb3JSZWdpc3RyeSIsInF1ZXJ5UmF3IiwiX2UiLCJiaW5kIiwiZXhlY3V0ZVJhdyIsImV4ZWN1dGVTY3JpcHQiLCJkaXNwb3NlIiwicHJvdmlkZXIiLCJzdGFydFRyYW5zYWN0aW9uIiwiSmMiLCJnZXRDb25uZWN0aW9uSW5mbyIsIkhjIiwib3B0aW9ucyIsImNvbW1pdCIsInJvbGxiYWNrIiwia2luZCIsIlljIiwiTSIsInpjIiwiUGgiLCJncyIsIl9fZGlybmFtZSIsIlRoIiwiUmkiLCJocyIsIkFpIiwic3RhdFN5bmMiLCJtb2RlIiwiY2htb2RTeW5jIiwiQ2kiLCJwbGF0Zm9ybUluZm8iLCJFcyIsIklpIiwid3MiLCJzbiIsImFuIiwia2kiLCJob3N0IiwidnMiLCJfaSIsIlN0cmluZyIsIk9pIiwiZnJvbUVudlZhciIsImJpbmFyeVRhcmdldHMiLCJaYyIsIlhjIiwibmF0aXZlIiwibWF4IiwiZW50cmllcyIsInBhZEVuZCIsImVwIiwibnQiLCJucCIsImluZm8iLCJ0cCIsInJwIiwicXVlcnkiLCJpcCIsInNob3VsZCIsIlBzIiwidGFncyIsInR0IiwiTmkiLCJsbiIsIk5lIiwiaXQiLCJGaSIsInNlcCIsInBvc2l4IiwiamkiLCJ1biIsIndyIiwiX3MiLCJpZ25vcmVQcm9jZXNzRW52Iiwic3Vic3RyaW5nIiwicWkiLCJzdCIsInJvb3RFbnZQYXRoIiwic2NoZW1hRW52UGF0aCIsImNvbmZsaWN0Q2hlY2siLCJOcyIsIndwIiwiTHMiLCJkb3RlbnZSZXN1bHQiLCJmaWx0ZXIiLCJCb29sZWFuIiwicmVsYXRpdmUiLCJ4cCIsIkRPVEVOVl9DT05GSUdfREVCVUciLCJWaSIsInhyIiwiQmkiLCJjb25maWd1cmFibGUiLCJNcyIsImNsaWVudFZlcnNpb24iLCJlcnJvckNvZGUiLCJjYXB0dXJlU3RhY2tUcmFjZSIsInRvU3RyaW5nVGFnIiwibWV0YSIsImJhdGNoUmVxdWVzdElkeCIsIndyaXRhYmxlIiwidnIiLCJLZSIsIlVpIiwiZm4iLCJnbiIsIkdpIiwicHJlY2lzaW9uIiwicm91bmRpbmciLCJtb2R1bG8iLCJ0b0V4cE5lZyIsInRvRXhwUG9zIiwibWluRSIsIm1heEUiLCJjcnlwdG8iLCJWcyIsIkZlIiwidyIsInluIiwiSGUiLCJCcyIsIlVzIiwiR3MiLCJYIiwiZmxvb3IiLCJVIiwicG93IiwidnAiLCJQcCIsIlRwIiwiUXMiLCJmZSIsIkUiLCJTcCIsIlJwIiwiUWkiLCJtIiwiYWJzb2x1dGVWYWx1ZSIsImFicyIsImNlaWwiLCJjbGFtcGVkVG8iLCJjbGFtcCIsIk5hTiIsImNtcCIsImNvbXBhcmVkVG8iLCJjb3NpbmUiLCJjb3MiLCJzZCIsIkFwIiwiWXMiLCJuZWciLCJjdWJlUm9vdCIsImNicnQiLCJpc1plcm8iLCJKIiwidG9FeHBvbmVudGlhbCIsInRpbWVzIiwicGx1cyIsIkwiLCJlcSIsImNoYXJBdCIsImRlY2ltYWxQbGFjZXMiLCJkaXZpZGVkQnkiLCJkaXYiLCJkaXZpZGVkVG9JbnRlZ2VyQnkiLCJkaXZUb0ludCIsImVxdWFscyIsImdyZWF0ZXJUaGFuIiwiZ3JlYXRlclRoYW5PckVxdWFsVG8iLCJoeXBlcmJvbGljQ29zaW5lIiwiY29zaCIsIkVuIiwiUHIiLCJtaW51cyIsImh5cGVyYm9saWNTaW5lIiwic2luaCIsInNxcnQiLCJoeXBlcmJvbGljVGFuZ2VudCIsInRhbmgiLCJpbnZlcnNlQ29zaW5lIiwiYWNvcyIsImlzTmVnIiwid2UiLCJhdGFuIiwiaW52ZXJzZUh5cGVyYm9saWNDb3NpbmUiLCJhY29zaCIsImludmVyc2VIeXBlcmJvbGljU2luZSIsImFzaW5oIiwiaW52ZXJzZUh5cGVyYm9saWNUYW5nZW50IiwiYXRhbmgiLCJpbnZlcnNlU2luZSIsImFzaW4iLCJpbnZlcnNlVGFuZ2VudCIsImlzSW50IiwiaXNOYU4iLCJpc05lZ2F0aXZlIiwiaXNQb3NpdGl2ZSIsImlzUG9zIiwibGVzc1RoYW4iLCJsZXNzVGhhbk9yRXF1YWxUbyIsImxvZ2FyaXRobSIsIkplIiwiaG4iLCJzdWIiLCJyZXZlcnNlIiwicG9wIiwiYm4iLCJtb2QiLCJuYXR1cmFsRXhwb25lbnRpYWwiLCJleHAiLCJXaSIsIm5hdHVyYWxMb2dhcml0aG0iLCJuZWdhdGVkIiwidW5zaGlmdCIsIldzIiwicm91bmQiLCJzaW5lIiwic2luIiwiSXAiLCJzcXVhcmVSb290IiwidGFuZ2VudCIsInRhbiIsIm11bCIsInRvQmluYXJ5IiwiSmkiLCJ0b0RlY2ltYWxQbGFjZXMiLCJ0b0RQIiwiaWUiLCJ4ZSIsInRvRml4ZWQiLCJ0b0ZyYWN0aW9uIiwidG9IZXhhZGVjaW1hbCIsInRvSGV4IiwidG9OZWFyZXN0IiwidG9OdW1iZXIiLCJ0b09jdGFsIiwidG9Qb3dlciIsIkpzIiwiTE4xMCIsInRvUHJlY2lzaW9uIiwidG9TaWduaWZpY2FudERpZ2l0cyIsInRvU0QiLCJ0cnVuY2F0ZWQiLCJ0cnVuYyIsInZhbHVlT2YiLCJ0b0pTT04iLCJXZSIsImRuIiwiYWUiLCJIciIsIlYiLCJ0ZSIsIkNlIiwiSCIsImZyIiwianQiLCJuaSIsIksiLCJfIiwiS3MiLCJxcyIsIiRzIiwiSHMiLCJtbiIsInNlYXJjaCIsIkNwIiwiYXIiLCJrcCIsIkRwIiwiT3AiLCJfcCIsIk5wIiwiTHAiLCJGcCIsIk1wIiwiJHAiLCJxcCIsImpwIiwiVnAiLCJCcCIsImRlZmF1bHRzIiwiZ2V0UmFuZG9tVmFsdWVzIiwicmFuZG9tQnl0ZXMiLCJVcCIsIkdwIiwienMiLCJqcyIsIlJPVU5EX1VQIiwiUk9VTkRfRE9XTiIsIlJPVU5EX0NFSUwiLCJST1VORF9GTE9PUiIsIlJPVU5EX0hBTEZfVVAiLCJST1VORF9IQUxGX0RPV04iLCJST1VORF9IQUxGX0VWRU4iLCJST1VORF9IQUxGX0NFSUwiLCJST1VORF9IQUxGX0ZMT09SIiwiRVVDTElEIiwiY2xvbmUiLCJpc0RlY2ltYWwiLCJhdGFuMiIsIlFwIiwiV3AiLCJKcCIsImh5cG90IiwiSHAiLCJLcCIsIllwIiwibG9nMTAiLCJacCIsImxvZzIiLCJ6cCIsIlhwIiwiZWQiLCJyZCIsInRkIiwibmQiLCJyYW5kb20iLCJvZCIsInNpZ24iLCJhZCIsImxkIiwidWQiLCJjZCIsInN1bSIsInBkIiwiZGQiLCJtZCIsImZkIiwiYXJndW1lbnRzIiwiVWludDMyQXJyYXkiLCJjb3B5IiwiZ2QiLCJoZCIsIiR0eXBlIiwiQmlnSW50IiwiYnVmZmVyIiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJVaW50OEFycmF5IiwiUGUiLCJfbWFwIiwiZ2V0T3JDcmVhdGUiLCJNYXAiLCJZZSIsIlpzIiwidXQiLCJtb2RlbHMiLCJIaSIsImVudW1zIiwiU3IiLCJ3biIsIlJyIiwiTW9kZWxBY3Rpb24iLCJBciIsImRhdGFtb2RlbEVudW1Ub1NjaGVtYUVudW0iLCJ5ZCIsImZpbmRVbmlxdWUiLCJmaW5kVW5pcXVlT3JUaHJvdyIsImZpbmRGaXJzdCIsImZpbmRGaXJzdE9yVGhyb3ciLCJmaW5kTWFueSIsImNyZWF0ZU1hbnkiLCJjcmVhdGVNYW55QW5kUmV0dXJuIiwidXBkYXRlTWFueSIsInVwZGF0ZU1hbnlBbmRSZXR1cm4iLCJ1cHNlcnQiLCJkZWxldGUiLCJkZWxldGVNYW55IiwiZ3JvdXBCeSIsImNvdW50IiwiYWdncmVnYXRlIiwiZmluZFJhdyIsImFnZ3JlZ2F0ZVJhdyIsImlhIiwibmEiLCJlYSIsImtleXdvcmQiLCJlbnRpdHkiLCJwdW5jdHVhdGlvbiIsImRpcmVjdGl2ZSIsImZ1bmN0aW9uIiwidmFyaWFibGUiLCJzdHJpbmciLCJib29sZWFuIiwibnVtYmVyIiwiY29tbWVudCIsImJkIiwieG4iLCJFZCIsInYiLCJtYW51YWwiLCJQcmlzbSIsImRpc2FibGVXb3JrZXJNZXNzYWdlSGFuZGxlciIsInV0aWwiLCJlbmNvZGUiLCJnZSIsImNvbnRlbnQiLCJhbGlhcyIsIm9iaklkIiwiX19pZCIsImxhbmd1YWdlcyIsImluc2VydEJlZm9yZSIsIkRGUyIsInBsdWdpbnMiLCJoaWdobGlnaHQiLCJncmFtbWFyIiwibGFuZ3VhZ2UiLCJob29rcyIsInRva2VucyIsInRva2VuaXplIiwibWF0Y2hHcmFtbWFyIiwiaW5zaWRlIiwibG9va2JlaGluZCIsImdyZWVkeSIsInBhdHRlcm4iLCJnbG9iYWwiLCJzb3VyY2UiLCJsYXN0SW5kZXgiLCJpbmRleCIsInNwbGljZSIsImFwcGx5IiwicmVzdCIsImFsbCIsIlRva2VuIiwiY2xpa2UiLCJvcGVyYXRvciIsImphdmFzY3JpcHQiLCJwYXJhbWV0ZXIiLCJjb25zdGFudCIsIm1hcmt1cCIsInRhZyIsImFkZElubGluZWQiLCJidWlsdGluIiwid2QiLCJyYSIsInhkIiwidGEiLCJ2biIsInJlYWQiLCJmcm9tQ29udGVudCIsImZpcnN0TGluZU51bWJlciIsImxpbmVzIiwibGFzdExpbmVOdW1iZXIiLCJtYXBMaW5lQXQiLCJtYXBMaW5lcyIsImxpbmVBdCIsInByZXBlbmRTeW1ib2xBdCIsInZkIiwiaGlnaGxpZ2h0U291cmNlIiwiUGQiLCJUZCIsIm9yaWdpbmFsTWV0aG9kIiwiaXNQYW5pYyIsImNhbGxBcmd1bWVudHMiLCJmdW5jdGlvbk5hbWUiLCJTZCIsImNhbGxzaXRlIiwiZ2V0TG9jYXRpb24iLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwiZmlsZU5hbWUiLCJBZCIsIlJkIiwibG9jYXRpb24iLCJvcGVuaW5nQnJhY2VJbmRleCIsImNvbnRleHRMaW5lcyIsInBhZFN0YXJ0IiwibGFzdEluZGV4T2YiLCJDZCIsIklkIiwiUG4iLCJzaG93Q29sb3JzIiwibWEiLCJsYSIsInVhIiwia2QiLCJPZCIsIlRuIiwiYWRkRXJyb3JNZXNzYWdlIiwiZXJyb3JzIiwic2VsZWN0aW9uUGF0aCIsImFyZ3VtZW50UGF0aCIsImFyZ3VtZW50IiwidHlwZU5hbWVzIiwiRGQiLCJzYSIsImFhIiwidWUiLCJpc1JlcXVpcmVkIiwibWFrZVJlcXVpcmVkIiwid3JpdGUiLCJjb2xvcnMiLCJjb250ZXh0IiwiYWRkTWFyZ2luU3ltYm9sIiwiQ3IiLCJjdXJyZW50TGluZSIsImN1cnJlbnRJbmRlbnQiLCJ3cml0ZUpvaW5lZCIsIndyaXRlTGluZSIsIm5ld0xpbmUiLCJpbmRlbnRlZEN1cnJlbnRMaW5lIiwibWFyZ2luU3ltYm9sIiwiYWZ0ZXJOZXh0TmV3TGluZUNhbGxiYWNrIiwid2l0aEluZGVudCIsInVuaW5kZW50IiwiYWZ0ZXJOZXh0TmV3bGluZSIsImdldEN1cnJlbnRMaW5lTGVuZ3RoIiwiU24iLCJtYXJrQXNFcnJvciIsIlJuIiwiQW4iLCJkYSIsIklyIiwiVGUiLCJpc1VuZGVybGluZWQiLCJjb250ZW50cyIsInNldENvbG9yIiwiemUiLCJoYXNFcnJvciIsImtyIiwiYWRkSXRlbSIsIml0ZW1zIiwiZ2V0RmllbGQiLCJnZXRQcmludFdpZHRoIiwid3JpdGVFbXB0eSIsIndyaXRlV2l0aEl0ZW1zIiwiYXNPYmplY3QiLCJEciIsImFkZEZpZWxkIiwiZmllbGRzIiwiYWRkU3VnZ2VzdGlvbiIsInN1Z2dlc3Rpb25zIiwiZ2V0RGVlcEZpZWxkIiwiZ2V0RGVlcEZpZWxkVmFsdWUiLCJoYXNGaWVsZCIsInJlbW92ZUFsbEZpZWxkcyIsInJlbW92ZUZpZWxkIiwiZ2V0RmllbGRzIiwiaXNFbXB0eSIsImdldEZpZWxkVmFsdWUiLCJnZXREZWVwU3ViU2VsZWN0aW9uVmFsdWUiLCJnZXRTdWJTZWxlY3Rpb25WYWx1ZSIsImdldERlZXBTZWxlY3Rpb25QYXJlbnQiLCJnZXRTZWxlY3Rpb25QYXJlbnQiLCJ3cml0ZVdpdGhDb250ZW50cyIsIlEiLCJ0ZXh0IiwicHQiLCJfZCIsIk5kIiwiTGQiLCJxZCIsImpkIiwiVmQiLCJCZCIsIlVkIiwiR2QiLCJRZCIsIldkIiwiSmQiLCJIZCIsImZpcnN0RmllbGQiLCJzZWNvbmRGaWVsZCIsIk9yIiwib3V0cHV0VHlwZSIsImlzUmVsYXRpb24iLCJkdCIsIkZkIiwiTWQiLCIkZCIsImhhIiwieWEiLCJwYXJlbnRLaW5kIiwiZmllbGQiLCJwYXJlbnQiLCJLZCIsIllkIiwiZmllbGROYW1lIiwidW5kZXJseWluZ0Vycm9yIiwiemQiLCJmYSIsImJhIiwiaW5wdXRUeXBlIiwiWGQiLCJpbnB1dFR5cGVzIiwiZ2EiLCJkZXBlbmRlbnRBcmd1bWVudFBhdGgiLCJlbGVtZW50VHlwZSIsIkNuIiwiaW5mZXJyZWRUeXBlIiwiY29uc3RyYWludHMiLCJtaW5GaWVsZENvdW50IiwicmVxdWlyZWRGaWVsZHMiLCJtYXhGaWVsZENvdW50IiwiWmQiLCJtdCIsIm1vZGVsTmFtZSIsInR5cGVOYW1lIiwiaXNMaXN0IiwiaXNFbnVtIiwiX3RvR3JhcGhRTElucHV0VHlwZSIsIl9yIiwiSW4iLCJ6aSIsIldlYWtNYXAiLCJNZSIsIl9nZXROYW1lIiwiX2dldE5hbWVzcGFjZSIsImZ0IiwiWmkiLCJodCIsInl0IiwiY2xhc3NlcyIsIkRiTnVsbCIsIkpzb25OdWxsIiwiQW55TnVsbCIsImluc3RhbmNlcyIsIkVhIiwiRG4iLCJYaSIsImVycm9yTWVzc2FnZXMiLCJyZW5kZXJBbGxNZXNzYWdlcyIsIk5yIiwid2EiLCJ4YSIsImlzQnVmZmVyIiwidG9JU09TdHJpbmciLCJlbSIsIk9uIiwiYXJncyIsIl9uIiwiZXJyb3JGb3JtYXQiLCJnbG9iYWxPbWl0IiwiU2UiLCJQYSIsInJlc3VsdCIsIiRhbGxNb2RlbHMiLCJybSIsInZhIiwibmVlZHMiLCJjb21wdXRlIiwidG0iLCJUYSIsIlNhIiwiTm4iLCJjb21wdXRlZEZpZWxkc0NhY2hlIiwibW9kZWxFeHRlbnNpb25zQ2FjaGUiLCJxdWVyeUNhbGxiYWNrc0NhY2hlIiwiY2xpZW50RXh0ZW5zaW9ucyIsImV4dGVuc2lvbiIsImNsaWVudCIsInByZXZpb3VzIiwiZ2V0QWxsQ2xpZW50RXh0ZW5zaW9ucyIsImJhdGNoQ2FsbGJhY2tzIiwiZ2V0QWxsQmF0Y2hRdWVyeUNhbGxiYWNrcyIsIiRfX2ludGVybmFsQmF0Y2giLCJnZXRBbGxDb21wdXRlZEZpZWxkcyIsImdldEFsbE1vZGVsRXh0ZW5zaW9ucyIsIm1vZGVsIiwiZ2V0QWxsUXVlcnlDYWxsYmFja3MiLCIkYWxsT3BlcmF0aW9ucyIsIkxyIiwiaGVhZCIsInNpbmdsZSIsImFwcGVuZCIsIkxuIiwiUmEiLCJDYSIsImJ0IiwiaWZVbmRlZmluZWQiLCJSZSIsIm5tIiwicnVuQ29tbWFuZFJhdyIsIklhIiwiYWN0aW9uIiwicnVudGltZURhdGFNb2RlbCIsImV4dGVuc2lvbnMiLCJjbGllbnRNZXRob2QiLCJlbyIsInJvb3RBcmdzIiwiRXQiLCJpbmNsdWRlIiwib21pdCIsIkRhIiwic2VsZWN0aW9uIiwiaW0iLCJ0aHJvd1ZhbGlkYXRpb25FcnJvciIsImdldFNlbGVjdGlvblBhdGgiLCJsbSIsIm9tIiwibW9kZWxPclR5cGUiLCJpc1Jhd0FjdGlvbiIsIiRjb21wb3NpdGVzIiwiJHNjYWxhcnMiLCJzbSIsImFtIiwibmVzdFNlbGVjdGlvbiIsInJvIiwiZmluZEZpZWxkIiwiZ2V0T3V0cHV0VHlwZURlc2NyaXB0aW9uIiwiZ2V0Q29tcHV0ZWRGaWVsZHMiLCJnZXRHbG9iYWxPbWl0Iiwia2EiLCJnZXRBcmd1bWVudFBhdGgiLCJnZXRBcmd1bWVudE5hbWUiLCJfcmVmIiwiX2NvbnRhaW5lciIsInVtIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJjbSIsInBtIiwibmVzdEFyZ3VtZW50IiwiaXNQcmV2aWV3RmVhdHVyZU9uIiwiX19wcmlzbWFSYXdQYXJhbWV0ZXJzX18iLCJwYXJhbXMiLCJzaG91bGRBcHBseUdsb2JhbE9taXQiLCJPYSIsIl9oYXNQcmV2aWV3RmxhZyIsIl9jbGllbnRWZXJzaW9uIiwiX2NsaWVudCIsInByb21ldGhldXMiLCJfZW5naW5lIiwibWV0cmljcyIsImZvcm1hdCIsImpzb24iLCJkbSIsImRhdGFtb2RlbCIsInRvIiwibm8iLCIkbiIsInd0Iiwic3FsIiwicW4iLCJmdSIsImd1IiwiaHUiLCJ5dSIsInRpIiwic3RyaW5ncyIsInN0YXRlbWVudCIsImluc3BlY3QiLCJmaWxsIiwieHQiLCJnZXRLZXlzIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInJlIiwibHIiLCJnZXRQcm9wZXJ0eURlc2NyaXB0b3IiLCJqbiIsIlZuIiwiTWEiLCJoZSIsIm1tIiwiJGEiLCJNciIsIiRyIiwiYmF0Y2giLCJ0cmFuc2FjdGlvbiIsImlzb2xhdGlvbkxldmVsIiwicWEiLCJmbSIsInFyIiwidXNlcl9mYWNpbmdfZXJyb3IiLCJlcnJvcl9jb2RlIiwiZ20iLCJiYXRjaF9yZXF1ZXN0X2lkeCIsInZ0IiwiamEiLCJibSIsIndtIiwiUG0iLCJBbSIsIlNtIiwiaG0iLCJ5bSIsImZpbGUiLCJtZXRob2ROYW1lIiwiY29sdW1uIiwiRW0iLCJ4bSIsInZtIiwiVG0iLCJSbSIsInNvIiwiYW8iLCJfZXJyb3IiLCJzdGFjayIsIlplIiwiJEVuYWJsZWRDYWxsU2l0ZSIsIlZhIiwiX2F2ZyIsIl9jb3VudCIsIl9zdW0iLCJfbWluIiwiX21heCIsImpyIiwiSW0iLCJfYWxsIiwiQm4iLCJCYSIsInVucGFja2VyIiwiYXJnc01hcHBlciIsImttIiwiRG0iLCJVYSIsIk9tIiwiYnkiLCJfbSIsIkdhIiwiUWEiLCJXYSIsInJlbGF0aW9uTmFtZSIsIkphIiwibG8iLCJIYSIsInJlZHVjZVJpZ2h0IiwiTm0iLCJMbSIsInVvIiwiX3J1bnRpbWVEYXRhTW9kZWwiLCJfZXJyb3JGb3JtYXQiLCJkYXRhUGF0aCIsIkZtIiwiTW0iLCIkbSIsImNvIiwiX2V4dGVuc2lvbnMiLCJxbSIsIlZtIiwiX2FwcGxpZWRQYXJlbnQiLCJfY3JlYXRlUHJpc21hUHJvbWlzZSIsImpzTW9kZWxOYW1lIiwiX3JlcXVlc3QiLCJqbSIsIkthIiwicG8iLCJQdCIsIkJtIiwiVW0iLCJfb3JpZ2luYWxDbGllbnQiLCJZYSIsInphIiwiX19BY2NlbGVyYXRlRW5naW5lIiwiX2FjY2VsZXJhdGVFbmdpbmVDb25maWciLCIkdXNlIiwiJG9uIiwiWmEiLCJHbSIsIlFtIiwiVW4iLCJ2aXNpdG9yIiwiWGEiLCJpbmNsdWRlT3JTZWxlY3QiLCJwYXJlbnRNb2RlbE5hbWUiLCJlbCIsIldtIiwicmwiLCJ0bCIsIkptIiwiSG0iLCJUdCIsImlsIiwiY3VzdG9tRGF0YVByb3h5RmV0Y2giLCJsb2NrIiwidGhlbiIsIl9leGVjdXRlUmVxdWVzdCIsIm9wZXJhdGlvbiIsIl9faW50ZXJuYWxQYXJhbXMiLCJsbCIsIm9sIiwic2wiLCJyZXF1ZXN0cyIsImFsIiwicXVlcmllcyIsIm5sIiwidWwiLCJjbCIsIlZlcmNlbCIsInBsIiwicG9zdGluc3RhbGwiLCJjaU5hbWUiLCJkbCIsImRhdGFzb3VyY2VzIiwiZGF0YXNvdXJjZVVybCIsIkttIiwiWW0iLCJCdW4iLCJ6bSIsIlptIiwiTmV0bGlmeSIsIlhtIiwiRWRnZVJ1bnRpbWUiLCJlZiIsInJmIiwidGYiLCJ3b3JrZXJkIiwibmV0bGlmeSIsInByZXR0eU5hbWUiLCJpc0VkZ2UiLCJ5bCIsIlN0IiwiUW4iLCJydW50aW1lQmluYXJ5VGFyZ2V0IiwibmYiLCJnZW5lcmF0b3IiLCJnZW5lcmF0b3JCaW5hcnlUYXJnZXRzIiwiWGUiLCJlciIsInNlYXJjaGVkTG9jYXRpb25zIiwibWwiLCJXbiIsIkpuIiwiZXJyb3JTdGFjayIsImZsIiwicXVlcnlFbmdpbmVOYW1lIiwiZXhwZWN0ZWRMb2NhdGlvbiIsImdsIiwiaGwiLCJvZiIsInNmIiwiYmwiLCJiaW5hcnkiLCJQUklTTUFfUVVFUllfRU5HSU5FX0JJTkFSWSIsImxpYnJhcnkiLCJwcmlzbWFQYXRoIiwiZW5naW5lUGF0aCIsImFmIiwiX19maWxlbmFtZSIsIkVsIiwiZGlybmFtZSIsIm91dHB1dCIsIm1vIiwid2wiLCJ4bCIsInZsIiwiUGwiLCJ0aXRsZSIsInRlbXBsYXRlIiwiYm9keSIsIlRsIiwiZW5naW5lVmVyc2lvbiIsImRhdGFiYXNlIiwiU2wiLCJWciIsImlubGluZURhdGFzb3VyY2VzIiwib3ZlcnJpZGVEYXRhc291cmNlcyIsIkhuIiwic2UiLCJpc1JldHJ5YWJsZSIsIkEiLCJ1ciIsIlJsIiwicHJvdG9jb2wiLCJocmVmIiwiYXBpS2V5IiwiQWwiLCJLbiIsInRyYWNpbmdIZWxwZXIiLCJsb2dMZXZlbCIsImxvZ1F1ZXJpZXMiLCJlbmdpbmVIYXNoIiwidHJhY2VwYXJlbnQiLCJ0cmFuc2FjdGlvbklkIiwiQWNjZXB0IiwiQXV0aG9yaXphdGlvbiIsImlzRW5hYmxlZCIsImdldFRyYWNlUGFyZW50IiwidWYiLCJmbyIsIkJyIiwiY3IiLCJyZXNwb25zZSIsImhlYWRlcnMiLCJwciIsImdvIiwiUnQiLCJBdCIsImxvZ3MiLCJDdCIsIkl0IiwiaG8iLCJrdCIsImNmIiwiRHQiLCJwZiIsIk90IiwieW8iLCJfdCIsImJvIiwiVXIiLCJFbyIsIk50Iiwid28iLCJMdCIsImRmIiwicmVhc29uIiwiRnQiLCJFbmdpbmVOb3RTdGFydGVkIiwibXNnIiwiRW5naW5lU3RhcnR1cEVycm9yIiwiS25vd25FbmdpbmVTdGFydHVwRXJyb3IiLCJIZWFsdGhjaGVja1RpbWVvdXQiLCJJRFBhcnNlRXJyb3IiLCJOb1F1ZXJ5RW5naW5lRm91bmRFcnJvciIsIlRyYW5zYWN0aW9uU3RhcnRFcnJvciIsIkludGVyYWN0aXZlVHJhbnNhY3Rpb25NaXNyb3V0ZWQiLCJJbnZhbGlkUmVxdWVzdEVycm9yIiwic3RhdHVzIiwiR3IiLCJDbCIsInNldFRpbWVvdXQiLCIkZSIsIklsIiwiVGV4dEVuY29kZXIiLCJrbCIsIkRsIiwiTXQiLCJkciIsImZldGNoIiwiZmYiLCJPbCIsImdmIiwiUFJJU01BX0NMSUVOVF9EQVRBX1BST1hZX0NMSUVOVF9WRVJTSU9OIiwiaGYiLCJzdGF0dXNUZXh0IiwiX2wiLCJlbmNvZGVVUkkiLCJObCIsIiR0IiwicXQiLCJpbmxpbmVTY2hlbWEiLCJpbmxpbmVTY2hlbWFIYXNoIiwibG9nRW1pdHRlciIsImhlYWRlckJ1aWxkZXIiLCJzdGFydCIsInN0YXJ0UHJvbWlzZSIsImdldFVSTEFuZEFQSUtleSIsInJlbW90ZUNsaWVudFZlcnNpb24iLCJzdG9wIiwicHJvcGFnYXRlUmVzcG9uc2VFeHRlbnNpb25zIiwiZW1pdCIsInRpbWVzdGFtcCIsImF0dHJpYnV0ZXMiLCJkdXJhdGlvbiIsImR1cmF0aW9uX21zIiwidHJhY2VzIiwiZGlzcGF0Y2hFbmdpbmVTcGFucyIsIm9uQmVmb3JlRXhpdCIsInVwbG9hZFNjaGVtYSIsImludGVybmFsIiwicnVuSW5DaGlsZFNwYW4iLCJtZXRob2QiLCJyZXF1ZXN0IiwiaW50ZXJhY3RpdmVUcmFuc2FjdGlvbiIsInJlcXVlc3RJbnRlcm5hbCIsInJlcXVlc3RCYXRjaCIsImNvbnZlcnRQcm90b2NvbEVycm9yc1RvQ2xpZW50RXJyb3IiLCJ3aXRoUmV0cnkiLCJhY3Rpb25HZXJ1bmQiLCJjYWxsYmFjayIsImxvZ0h0dHBDYWxsIiwicGF5bG9hZCIsImVuZHBvaW50IiwiaGFuZGxlRXJyb3IiLCJiYXRjaFJlc3VsdCIsIm1heF93YWl0IiwibWF4V2FpdCIsInRpbWVvdXQiLCJpc29sYXRpb25fbGV2ZWwiLCJhY3RpdmVQcm92aWRlciIsImFwcGx5UGVuZGluZ01pZ3JhdGlvbnMiLCJMbCIsInZvIiwiRmwiLCJ4byIsInlmIiwiYmYiLCJ0b05hbWVzcGFjZWRQYXRoIiwiY29uc3RhbnRzIiwiZGxvcGVuIiwiUlRMRF9MQVpZIiwiUlRMRF9ERUVQQklORCIsIk1sIiwibG9hZExpYnJhcnkiLCJQbyIsIiRsIiwiYWRhcHRlciIsImVuZ2luZVdhc20iLCJnZXRRdWVyeUVuZ2luZVdhc21Nb2R1bGUiLCJXZWJBc3NlbWJseSIsIkluc3RhbmNlIiwiX193YmluZGdlbl9zdGFydCIsIl9fd2JnX3NldF93YXNtIiwiUXVlcnlFbmdpbmUiLCJkZWJ1Z1BhbmljIiwicmVqZWN0IiwiZG1tZiIsIkVmIiwiQWUiLCJ3ZiIsIml0ZW1fdHlwZSIsInhmIiwicWwiLCJ2ZiIsIlRvIiwiUGYiLCJRciIsImxpYnJhcnlMb2FkZXIiLCJsaWJyYXJ5U3RhcnRlZCIsImVuYWJsZURlYnVnTG9ncyIsImRhdGFzb3VyY2VPdmVycmlkZXMiLCJsaWJyYXJ5SW5zdGFudGlhdGlvblByb21pc2UiLCJpbnN0YW50aWF0ZUxpYnJhcnkiLCJ3cmFwRW5naW5lIiwiY29tbWl0VHJhbnNhY3Rpb24iLCJ3aXRoUmVxdWVzdElkIiwiY29ubmVjdCIsImRpc2Nvbm5lY3QiLCJyb2xsYmFja1RyYW5zYWN0aW9uIiwic2RsU2NoZW1hIiwidHJhY2UiLCJmcmVlIiwiZW5naW5lIiwic3BhbnMiLCJhZGFwdGVyUHJvbWlzZSIsInBhcnNlRW5naW5lUmVzcG9uc2UiLCJUZiIsImdldEV4dGVybmFsQWRhcHRlckVycm9yIiwiZ2V0Q3VycmVudEJpbmFyeVRhcmdldCIsImxvYWRFbmdpbmUiLCJRdWVyeUVuZ2luZUNvbnN0cnVjdG9yIiwiV2Vha1JlZiIsImlnbm9yZUVudlZhckVycm9ycyIsImNvbmZpZ0RpciIsImVuZ2luZVByb3RvY29sIiwiZW5hYmxlVHJhY2luZyIsImRlcmVmIiwibG9nZ2VyIiwicGFyc2VJbml0RXJyb3IiLCJtb2R1bGVfcGF0aCIsImxvZ2dlclJ1c3RQYW5pYyIsIlNvIiwibGluZSIsInBhcnNlUmVxdWVzdEVycm9yIiwibGlicmFyeVN0b3BwaW5nUHJvbWlzZSIsImxpYnJhcnlTdGFydGluZ1Byb21pc2UiLCJleGVjdXRpbmdRdWVyeVByb21pc2UiLCJzZXRJbW1lZGlhdGUiLCJ2ZXJzaW9uSW5mbyIsImxhc3RRdWVyeSIsImJ1aWxkUXVlcnlFcnJvciIsImRhdGEiLCJiYWNrdHJhY2UiLCJpc19wYW5pYyIsImpsIiwiY29weUVuZ2luZSIsInRhcmdldEJ1aWxkVHlwZSIsIl90YWciLCJhY2NlbGVyYXRlIiwicHBnIiwiZHJpdmVyQWRhcHRlcnMiLCJkaWFnbm9zdGljcyIsIndhcm5pbmdzIiwiaXNVc2luZyIsIlZsIiwiWW4iLCJCbCIsImNvbW1hbmQiLCJVbCIsIldyIiwiR2wiLCJXbCIsInByaXNtYV9fdHlwZSIsInByaXNtYV9fdmFsdWUiLCJTZiIsIkpsIiwiU2hhcmVkQXJyYXlCdWZmZXIiLCJRbCIsIlJmIiwiSGwiLCJSbyIsIkFvIiwicGFyYW1ldGVycyIsIktsIiwicmVxdWVzdEFyZ3NUb01pZGRsZXdhcmVBcmdzIiwibWlkZGxld2FyZUFyZ3NUb1JlcXVlc3RBcmdzIiwiWWwiLCJDbyIsInpsIiwic3BlYyIsImNhdGNoIiwiZmluYWxseSIsInJlcXVlc3RUcmFuc2FjdGlvbiIsIkFmIiwiQ2YiLCJnZXRBY3RpdmVDb250ZXh0IiwiSW8iLCJnZXRHbG9iYWxUcmFjaW5nSGVscGVyIiwiUFJJU01BX0lOU1RSVU1FTlRBVElPTiIsImhlbHBlciIsIlpsIiwiWGwiLCJldSIsInpuIiwidXNlIiwiX21pZGRsZXdhcmVzIiwidHUiLCJabiIsInJ1Iiwia28iLCJzb3J0IiwiSWYiLCJjcmVhdGVPbmUiLCJkZWxldGVPbmUiLCJ1cGRhdGVPbmUiLCJ1cHNlcnRPbmUiLCJEbyIsIlhuIiwidGlja0FjdGl2ZSIsImJhdGNoZXMiLCJiYXRjaEJ5IiwibmV4dFRpY2siLCJkaXNwYXRjaEJhdGNoZXMiLCJzaW5nbGVMb2FkZXIiLCJiYXRjaE9yZGVyIiwiYmF0Y2hMb2FkZXIiLCJtciIsImtmIiwicm93cyIsImNvbHVtbnMiLCJEZiIsInJpIiwiZGF0YWxvYWRlciIsIm90ZWxQYXJlbnRDdHgiLCJwcm90b2NvbFF1ZXJ5IiwiX3RyYWNpbmdIZWxwZXIiLCJPZiIsImNvbnRhaW5zV3JpdGUiLCJtYXBRdWVyeUVuZ2luZVJlc3VsdCIsIm51IiwiaXNXcml0ZSIsImhhbmRsZUFuZExvZ1JlcXVlc3RFcnJvciIsInVucGFjayIsIlBSSVNNQV9DTElFTlRfR0VUX1RJTUUiLCJoYW5kbGVSZXF1ZXN0RXJyb3IiLCJfZiIsIk5mIiwiaXUiLCJzYW5pdGl6ZU1lc3NhZ2UiLCJvdSIsImN1IiwiTyIsInN1IiwiYXUiLCJsdSIsIkxmIiwiZGF0YXNvdXJjZU5hbWVzIiwiSnIiLCJ0cmFuc2FjdGlvbk9wdGlvbnMiLCJNZiIsIm1vZGVsS2V5IiwiJGYiLCJfX2ludGVybmFsIiwicHUiLCJGZiIsImRpc3RhbmNlIiwidXUiLCJkdSIsInJyIiwiTk9ERV9DTElFTlQiLCJxZiIsImpmIiwiVmYiLCJuZXh0SWQiLCIkbWV0cmljcyIsImNvbmZpZ092ZXJyaWRlIiwiRXZlbnRFbWl0dGVyIiwiX3ByZXZpZXdGZWF0dXJlcyIsIl9hY3RpdmVQcm92aWRlciIsIl9nbG9iYWxPbWl0IiwicmVsYXRpdmVFbnZQYXRocyIsImluamVjdGFibGVFZGdlRW52IiwicmVsYXRpdmVQYXRoIiwiX2VuZ2luZUNvbmZpZyIsImFsbG93VHJpZ2dlclBhbmljIiwiYmluYXJ5UGF0aCIsImVuZ2luZUVuZHBvaW50IiwiZmxhZ3MiLCJjb21waWxlcldhc20iLCJpc0J1bmRsZWQiLCJhY2NlbGVyYXRlVXRpbHMiLCJyZXNvbHZlRGF0YXNvdXJjZVVybCIsImdldEJhdGNoUmVxdWVzdFBheWxvYWQiLCJwcmlzbWFHcmFwaFFMVG9KU0Vycm9yIiwiX3JlcXVlc3RIYW5kbGVyIiwiJGNvbm5lY3QiLCIkZGlzY29ubmVjdCIsIiRleGVjdXRlUmF3SW50ZXJuYWwiLCJtaWRkbGV3YXJlQXJnc01hcHBlciIsIiRleGVjdXRlUmF3IiwibXUiLCIkZXhlY3V0ZVJhd1Vuc2FmZSIsIiRydW5Db21tYW5kUmF3IiwiJHF1ZXJ5UmF3SW50ZXJuYWwiLCIkcXVlcnlSYXciLCIkcXVlcnlSYXdUeXBlZCIsIiRxdWVyeVJhd1Vuc2FmZSIsIl90cmFuc2FjdGlvbldpdGhBcnJheSIsInByb21pc2VzIiwiX3RyYW5zYWN0aW9uV2l0aENhbGxiYWNrIiwiX2NyZWF0ZUl0eENsaWVudCIsIiR0cmFuc2FjdGlvbiIsInJ1bkluVHJhbnNhY3Rpb24iLCJtaWRkbGV3YXJlIiwiYWN0aXZlIiwiZW5kIiwiQXN5bmNSZXNvdXJjZSIsInJ1bkluQXN5bmNTY29wZSIsIm90ZWxDaGlsZEN0eCIsIiRhcHBseVBlbmRpbmdNaWdyYXRpb25zIiwiQmYiLCJVZiIsIml0ZXJhdG9yIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwidG9QcmltaXRpdmUiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/generated/prisma/runtime/library.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&page=%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute.ts&appDir=E%3A%5CAI%20Work%5CWork%5CProf%5Changer-on%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=E%3A%5CAI%20Work%5CWork%5CProf%5Changer-on&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&page=%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute.ts&appDir=E%3A%5CAI%20Work%5CWork%5CProf%5Changer-on%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=E%3A%5CAI%20Work%5CWork%5CProf%5Changer-on&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var E_AI_Work_Work_Prof_hanger_on_app_api_auth_nextauth_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/auth/[...nextauth]/route.ts */ \"(rsc)/./app/api/auth/[...nextauth]/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/auth/[...nextauth]/route\",\n        pathname: \"/api/auth/[...nextauth]\",\n        filename: \"route\",\n        bundlePath: \"app/api/auth/[...nextauth]/route\"\n    },\n    resolvedPagePath: \"E:\\\\AI Work\\\\Work\\\\Prof\\\\hanger-on\\\\app\\\\api\\\\auth\\\\[...nextauth]\\\\route.ts\",\n    nextConfigOutput,\n    userland: E_AI_Work_Work_Prof_hanger_on_app_api_auth_nextauth_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZhdXRoJTJGJTVCLi4ubmV4dGF1dGglNUQlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmF1dGglMkYlNUIuLi5uZXh0YXV0aCU1RCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmF1dGglMkYlNUIuLi5uZXh0YXV0aCU1RCUyRnJvdXRlLnRzJmFwcERpcj1FJTNBJTVDQUklMjBXb3JrJTVDV29yayU1Q1Byb2YlNUNoYW5nZXItb24lNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUUlM0ElNUNBSSUyMFdvcmslNUNXb3JrJTVDUHJvZiU1Q2hhbmdlci1vbiZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBK0Y7QUFDdkM7QUFDcUI7QUFDMkI7QUFDeEc7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHlHQUFtQjtBQUMzQztBQUNBLGNBQWMsa0VBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzREFBc0Q7QUFDOUQ7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDMEY7O0FBRTFGIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkU6XFxcXEFJIFdvcmtcXFxcV29ya1xcXFxQcm9mXFxcXGhhbmdlci1vblxcXFxhcHBcXFxcYXBpXFxcXGF1dGhcXFxcWy4uLm5leHRhdXRoXVxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYXV0aC9bLi4ubmV4dGF1dGhdL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYXV0aC9bLi4ubmV4dGF1dGhdXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9hdXRoL1suLi5uZXh0YXV0aF0vcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJFOlxcXFxBSSBXb3JrXFxcXFdvcmtcXFxcUHJvZlxcXFxoYW5nZXItb25cXFxcYXBwXFxcXGFwaVxcXFxhdXRoXFxcXFsuLi5uZXh0YXV0aF1cXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICB3b3JrQXN5bmNTdG9yYWdlLFxuICAgICAgICB3b3JrVW5pdEFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&page=%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute.ts&appDir=E%3A%5CAI%20Work%5CWork%5CProf%5Changer-on%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=E%3A%5CAI%20Work%5CWork%5CProf%5Changer-on&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "node:async_hooks":
/*!***********************************!*\
  !*** external "node:async_hooks" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:async_hooks");

/***/ }),

/***/ "node:child_process":
/*!*************************************!*\
  !*** external "node:child_process" ***!
  \*************************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:child_process");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:crypto");

/***/ }),

/***/ "node:events":
/*!******************************!*\
  !*** external "node:events" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:events");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:fs");

/***/ }),

/***/ "node:fs/promises":
/*!***********************************!*\
  !*** external "node:fs/promises" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:fs/promises");

/***/ }),

/***/ "node:os":
/*!**************************!*\
  !*** external "node:os" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:os");

/***/ }),

/***/ "node:path":
/*!****************************!*\
  !*** external "node:path" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:path");

/***/ }),

/***/ "node:process":
/*!*******************************!*\
  !*** external "node:process" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:process");

/***/ }),

/***/ "node:tty":
/*!***************************!*\
  !*** external "node:tty" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:tty");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:util");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/next-auth","vendor-chunks/@babel","vendor-chunks/jose","vendor-chunks/openid-client","vendor-chunks/uuid","vendor-chunks/oauth","vendor-chunks/@panva","vendor-chunks/preact-render-to-string","vendor-chunks/@auth","vendor-chunks/lru-cache","vendor-chunks/preact","vendor-chunks/oidc-token-hash","vendor-chunks/object-hash","vendor-chunks/cookie"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&page=%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute.ts&appDir=E%3A%5CAI%20Work%5CWork%5CProf%5Changer-on%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=E%3A%5CAI%20Work%5CWork%5CProf%5Changer-on&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();