// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]
  garments      Garment[]
  tags          Tag[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Wardrobe Management Models
model Garment {
  id               String         @id @default(cuid())
  name             String
  category         String
  material         String?
  color            String?
  size             String?
  brand            String?
  purchaseDate     DateTime?      @map("purchase_date")
  cost             Float?
  careInstructions String?        @map("care_instructions")
  status           GarmentStatus  @default(CLEAN)
  notes            String?
  images           GarmentImage[]
  tags             GarmentTag[]
  userId           String         @map("user_id")
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")

  @@map("garments")
}

model GarmentImage {
  id        String   @id @default(cuid())
  url       String
  fileName  String   @map("file_name")
  fileSize  Int      @map("file_size")
  mimeType  String   @map("mime_type")
  garmentId String   @map("garment_id")
  garment   Garment  @relation(fields: [garmentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")

  @@map("garment_images")
}

model Tag {
  id        String       @id @default(cuid())
  name      String
  color     String? // Hex color for tag display
  userId    String       @map("user_id")
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  garments  GarmentTag[]
  createdAt DateTime     @default(now()) @map("created_at")

  @@unique([name, userId]) // User can't have duplicate tag names
  @@map("tags")
}

model GarmentTag {
  garmentId String  @map("garment_id")
  tagId     String  @map("tag_id")
  garment   Garment @relation(fields: [garmentId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([garmentId, tagId])
  @@map("garment_tags")
}

enum GarmentStatus {
  CLEAN
  DIRTY
  WORN_2X
  NEEDS_WASHING
}
